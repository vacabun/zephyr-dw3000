
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 21 00 20 05 22 00 08 d1 5a 00 08 d9 21 00 08     .!. ."...Z...!..
 8000010:	d9 21 00 08 d9 21 00 08 d9 21 00 08 00 00 00 00     .!...!...!......
	...
 800002c:	ed 1e 00 08 d9 21 00 08 00 00 00 00 99 1e 00 08     .....!..........
 800003c:	f5 33 00 08                                         .3..

08000040 <_irq_vector_table>:
 8000040:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000050:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000060:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000070:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000080:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000090:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 80000a0:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 80000b0:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 80000c0:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 80000d0:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 80000e0:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 80000f0:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000100:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000110:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000120:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000130:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000140:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000150:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000160:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000170:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000180:	9d 1f 00 08 9d 1f 00 08 9d 1f 00 08 9d 1f 00 08     ................
 8000190:	9d 1f 00 08                                         ....

Disassembly of section text:

08000194 <__aeabi_uldivmod>:
 8000194:	b953      	cbnz	r3, 80001ac <__aeabi_uldivmod+0x18>
 8000196:	b94a      	cbnz	r2, 80001ac <__aeabi_uldivmod+0x18>
 8000198:	2900      	cmp	r1, #0
 800019a:	bf08      	it	eq
 800019c:	2800      	cmpeq	r0, #0
 800019e:	bf1c      	itt	ne
 80001a0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a8:	f000 b80c 	b.w	80001c4 <__aeabi_idiv0>
 80001ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b4:	f000 f808 	bl	80001c8 <__udivmoddi4>
 80001b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c0:	b004      	add	sp, #16
 80001c2:	4770      	bx	lr

080001c4 <__aeabi_idiv0>:
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop

080001c8 <__udivmoddi4>:
 80001c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001cc:	4686      	mov	lr, r0
 80001ce:	468c      	mov	ip, r1
 80001d0:	4608      	mov	r0, r1
 80001d2:	9e08      	ldr	r6, [sp, #32]
 80001d4:	4615      	mov	r5, r2
 80001d6:	4674      	mov	r4, lr
 80001d8:	4619      	mov	r1, r3
 80001da:	2b00      	cmp	r3, #0
 80001dc:	f040 80c2 	bne.w	8000364 <__udivmoddi4+0x19c>
 80001e0:	4285      	cmp	r5, r0
 80001e2:	fab2 f282 	clz	r2, r2
 80001e6:	d945      	bls.n	8000274 <__udivmoddi4+0xac>
 80001e8:	b14a      	cbz	r2, 80001fe <__udivmoddi4+0x36>
 80001ea:	f1c2 0320 	rsb	r3, r2, #32
 80001ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80001f2:	fa2e f303 	lsr.w	r3, lr, r3
 80001f6:	4095      	lsls	r5, r2
 80001f8:	ea43 0c0c 	orr.w	ip, r3, ip
 80001fc:	4094      	lsls	r4, r2
 80001fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000202:	b2a8      	uxth	r0, r5
 8000204:	fbbc f8fe 	udiv	r8, ip, lr
 8000208:	0c23      	lsrs	r3, r4, #16
 800020a:	fb0e cc18 	mls	ip, lr, r8, ip
 800020e:	fb08 f900 	mul.w	r9, r8, r0
 8000212:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8000216:	4599      	cmp	r9, r3
 8000218:	d928      	bls.n	800026c <__udivmoddi4+0xa4>
 800021a:	18eb      	adds	r3, r5, r3
 800021c:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8000220:	d204      	bcs.n	800022c <__udivmoddi4+0x64>
 8000222:	4599      	cmp	r9, r3
 8000224:	d902      	bls.n	800022c <__udivmoddi4+0x64>
 8000226:	f1a8 0702 	sub.w	r7, r8, #2
 800022a:	442b      	add	r3, r5
 800022c:	eba3 0309 	sub.w	r3, r3, r9
 8000230:	b2a4      	uxth	r4, r4
 8000232:	fbb3 fcfe 	udiv	ip, r3, lr
 8000236:	fb0e 331c 	mls	r3, lr, ip, r3
 800023a:	fb0c f000 	mul.w	r0, ip, r0
 800023e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000242:	42a0      	cmp	r0, r4
 8000244:	d914      	bls.n	8000270 <__udivmoddi4+0xa8>
 8000246:	192c      	adds	r4, r5, r4
 8000248:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 800024c:	d204      	bcs.n	8000258 <__udivmoddi4+0x90>
 800024e:	42a0      	cmp	r0, r4
 8000250:	d902      	bls.n	8000258 <__udivmoddi4+0x90>
 8000252:	f1ac 0302 	sub.w	r3, ip, #2
 8000256:	442c      	add	r4, r5
 8000258:	1a24      	subs	r4, r4, r0
 800025a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 800025e:	b11e      	cbz	r6, 8000268 <__udivmoddi4+0xa0>
 8000260:	40d4      	lsrs	r4, r2
 8000262:	2300      	movs	r3, #0
 8000264:	6034      	str	r4, [r6, #0]
 8000266:	6073      	str	r3, [r6, #4]
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	4647      	mov	r7, r8
 800026e:	e7dd      	b.n	800022c <__udivmoddi4+0x64>
 8000270:	4663      	mov	r3, ip
 8000272:	e7f1      	b.n	8000258 <__udivmoddi4+0x90>
 8000274:	bb92      	cbnz	r2, 80002dc <__udivmoddi4+0x114>
 8000276:	1b43      	subs	r3, r0, r5
 8000278:	2101      	movs	r1, #1
 800027a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027e:	b2af      	uxth	r7, r5
 8000280:	fbb3 fcfe 	udiv	ip, r3, lr
 8000284:	0c20      	lsrs	r0, r4, #16
 8000286:	fb0e 331c 	mls	r3, lr, ip, r3
 800028a:	fb0c f807 	mul.w	r8, ip, r7
 800028e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000292:	4598      	cmp	r8, r3
 8000294:	d962      	bls.n	800035c <__udivmoddi4+0x194>
 8000296:	18eb      	adds	r3, r5, r3
 8000298:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800029c:	d204      	bcs.n	80002a8 <__udivmoddi4+0xe0>
 800029e:	4598      	cmp	r8, r3
 80002a0:	d902      	bls.n	80002a8 <__udivmoddi4+0xe0>
 80002a2:	f1ac 0002 	sub.w	r0, ip, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	eba3 0308 	sub.w	r3, r3, r8
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80002b2:	fb0e 331c 	mls	r3, lr, ip, r3
 80002b6:	fb0c f707 	mul.w	r7, ip, r7
 80002ba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002be:	42a7      	cmp	r7, r4
 80002c0:	d94e      	bls.n	8000360 <__udivmoddi4+0x198>
 80002c2:	192c      	adds	r4, r5, r4
 80002c4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80002c8:	d204      	bcs.n	80002d4 <__udivmoddi4+0x10c>
 80002ca:	42a7      	cmp	r7, r4
 80002cc:	d902      	bls.n	80002d4 <__udivmoddi4+0x10c>
 80002ce:	f1ac 0302 	sub.w	r3, ip, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	1be4      	subs	r4, r4, r7
 80002d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80002da:	e7c0      	b.n	800025e <__udivmoddi4+0x96>
 80002dc:	f1c2 0320 	rsb	r3, r2, #32
 80002e0:	fa20 f103 	lsr.w	r1, r0, r3
 80002e4:	4095      	lsls	r5, r2
 80002e6:	4090      	lsls	r0, r2
 80002e8:	fa2e f303 	lsr.w	r3, lr, r3
 80002ec:	4303      	orrs	r3, r0
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	b2af      	uxth	r7, r5
 80002f4:	fbb1 fcfe 	udiv	ip, r1, lr
 80002f8:	fb0e 101c 	mls	r0, lr, ip, r1
 80002fc:	0c19      	lsrs	r1, r3, #16
 80002fe:	fb0c f807 	mul.w	r8, ip, r7
 8000302:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000306:	4588      	cmp	r8, r1
 8000308:	fa04 f402 	lsl.w	r4, r4, r2
 800030c:	d922      	bls.n	8000354 <__udivmoddi4+0x18c>
 800030e:	1869      	adds	r1, r5, r1
 8000310:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000314:	d204      	bcs.n	8000320 <__udivmoddi4+0x158>
 8000316:	4588      	cmp	r8, r1
 8000318:	d902      	bls.n	8000320 <__udivmoddi4+0x158>
 800031a:	f1ac 0002 	sub.w	r0, ip, #2
 800031e:	4429      	add	r1, r5
 8000320:	eba1 0108 	sub.w	r1, r1, r8
 8000324:	b29b      	uxth	r3, r3
 8000326:	fbb1 fcfe 	udiv	ip, r1, lr
 800032a:	fb0e 111c 	mls	r1, lr, ip, r1
 800032e:	fb0c f707 	mul.w	r7, ip, r7
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	429f      	cmp	r7, r3
 8000338:	d90e      	bls.n	8000358 <__udivmoddi4+0x190>
 800033a:	18eb      	adds	r3, r5, r3
 800033c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000340:	d204      	bcs.n	800034c <__udivmoddi4+0x184>
 8000342:	429f      	cmp	r7, r3
 8000344:	d902      	bls.n	800034c <__udivmoddi4+0x184>
 8000346:	f1ac 0102 	sub.w	r1, ip, #2
 800034a:	442b      	add	r3, r5
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000352:	e792      	b.n	800027a <__udivmoddi4+0xb2>
 8000354:	4660      	mov	r0, ip
 8000356:	e7e3      	b.n	8000320 <__udivmoddi4+0x158>
 8000358:	4661      	mov	r1, ip
 800035a:	e7f7      	b.n	800034c <__udivmoddi4+0x184>
 800035c:	4660      	mov	r0, ip
 800035e:	e7a3      	b.n	80002a8 <__udivmoddi4+0xe0>
 8000360:	4663      	mov	r3, ip
 8000362:	e7b7      	b.n	80002d4 <__udivmoddi4+0x10c>
 8000364:	4283      	cmp	r3, r0
 8000366:	d906      	bls.n	8000376 <__udivmoddi4+0x1ae>
 8000368:	b916      	cbnz	r6, 8000370 <__udivmoddi4+0x1a8>
 800036a:	2100      	movs	r1, #0
 800036c:	4608      	mov	r0, r1
 800036e:	e77b      	b.n	8000268 <__udivmoddi4+0xa0>
 8000370:	e9c6 e000 	strd	lr, r0, [r6]
 8000374:	e7f9      	b.n	800036a <__udivmoddi4+0x1a2>
 8000376:	fab3 f783 	clz	r7, r3
 800037a:	b98f      	cbnz	r7, 80003a0 <__udivmoddi4+0x1d8>
 800037c:	4283      	cmp	r3, r0
 800037e:	d301      	bcc.n	8000384 <__udivmoddi4+0x1bc>
 8000380:	4572      	cmp	r2, lr
 8000382:	d808      	bhi.n	8000396 <__udivmoddi4+0x1ce>
 8000384:	ebbe 0402 	subs.w	r4, lr, r2
 8000388:	eb60 0303 	sbc.w	r3, r0, r3
 800038c:	2001      	movs	r0, #1
 800038e:	469c      	mov	ip, r3
 8000390:	b91e      	cbnz	r6, 800039a <__udivmoddi4+0x1d2>
 8000392:	2100      	movs	r1, #0
 8000394:	e768      	b.n	8000268 <__udivmoddi4+0xa0>
 8000396:	4638      	mov	r0, r7
 8000398:	e7fa      	b.n	8000390 <__udivmoddi4+0x1c8>
 800039a:	e9c6 4c00 	strd	r4, ip, [r6]
 800039e:	e7f8      	b.n	8000392 <__udivmoddi4+0x1ca>
 80003a0:	f1c7 0c20 	rsb	ip, r7, #32
 80003a4:	40bb      	lsls	r3, r7
 80003a6:	fa22 f40c 	lsr.w	r4, r2, ip
 80003aa:	431c      	orrs	r4, r3
 80003ac:	fa2e f10c 	lsr.w	r1, lr, ip
 80003b0:	fa20 f30c 	lsr.w	r3, r0, ip
 80003b4:	40b8      	lsls	r0, r7
 80003b6:	4301      	orrs	r1, r0
 80003b8:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80003bc:	fa0e f507 	lsl.w	r5, lr, r7
 80003c0:	fbb3 f8f9 	udiv	r8, r3, r9
 80003c4:	fa1f fe84 	uxth.w	lr, r4
 80003c8:	fb09 3018 	mls	r0, r9, r8, r3
 80003cc:	0c0b      	lsrs	r3, r1, #16
 80003ce:	fb08 fa0e 	mul.w	sl, r8, lr
 80003d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003d6:	459a      	cmp	sl, r3
 80003d8:	fa02 f207 	lsl.w	r2, r2, r7
 80003dc:	d940      	bls.n	8000460 <__udivmoddi4+0x298>
 80003de:	18e3      	adds	r3, r4, r3
 80003e0:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003e4:	d204      	bcs.n	80003f0 <__udivmoddi4+0x228>
 80003e6:	459a      	cmp	sl, r3
 80003e8:	d902      	bls.n	80003f0 <__udivmoddi4+0x228>
 80003ea:	f1a8 0002 	sub.w	r0, r8, #2
 80003ee:	4423      	add	r3, r4
 80003f0:	eba3 030a 	sub.w	r3, r3, sl
 80003f4:	b289      	uxth	r1, r1
 80003f6:	fbb3 f8f9 	udiv	r8, r3, r9
 80003fa:	fb09 3318 	mls	r3, r9, r8, r3
 80003fe:	fb08 fe0e 	mul.w	lr, r8, lr
 8000402:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000406:	458e      	cmp	lr, r1
 8000408:	d92c      	bls.n	8000464 <__udivmoddi4+0x29c>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000410:	d204      	bcs.n	800041c <__udivmoddi4+0x254>
 8000412:	458e      	cmp	lr, r1
 8000414:	d902      	bls.n	800041c <__udivmoddi4+0x254>
 8000416:	f1a8 0302 	sub.w	r3, r8, #2
 800041a:	4421      	add	r1, r4
 800041c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000420:	fba0 9802 	umull	r9, r8, r0, r2
 8000424:	eba1 010e 	sub.w	r1, r1, lr
 8000428:	4541      	cmp	r1, r8
 800042a:	46ce      	mov	lr, r9
 800042c:	4643      	mov	r3, r8
 800042e:	d302      	bcc.n	8000436 <__udivmoddi4+0x26e>
 8000430:	d106      	bne.n	8000440 <__udivmoddi4+0x278>
 8000432:	454d      	cmp	r5, r9
 8000434:	d204      	bcs.n	8000440 <__udivmoddi4+0x278>
 8000436:	ebb9 0e02 	subs.w	lr, r9, r2
 800043a:	eb68 0304 	sbc.w	r3, r8, r4
 800043e:	3801      	subs	r0, #1
 8000440:	2e00      	cmp	r6, #0
 8000442:	d0a6      	beq.n	8000392 <__udivmoddi4+0x1ca>
 8000444:	ebb5 020e 	subs.w	r2, r5, lr
 8000448:	eb61 0103 	sbc.w	r1, r1, r3
 800044c:	fa01 fc0c 	lsl.w	ip, r1, ip
 8000450:	fa22 f307 	lsr.w	r3, r2, r7
 8000454:	ea4c 0303 	orr.w	r3, ip, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	e9c6 3100 	strd	r3, r1, [r6]
 800045e:	e798      	b.n	8000392 <__udivmoddi4+0x1ca>
 8000460:	4640      	mov	r0, r8
 8000462:	e7c5      	b.n	80003f0 <__udivmoddi4+0x228>
 8000464:	4643      	mov	r3, r8
 8000466:	e7d9      	b.n	800041c <__udivmoddi4+0x254>

08000468 <main>:

BUILD_ASSERT(DT_NODE_HAS_COMPAT(DT_CHOSEN(zephyr_console), zephyr_cdc_acm_uart),
	     "Console device is not ACM CDC UART device");

void main(void)
{
 8000468:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct device *const dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	uint32_t dtr = 0;
 800046a:	2000      	movs	r0, #0
 800046c:	9001      	str	r0, [sp, #4]

	if (usb_enable(NULL)) {
 800046e:	f000 ff6d 	bl	800134c <usb_enable>
 8000472:	b9d8      	cbnz	r0, 80004ac <main+0x44>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
 8000474:	4c0e      	ldr	r4, [pc, #56]	; (80004b0 <main+0x48>)
		return;
	}

	/* Poll if the DTR flag was set */
	while (!dtr) {
 8000476:	9b01      	ldr	r3, [sp, #4]
 8000478:	b15b      	cbz	r3, 8000492 <main+0x2a>
		/* Give CPU resources to low priority threads. */
		k_sleep(K_MSEC(100));
	}

	while (1) {
		printk("Hello World!! %s\n", CONFIG_ARCH);
 800047a:	4d0e      	ldr	r5, [pc, #56]	; (80004b4 <main+0x4c>)
 800047c:	4c0e      	ldr	r4, [pc, #56]	; (80004b8 <main+0x50>)
 800047e:	4629      	mov	r1, r5
 8000480:	4620      	mov	r0, r4
 8000482:	f005 f890 	bl	80055a6 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8000486:	2100      	movs	r1, #0
 8000488:	f242 7010 	movw	r0, #10000	; 0x2710
 800048c:	f004 fe66 	bl	800515c <z_impl_k_sleep>
	while (1) {
 8000490:	e7f5      	b.n	800047e <main+0x16>
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
 8000492:	68a3      	ldr	r3, [r4, #8]
 8000494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000496:	b11b      	cbz	r3, 80004a0 <main+0x38>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
 8000498:	aa01      	add	r2, sp, #4
 800049a:	2104      	movs	r1, #4
 800049c:	4620      	mov	r0, r4
 800049e:	4798      	blx	r3
 80004a0:	2100      	movs	r1, #0
 80004a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004a6:	f004 fe59 	bl	800515c <z_impl_k_sleep>
 80004aa:	e7e4      	b.n	8000476 <main+0xe>
		k_sleep(K_SECONDS(1));
	}
}
 80004ac:	b003      	add	sp, #12
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	080073dc 	.word	0x080073dc
 80004b4:	08007a2a 	.word	0x08007a2a
 80004b8:	08007a2e 	.word	0x08007a2e

080004bc <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <char_out+0x8>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4718      	bx	r3
 80004c2:	bf00      	nop
 80004c4:	20000000 	.word	0x20000000

080004c8 <__printk_hook_install>:
	_char_out = fn;
 80004c8:	4b01      	ldr	r3, [pc, #4]	; (80004d0 <__printk_hook_install+0x8>)
 80004ca:	6018      	str	r0, [r3, #0]
}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000

080004d4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
 80004d4:	b507      	push	{r0, r1, r2, lr}
 80004d6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 80004d8:	2100      	movs	r1, #0
 80004da:	4602      	mov	r2, r0
 80004dc:	9100      	str	r1, [sp, #0]
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <vprintk+0x18>)
 80004e0:	f000 f806 	bl	80004f0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80004e4:	b003      	add	sp, #12
 80004e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80004ea:	bf00      	nop
 80004ec:	080004bd 	.word	0x080004bd

080004f0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 80004f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f4:	4681      	mov	r9, r0
 80004f6:	b095      	sub	sp, #84	; 0x54
 80004f8:	468b      	mov	fp, r1
 80004fa:	4617      	mov	r7, r2
 80004fc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80004fe:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000500:	7838      	ldrb	r0, [r7, #0]
 8000502:	b908      	cbnz	r0, 8000508 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000504:	4628      	mov	r0, r5
 8000506:	e358      	b.n	8000bba <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
 8000508:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 800050a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 800050c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 800050e:	d006      	beq.n	800051e <z_cbvprintf_impl+0x2e>
			OUTC('%');
 8000510:	4659      	mov	r1, fp
 8000512:	47c8      	blx	r9
 8000514:	2800      	cmp	r0, #0
 8000516:	f2c0 8350 	blt.w	8000bba <z_cbvprintf_impl+0x6ca>
 800051a:	3501      	adds	r5, #1
		if (bps == NULL) {
 800051c:	e1fb      	b.n	8000916 <z_cbvprintf_impl+0x426>
		} state = {
 800051e:	2218      	movs	r2, #24
 8000520:	2100      	movs	r1, #0
 8000522:	a80e      	add	r0, sp, #56	; 0x38
 8000524:	f005 fb0a 	bl	8005b3c <memset>
	if (*sp == '%') {
 8000528:	787b      	ldrb	r3, [r7, #1]
 800052a:	2b25      	cmp	r3, #37	; 0x25
 800052c:	d07d      	beq.n	800062a <z_cbvprintf_impl+0x13a>
 800052e:	2300      	movs	r3, #0
 8000530:	1c78      	adds	r0, r7, #1
 8000532:	4698      	mov	r8, r3
 8000534:	469e      	mov	lr, r3
 8000536:	469c      	mov	ip, r3
 8000538:	461e      	mov	r6, r3
 800053a:	4601      	mov	r1, r0
		switch (*sp) {
 800053c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000540:	2a2b      	cmp	r2, #43	; 0x2b
 8000542:	f000 80a1 	beq.w	8000688 <z_cbvprintf_impl+0x198>
 8000546:	f200 8098 	bhi.w	800067a <z_cbvprintf_impl+0x18a>
 800054a:	2a20      	cmp	r2, #32
 800054c:	f000 809f 	beq.w	800068e <z_cbvprintf_impl+0x19e>
 8000550:	2a23      	cmp	r2, #35	; 0x23
 8000552:	f000 809f 	beq.w	8000694 <z_cbvprintf_impl+0x1a4>
 8000556:	b12b      	cbz	r3, 8000564 <z_cbvprintf_impl+0x74>
 8000558:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800055c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000560:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000564:	f1b8 0f00 	cmp.w	r8, #0
 8000568:	d005      	beq.n	8000576 <z_cbvprintf_impl+0x86>
 800056a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800056e:	f043 0320 	orr.w	r3, r3, #32
 8000572:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000576:	f1be 0f00 	cmp.w	lr, #0
 800057a:	d005      	beq.n	8000588 <z_cbvprintf_impl+0x98>
 800057c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000580:	f043 0310 	orr.w	r3, r3, #16
 8000584:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8000588:	f1bc 0f00 	cmp.w	ip, #0
 800058c:	d005      	beq.n	800059a <z_cbvprintf_impl+0xaa>
 800058e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8000592:	f043 0308 	orr.w	r3, r3, #8
 8000596:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800059a:	b12e      	cbz	r6, 80005a8 <z_cbvprintf_impl+0xb8>
 800059c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 80005a8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80005ac:	f003 0044 	and.w	r0, r3, #68	; 0x44
 80005b0:	2844      	cmp	r0, #68	; 0x44
 80005b2:	d103      	bne.n	80005bc <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 80005b4:	f36f 1386 	bfc	r3, #6, #1
 80005b8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 80005bc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 80005c0:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 80005c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 80005ca:	d17f      	bne.n	80006cc <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 80005cc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80005d0:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
 80005d4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 80005d6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	2a2e      	cmp	r2, #46	; 0x2e
 80005de:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80005e2:	bf0c      	ite	eq
 80005e4:	2101      	moveq	r1, #1
 80005e6:	2100      	movne	r1, #0
 80005e8:	f361 0241 	bfi	r2, r1, #1, #1
 80005ec:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 80005f0:	d178      	bne.n	80006e4 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 80005f2:	785a      	ldrb	r2, [r3, #1]
 80005f4:	2a2a      	cmp	r2, #42	; 0x2a
 80005f6:	d06e      	beq.n	80006d6 <z_cbvprintf_impl+0x1e6>
	++sp;
 80005f8:	3301      	adds	r3, #1
	size_t val = 0;
 80005fa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80005fc:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 8000600:	4619      	mov	r1, r3
 8000602:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000606:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 800060a:	2e09      	cmp	r6, #9
 800060c:	f240 8095 	bls.w	800073a <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 8000610:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 8000614:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 8000616:	f3c1 0040 	ubfx	r0, r1, #1, #1
 800061a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 800061e:	460a      	mov	r2, r1
 8000620:	f360 0241 	bfi	r2, r0, #1, #1
 8000624:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000628:	e05c      	b.n	80006e4 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 800062a:	1cba      	adds	r2, r7, #2
 800062c:	9203      	str	r2, [sp, #12]
 800062e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 8000632:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000636:	07da      	lsls	r2, r3, #31
 8000638:	f140 812e 	bpl.w	8000898 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 800063c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000640:	f1b8 0f00 	cmp.w	r8, #0
 8000644:	da07      	bge.n	8000656 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 8000646:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800064a:	f042 0204 	orr.w	r2, r2, #4
 800064e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
 8000652:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 8000656:	075e      	lsls	r6, r3, #29
 8000658:	f140 8127 	bpl.w	80008aa <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 800065c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 8000660:	f1ba 0f00 	cmp.w	sl, #0
 8000664:	f280 8126 	bge.w	80008b4 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 8000668:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800066c:	f36f 0341 	bfc	r3, #1, #1
 8000670:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 8000674:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8000678:	e11c      	b.n	80008b4 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 800067a:	2a2d      	cmp	r2, #45	; 0x2d
 800067c:	d00d      	beq.n	800069a <z_cbvprintf_impl+0x1aa>
 800067e:	2a30      	cmp	r2, #48	; 0x30
 8000680:	f47f af69 	bne.w	8000556 <z_cbvprintf_impl+0x66>
 8000684:	2301      	movs	r3, #1
	} while (loop);
 8000686:	e758      	b.n	800053a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	e755      	b.n	800053a <z_cbvprintf_impl+0x4a>
 800068e:	f04f 0e01 	mov.w	lr, #1
 8000692:	e752      	b.n	800053a <z_cbvprintf_impl+0x4a>
 8000694:	f04f 0801 	mov.w	r8, #1
 8000698:	e74f      	b.n	800053a <z_cbvprintf_impl+0x4a>
 800069a:	2601      	movs	r6, #1
 800069c:	e74d      	b.n	800053a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 800069e:	fb0e 6202 	mla	r2, lr, r2, r6
 80006a2:	3a30      	subs	r2, #48	; 0x30
 80006a4:	4603      	mov	r3, r0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f810 6b01 	ldrb.w	r6, [r0], #1
 80006ac:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80006b0:	f1bc 0f09 	cmp.w	ip, #9
 80006b4:	d9f3      	bls.n	800069e <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d08f      	beq.n	80005da <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 80006ba:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 80006be:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 80006c0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80006c2:	f362 0141 	bfi	r1, r2, #1, #1
 80006c6:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 80006ca:	e786      	b.n	80005da <z_cbvprintf_impl+0xea>
 80006cc:	460b      	mov	r3, r1
	size_t val = 0;
 80006ce:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 80006d0:	f04f 0e0a 	mov.w	lr, #10
 80006d4:	e7e7      	b.n	80006a6 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 80006d6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80006da:	f042 0204 	orr.w	r2, r2, #4
 80006de:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 80006e2:	3302      	adds	r3, #2
	switch (*sp) {
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	2a6c      	cmp	r2, #108	; 0x6c
 80006e8:	d047      	beq.n	800077a <z_cbvprintf_impl+0x28a>
 80006ea:	d82b      	bhi.n	8000744 <z_cbvprintf_impl+0x254>
 80006ec:	2a68      	cmp	r2, #104	; 0x68
 80006ee:	d031      	beq.n	8000754 <z_cbvprintf_impl+0x264>
 80006f0:	2a6a      	cmp	r2, #106	; 0x6a
 80006f2:	d04b      	beq.n	800078c <z_cbvprintf_impl+0x29c>
 80006f4:	2a4c      	cmp	r2, #76	; 0x4c
 80006f6:	d051      	beq.n	800079c <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 80006f8:	461a      	mov	r2, r3
 80006fa:	f812 3b01 	ldrb.w	r3, [r2], #1
 80006fe:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
 8000700:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000702:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
 8000706:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
 800070a:	f200 80be 	bhi.w	800088a <z_cbvprintf_impl+0x39a>
 800070e:	2b6d      	cmp	r3, #109	; 0x6d
 8000710:	d851      	bhi.n	80007b6 <z_cbvprintf_impl+0x2c6>
 8000712:	2b69      	cmp	r3, #105	; 0x69
 8000714:	f200 80b9 	bhi.w	800088a <z_cbvprintf_impl+0x39a>
 8000718:	2b57      	cmp	r3, #87	; 0x57
 800071a:	d867      	bhi.n	80007ec <z_cbvprintf_impl+0x2fc>
 800071c:	2b41      	cmp	r3, #65	; 0x41
 800071e:	d003      	beq.n	8000728 <z_cbvprintf_impl+0x238>
 8000720:	3b45      	subs	r3, #69	; 0x45
 8000722:	2b02      	cmp	r3, #2
 8000724:	f200 80b1 	bhi.w	800088a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 8000728:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800072c:	2204      	movs	r2, #4
 800072e:	f362 0302 	bfi	r3, r2, #0, #3
 8000732:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 8000736:	2301      	movs	r3, #1
			break;
 8000738:	e073      	b.n	8000822 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 800073a:	fb0c 0202 	mla	r2, ip, r2, r0
 800073e:	3a30      	subs	r2, #48	; 0x30
 8000740:	460b      	mov	r3, r1
 8000742:	e75d      	b.n	8000600 <z_cbvprintf_impl+0x110>
	switch (*sp) {
 8000744:	2a74      	cmp	r2, #116	; 0x74
 8000746:	d025      	beq.n	8000794 <z_cbvprintf_impl+0x2a4>
 8000748:	2a7a      	cmp	r2, #122	; 0x7a
 800074a:	d1d5      	bne.n	80006f8 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 800074c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000750:	2106      	movs	r1, #6
 8000752:	e00c      	b.n	800076e <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 8000754:	785a      	ldrb	r2, [r3, #1]
 8000756:	2a68      	cmp	r2, #104	; 0x68
 8000758:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800075c:	d106      	bne.n	800076c <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 800075e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000760:	f361 02c6 	bfi	r2, r1, #3, #4
 8000764:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 8000768:	3302      	adds	r3, #2
 800076a:	e7c5      	b.n	80006f8 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 800076c:	2102      	movs	r1, #2
 800076e:	f361 02c6 	bfi	r2, r1, #3, #4
 8000772:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 8000776:	3301      	adds	r3, #1
 8000778:	e7be      	b.n	80006f8 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 800077a:	785a      	ldrb	r2, [r3, #1]
 800077c:	2a6c      	cmp	r2, #108	; 0x6c
 800077e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000782:	d101      	bne.n	8000788 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 8000784:	2104      	movs	r1, #4
 8000786:	e7eb      	b.n	8000760 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 8000788:	2103      	movs	r1, #3
 800078a:	e7f0      	b.n	800076e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 800078c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000790:	2105      	movs	r1, #5
 8000792:	e7ec      	b.n	800076e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 8000794:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8000798:	2107      	movs	r1, #7
 800079a:	e7e8      	b.n	800076e <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 800079c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80007a0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80007a4:	f022 0202 	bic.w	r2, r2, #2
 80007a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007ac:	f042 0202 	orr.w	r2, r2, #2
 80007b0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 80007b4:	e7df      	b.n	8000776 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 80007b6:	3b6e      	subs	r3, #110	; 0x6e
 80007b8:	b2d9      	uxtb	r1, r3
 80007ba:	2301      	movs	r3, #1
 80007bc:	408b      	lsls	r3, r1
 80007be:	f240 4182 	movw	r1, #1154	; 0x482
 80007c2:	420b      	tst	r3, r1
 80007c4:	d137      	bne.n	8000836 <z_cbvprintf_impl+0x346>
 80007c6:	f013 0f24 	tst.w	r3, #36	; 0x24
 80007ca:	d151      	bne.n	8000870 <z_cbvprintf_impl+0x380>
 80007cc:	07d8      	lsls	r0, r3, #31
 80007ce:	d55c      	bpl.n	800088a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 80007d0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80007d4:	2103      	movs	r1, #3
 80007d6:	f361 0302 	bfi	r3, r1, #0, #3
 80007da:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 80007de:	f002 0378 	and.w	r3, r2, #120	; 0x78
 80007e2:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 80007e6:	424b      	negs	r3, r1
 80007e8:	414b      	adcs	r3, r1
 80007ea:	e01a      	b.n	8000822 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
 80007ec:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 80007f0:	b2c9      	uxtb	r1, r1
 80007f2:	2001      	movs	r0, #1
 80007f4:	fa00 f101 	lsl.w	r1, r0, r1
 80007f8:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 80007fc:	d194      	bne.n	8000728 <z_cbvprintf_impl+0x238>
 80007fe:	f640 0601 	movw	r6, #2049	; 0x801
 8000802:	4231      	tst	r1, r6
 8000804:	d11d      	bne.n	8000842 <z_cbvprintf_impl+0x352>
 8000806:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 800080a:	d03e      	beq.n	800088a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 800080c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000810:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000814:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000818:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 800081a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 800081e:	d034      	beq.n	800088a <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 8000820:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 8000822:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000826:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800082a:	430b      	orrs	r3, r1
 800082c:	f363 0241 	bfi	r2, r3, #1, #1
 8000830:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 8000834:	e6fd      	b.n	8000632 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 8000836:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800083a:	2102      	movs	r1, #2
 800083c:	f361 0302 	bfi	r3, r1, #0, #3
 8000840:	e7e8      	b.n	8000814 <z_cbvprintf_impl+0x324>
 8000842:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 8000846:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000848:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 800084c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000850:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 8000852:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 8000856:	bf02      	ittt	eq
 8000858:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 800085c:	f041 0101 	orreq.w	r1, r1, #1
 8000860:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 8000864:	2b63      	cmp	r3, #99	; 0x63
 8000866:	d1db      	bne.n	8000820 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000868:	1e13      	subs	r3, r2, #0
 800086a:	bf18      	it	ne
 800086c:	2301      	movne	r3, #1
 800086e:	e7d8      	b.n	8000822 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 8000870:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000874:	2103      	movs	r1, #3
 8000876:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
 800087a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 800087e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 8000882:	bf14      	ite	ne
 8000884:	2301      	movne	r3, #1
 8000886:	2300      	moveq	r3, #0
 8000888:	e7cb      	b.n	8000822 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 800088a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 8000896:	e7c3      	b.n	8000820 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 8000898:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 800089c:	2a00      	cmp	r2, #0
			width = conv->width_value;
 800089e:	bfb4      	ite	lt
 80008a0:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
 80008a4:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 80008a8:	e6d5      	b.n	8000656 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 80008aa:	0798      	lsls	r0, r3, #30
 80008ac:	f57f aee2 	bpl.w	8000674 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 80008b0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
 80008b4:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
 80008b8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 80008ba:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 80008be:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
 80008c2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 80008c6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 80008c8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 80008cc:	d133      	bne.n	8000936 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 80008ce:	1ecb      	subs	r3, r1, #3
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d804      	bhi.n	80008de <z_cbvprintf_impl+0x3ee>
 80008d4:	e8df f003 	tbb	[pc, r3]
 80008d8:	21464621 	.word	0x21464621
 80008dc:	21          	.byte	0x21
 80008dd:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 80008de:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 80008e0:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 80008e2:	ea4f 72e3 	mov.w	r2, r3, asr #31
 80008e6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 80008ea:	d11c      	bne.n	8000926 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 80008ec:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 80008f0:	17da      	asrs	r2, r3, #31
 80008f2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 80008f6:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 80008f8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80008fc:	f013 0603 	ands.w	r6, r3, #3
 8000900:	d050      	beq.n	80009a4 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 8000902:	9b03      	ldr	r3, [sp, #12]
 8000904:	463a      	mov	r2, r7
 8000906:	4659      	mov	r1, fp
 8000908:	4648      	mov	r0, r9
 800090a:	f004 fea9 	bl	8005660 <outs>
 800090e:	2800      	cmp	r0, #0
 8000910:	f2c0 8153 	blt.w	8000bba <z_cbvprintf_impl+0x6ca>
 8000914:	4405      	add	r5, r0
			continue;
 8000916:	9f03      	ldr	r7, [sp, #12]
 8000918:	e5f2      	b.n	8000500 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 800091a:	f854 3b04 	ldr.w	r3, [r4], #4
 800091e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 8000920:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8000924:	e7e8      	b.n	80008f8 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 8000926:	2902      	cmp	r1, #2
 8000928:	d1e5      	bne.n	80008f6 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 800092a:	b21a      	sxth	r2, r3
 800092c:	f343 33c0 	sbfx	r3, r3, #15, #1
 8000930:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000934:	e7df      	b.n	80008f6 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000936:	2b02      	cmp	r3, #2
 8000938:	d124      	bne.n	8000984 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 800093a:	1ecb      	subs	r3, r1, #3
 800093c:	2b04      	cmp	r3, #4
 800093e:	d804      	bhi.n	800094a <z_cbvprintf_impl+0x45a>
 8000940:	e8df f003 	tbb	[pc, r3]
 8000944:	18101018 	.word	0x18101018
 8000948:	18          	.byte	0x18
 8000949:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 800094a:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
 800094c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000950:	f04f 0200 	mov.w	r2, #0
 8000954:	d014      	beq.n	8000980 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 8000956:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 8000958:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 800095c:	d1cc      	bne.n	80008f8 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 800095e:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 8000960:	930e      	str	r3, [sp, #56]	; 0x38
 8000962:	e7c9      	b.n	80008f8 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 8000964:	3407      	adds	r4, #7
 8000966:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 800096a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 800096e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 8000972:	e7c1      	b.n	80008f8 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 8000974:	f854 3b04 	ldr.w	r3, [r4], #4
 8000978:	930e      	str	r3, [sp, #56]	; 0x38
 800097a:	2300      	movs	r3, #0
 800097c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 800097e:	e7bb      	b.n	80008f8 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 8000980:	b2db      	uxtb	r3, r3
 8000982:	e7cd      	b.n	8000920 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000984:	2b04      	cmp	r3, #4
 8000986:	d108      	bne.n	800099a <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 8000988:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 800098a:	f024 0407 	bic.w	r4, r4, #7
 800098e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000992:	3408      	adds	r4, #8
 8000994:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000998:	e7ae      	b.n	80008f8 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 800099a:	2b03      	cmp	r3, #3
 800099c:	d1ac      	bne.n	80008f8 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 800099e:	f854 3b04 	ldr.w	r3, [r4], #4
 80009a2:	e7dd      	b.n	8000960 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 80009a4:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 80009a8:	2878      	cmp	r0, #120	; 0x78
 80009aa:	d8b4      	bhi.n	8000916 <z_cbvprintf_impl+0x426>
 80009ac:	2862      	cmp	r0, #98	; 0x62
 80009ae:	d81c      	bhi.n	80009ea <z_cbvprintf_impl+0x4fa>
 80009b0:	2825      	cmp	r0, #37	; 0x25
 80009b2:	f43f adad 	beq.w	8000510 <z_cbvprintf_impl+0x20>
 80009b6:	2858      	cmp	r0, #88	; 0x58
 80009b8:	d1ad      	bne.n	8000916 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 80009ba:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80009c4:	ab08      	add	r3, sp, #32
 80009c6:	aa10      	add	r2, sp, #64	; 0x40
 80009c8:	f004 fe04 	bl	80055d4 <encode_uint>
			if (precision >= 0) {
 80009cc:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 80009d0:	4607      	mov	r7, r0
			if (precision >= 0) {
 80009d2:	f280 809a 	bge.w	8000b0a <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
 80009d6:	2f00      	cmp	r7, #0
 80009d8:	d09d      	beq.n	8000916 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 80009da:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80009de:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 80009e0:	2e00      	cmp	r6, #0
 80009e2:	f000 80c1 	beq.w	8000b68 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
 80009e6:	3001      	adds	r0, #1
 80009e8:	e0be      	b.n	8000b68 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
 80009ea:	3863      	subs	r0, #99	; 0x63
 80009ec:	2815      	cmp	r0, #21
 80009ee:	d892      	bhi.n	8000916 <z_cbvprintf_impl+0x426>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <z_cbvprintf_impl+0x508>)
 80009f2:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000acd 	.word	0x08000acd
 80009fc:	08000adf 	.word	0x08000adf
 8000a00:	08000917 	.word	0x08000917
 8000a04:	08000917 	.word	0x08000917
 8000a08:	08000917 	.word	0x08000917
 8000a0c:	08000917 	.word	0x08000917
 8000a10:	08000adf 	.word	0x08000adf
 8000a14:	08000917 	.word	0x08000917
 8000a18:	08000917 	.word	0x08000917
 8000a1c:	08000917 	.word	0x08000917
 8000a20:	08000917 	.word	0x08000917
 8000a24:	08000b6d 	.word	0x08000b6d
 8000a28:	08000b05 	.word	0x08000b05
 8000a2c:	08000b2b 	.word	0x08000b2b
 8000a30:	08000917 	.word	0x08000917
 8000a34:	08000917 	.word	0x08000917
 8000a38:	08000a51 	.word	0x08000a51
 8000a3c:	08000917 	.word	0x08000917
 8000a40:	08000b05 	.word	0x08000b05
 8000a44:	08000917 	.word	0x08000917
 8000a48:	08000917 	.word	0x08000917
 8000a4c:	08000b05 	.word	0x08000b05
			if (precision >= 0) {
 8000a50:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 8000a54:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 8000a56:	db35      	blt.n	8000ac4 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 8000a58:	4651      	mov	r1, sl
 8000a5a:	4638      	mov	r0, r7
 8000a5c:	f005 f846 	bl	8005aec <strnlen>
			bpe = bps + len;
 8000a60:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 8000a64:	2f00      	cmp	r7, #0
 8000a66:	f43f af56 	beq.w	8000916 <z_cbvprintf_impl+0x426>
		char sign = 0;
 8000a6a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 8000a6c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000a70:	f013 0210 	ands.w	r2, r3, #16
 8000a74:	9205      	str	r2, [sp, #20]
 8000a76:	f000 8093 	beq.w	8000ba0 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
 8000a7a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 8000a7c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 8000a7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 8000a80:	bf48      	it	mi
 8000a82:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 8000a84:	9204      	str	r2, [sp, #16]
 8000a86:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 8000a88:	bf48      	it	mi
 8000a8a:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8000a8c:	f1b8 0f00 	cmp.w	r8, #0
 8000a90:	f340 80a0 	ble.w	8000bd4 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
 8000a94:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 8000a98:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 8000a9c:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000aa0:	0750      	lsls	r0, r2, #29
 8000aa2:	9306      	str	r3, [sp, #24]
 8000aa4:	f100 8096 	bmi.w	8000bd4 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
 8000aa8:	0651      	lsls	r1, r2, #25
 8000aaa:	f140 8089 	bpl.w	8000bc0 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
 8000aae:	b13e      	cbz	r6, 8000ac0 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 8000ab0:	4659      	mov	r1, fp
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	47c8      	blx	r9
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	db7f      	blt.n	8000bba <z_cbvprintf_impl+0x6ca>
 8000aba:	9b06      	ldr	r3, [sp, #24]
 8000abc:	3501      	adds	r5, #1
 8000abe:	461e      	mov	r6, r3
					pad = '0';
 8000ac0:	2230      	movs	r2, #48	; 0x30
 8000ac2:	e07e      	b.n	8000bc2 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
 8000ac4:	4638      	mov	r0, r7
 8000ac6:	f005 f80a 	bl	8005ade <strlen>
 8000aca:	e7c9      	b.n	8000a60 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8000acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000ace:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
 8000ad2:	2600      	movs	r6, #0
			bps = buf;
 8000ad4:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 8000ad6:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
 8000ada:	2001      	movs	r0, #1
 8000adc:	e7c6      	b.n	8000a6c <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 8000ade:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 8000ae0:	bf5c      	itt	pl
 8000ae2:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 8000ae6:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
 8000ae8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
 8000aec:	bf48      	it	mi
 8000aee:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f6bf af62 	bge.w	80009ba <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 8000af6:	4252      	negs	r2, r2
 8000af8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
 8000b00:	262d      	movs	r6, #45	; 0x2d
 8000b02:	e75a      	b.n	80009ba <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 8000b04:	2600      	movs	r6, #0
 8000b06:	e758      	b.n	80009ba <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 8000b08:	2600      	movs	r6, #0
				conv->flag_zero = false;
 8000b0a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 8000b0e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b12:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8000b14:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000b18:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 8000b1a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 8000b1e:	f67f af5a 	bls.w	80009d6 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 8000b22:	ebaa 0303 	sub.w	r3, sl, r3
 8000b26:	9311      	str	r3, [sp, #68]	; 0x44
 8000b28:	e755      	b.n	80009d6 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 8000b2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000b2c:	b390      	cbz	r0, 8000b94 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000b2e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	aa10      	add	r2, sp, #64	; 0x40
 8000b36:	ab08      	add	r3, sp, #32
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f004 fd4b 	bl	80055d4 <encode_uint>
				conv->altform_0c = true;
 8000b3e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8000b42:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000b46:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
 8000b4e:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000b52:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8000b54:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 8000b58:	dad6      	bge.n	8000b08 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	f43f aedb 	beq.w	8000916 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 8000b60:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8000b64:	1a18      	subs	r0, r3, r0
		char sign = 0;
 8000b66:	2600      	movs	r6, #0
 8000b68:	469a      	mov	sl, r3
 8000b6a:	e77f      	b.n	8000a6c <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 8000b6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 8000b6e:	2907      	cmp	r1, #7
 8000b70:	f63f aed1 	bhi.w	8000916 <z_cbvprintf_impl+0x426>
 8000b74:	e8df f001 	tbb	[pc, r1]
 8000b78:	0c06040c 	.word	0x0c06040c
 8000b7c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
 8000b80:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 8000b82:	e6c8      	b.n	8000916 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 8000b84:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 8000b86:	e6c6      	b.n	8000916 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 8000b88:	17ea      	asrs	r2, r5, #31
 8000b8a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 8000b8e:	e6c2      	b.n	8000916 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000b90:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 8000b92:	e6c0      	b.n	8000916 <z_cbvprintf_impl+0x426>
 8000b94:	4f2e      	ldr	r7, [pc, #184]	; (8000c50 <z_cbvprintf_impl+0x760>)
		char sign = 0;
 8000b96:	4606      	mov	r6, r0
			bpe = bps + 5;
 8000b98:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 8000b9c:	2005      	movs	r0, #5
 8000b9e:	e765      	b.n	8000a6c <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 8000ba0:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 8000ba2:	bf48      	it	mi
 8000ba4:	3001      	addmi	r0, #1
 8000ba6:	e769      	b.n	8000a7c <z_cbvprintf_impl+0x58c>
 8000ba8:	9307      	str	r3, [sp, #28]
					OUTC(pad);
 8000baa:	4610      	mov	r0, r2
 8000bac:	9206      	str	r2, [sp, #24]
 8000bae:	4659      	mov	r1, fp
 8000bb0:	47c8      	blx	r9
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000bb8:	da04      	bge.n	8000bc4 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
 8000bba:	b015      	add	sp, #84	; 0x54
 8000bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 8000bc0:	2220      	movs	r2, #32
					pad = '0';
 8000bc2:	4643      	mov	r3, r8
				while (width-- > 0) {
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000bcc:	dcec      	bgt.n	8000ba8 <z_cbvprintf_impl+0x6b8>
 8000bce:	4445      	add	r5, r8
 8000bd0:	1a6d      	subs	r5, r5, r1
 8000bd2:	4698      	mov	r8, r3
		if (sign != 0) {
 8000bd4:	b12e      	cbz	r6, 8000be2 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
 8000bd6:	4659      	mov	r1, fp
 8000bd8:	4630      	mov	r0, r6
 8000bda:	47c8      	blx	r9
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	dbec      	blt.n	8000bba <z_cbvprintf_impl+0x6ca>
 8000be0:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000be2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8000be6:	06da      	lsls	r2, r3, #27
 8000be8:	d401      	bmi.n	8000bee <z_cbvprintf_impl+0x6fe>
 8000bea:	071b      	lsls	r3, r3, #28
 8000bec:	d505      	bpl.n	8000bfa <z_cbvprintf_impl+0x70a>
				OUTC('0');
 8000bee:	4659      	mov	r1, fp
 8000bf0:	2030      	movs	r0, #48	; 0x30
 8000bf2:	47c8      	blx	r9
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	dbe0      	blt.n	8000bba <z_cbvprintf_impl+0x6ca>
 8000bf8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000bfa:	9b05      	ldr	r3, [sp, #20]
 8000bfc:	b133      	cbz	r3, 8000c0c <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
 8000bfe:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 8000c02:	4659      	mov	r1, fp
 8000c04:	47c8      	blx	r9
 8000c06:	2800      	cmp	r0, #0
 8000c08:	dbd7      	blt.n	8000bba <z_cbvprintf_impl+0x6ca>
 8000c0a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000c0c:	9e04      	ldr	r6, [sp, #16]
 8000c0e:	442e      	add	r6, r5
 8000c10:	e005      	b.n	8000c1e <z_cbvprintf_impl+0x72e>
				OUTC('0');
 8000c12:	4659      	mov	r1, fp
 8000c14:	2030      	movs	r0, #48	; 0x30
 8000c16:	47c8      	blx	r9
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	dbce      	blt.n	8000bba <z_cbvprintf_impl+0x6ca>
 8000c1c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000c1e:	1b73      	subs	r3, r6, r5
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dcf6      	bgt.n	8000c12 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
 8000c24:	4653      	mov	r3, sl
 8000c26:	463a      	mov	r2, r7
 8000c28:	4659      	mov	r1, fp
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	f004 fd18 	bl	8005660 <outs>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	dbc2      	blt.n	8000bba <z_cbvprintf_impl+0x6ca>
 8000c34:	4405      	add	r5, r0
		while (width > 0) {
 8000c36:	44a8      	add	r8, r5
 8000c38:	eba8 0305 	sub.w	r3, r8, r5
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f77f ae6a 	ble.w	8000916 <z_cbvprintf_impl+0x426>
			OUTC(' ');
 8000c42:	4659      	mov	r1, fp
 8000c44:	2020      	movs	r0, #32
 8000c46:	47c8      	blx	r9
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	dbb6      	blt.n	8000bba <z_cbvprintf_impl+0x6ca>
 8000c4c:	3501      	adds	r5, #1
			--width;
 8000c4e:	e7f3      	b.n	8000c38 <z_cbvprintf_impl+0x748>
 8000c50:	08007a40 	.word	0x08007a40

08000c54 <st_stm32f4_init>:
  * @rmtoll FLASH_ACR    ICEN          LL_FLASH_EnableInstCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableInstCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ICEN);
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <st_stm32f4_init+0x34>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c5c:	601a      	str	r2, [r3, #0]
  * @rmtoll FLASH_ACR    DCEN          LL_FLASH_EnableDataCache
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_EnableDataCache(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_DCEN);
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c64:	601a      	str	r2, [r3, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000c66:	f04f 0210 	mov.w	r2, #16
 8000c6a:	f3ef 8311 	mrs	r3, BASEPRI
 8000c6e:	f382 8812 	msr	BASEPRI_MAX, r2
 8000c72:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000c76:	f383 8811 	msr	BASEPRI, r3
 8000c7a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000c7e:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <st_stm32f4_init+0x38>)
 8000c80:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <st_stm32f4_init+0x3c>)
 8000c82:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000c84:	2000      	movs	r0, #0
 8000c86:	4770      	bx	lr
 8000c88:	40023c00 	.word	0x40023c00
 8000c8c:	2000016c 	.word	0x2000016c
 8000c90:	00f42400 	.word	0x00f42400

08000c94 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
 8000c94:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000c98:	4e0c      	ldr	r6, [pc, #48]	; (8000ccc <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 8000c9a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <class_handler+0x3c>)
 8000c9e:	42b3      	cmp	r3, r6
 8000ca0:	d303      	bcc.n	8000caa <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
 8000ca2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8000ca6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ca8:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
 8000caa:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 8000cac:	42bd      	cmp	r5, r7
 8000cae:	d309      	bcc.n	8000cc4 <class_handler+0x30>
		if (iface->class_handler &&
 8000cb0:	691c      	ldr	r4, [r3, #16]
 8000cb2:	b13c      	cbz	r4, 8000cc4 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
 8000cb4:	f895 c002 	ldrb.w	ip, [r5, #2]
 8000cb8:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
 8000cba:	45ac      	cmp	ip, r5
 8000cbc:	d102      	bne.n	8000cc4 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
 8000cbe:	4623      	mov	r3, r4
}
 8000cc0:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
 8000cc2:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000cc4:	3324      	adds	r3, #36	; 0x24
 8000cc6:	e7ea      	b.n	8000c9e <class_handler+0xa>
 8000cc8:	200004d0 	.word	0x200004d0
 8000ccc:	20000288 	.word	0x20000288
 8000cd0:	20000264 	.word	0x20000264

08000cd4 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000cd8:	4c13      	ldr	r4, [pc, #76]	; (8000d28 <custom_handler+0x54>)
 8000cda:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8000d2c <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 8000cde:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8000d30 <custom_handler+0x5c>
{
 8000ce2:	4605      	mov	r5, r0
 8000ce4:	460e      	mov	r6, r1
 8000ce6:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000ce8:	4544      	cmp	r4, r8
 8000cea:	d303      	bcc.n	8000cf4 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
 8000cec:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
 8000cf4:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
 8000cf6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d312      	bcc.n	8000d24 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
 8000cfe:	69a3      	ldr	r3, [r4, #24]
 8000d00:	b183      	cbz	r3, 8000d24 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
 8000d02:	7890      	ldrb	r0, [r2, #2]
 8000d04:	7929      	ldrb	r1, [r5, #4]
 8000d06:	4288      	cmp	r0, r1
 8000d08:	d105      	bne.n	8000d16 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
 8000d0a:	463a      	mov	r2, r7
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	4628      	mov	r0, r5
}
 8000d10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
 8000d14:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
 8000d16:	7952      	ldrb	r2, [r2, #5]
 8000d18:	2a01      	cmp	r2, #1
 8000d1a:	d103      	bne.n	8000d24 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
 8000d1c:	463a      	mov	r2, r7
 8000d1e:	4631      	mov	r1, r6
 8000d20:	4628      	mov	r0, r5
 8000d22:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000d24:	3424      	adds	r4, #36	; 0x24
 8000d26:	e7df      	b.n	8000ce8 <custom_handler+0x14>
 8000d28:	20000264 	.word	0x20000264
 8000d2c:	20000288 	.word	0x20000288
 8000d30:	200004d0 	.word	0x200004d0

08000d34 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
 8000d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000d38:	4c0b      	ldr	r4, [pc, #44]	; (8000d68 <vendor_handler+0x34>)
 8000d3a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8000d6c <vendor_handler+0x38>
{
 8000d3e:	4605      	mov	r5, r0
 8000d40:	460e      	mov	r6, r1
 8000d42:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000d44:	4544      	cmp	r4, r8
 8000d46:	d302      	bcc.n	8000d4e <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
 8000d48:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8000d4c:	e009      	b.n	8000d62 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
 8000d4e:	6963      	ldr	r3, [r4, #20]
 8000d50:	b90b      	cbnz	r3, 8000d56 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000d52:	3424      	adds	r4, #36	; 0x24
 8000d54:	e7f6      	b.n	8000d44 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
 8000d56:	463a      	mov	r2, r7
 8000d58:	4631      	mov	r1, r6
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	4798      	blx	r3
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d1f7      	bne.n	8000d52 <vendor_handler+0x1e>
}
 8000d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d66:	bf00      	nop
 8000d68:	20000264 	.word	0x20000264
 8000d6c:	20000288 	.word	0x20000288

08000d70 <set_endpoint>:
{
 8000d70:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
 8000d72:	7883      	ldrb	r3, [r0, #2]
 8000d74:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
 8000d78:	7903      	ldrb	r3, [r0, #4]
 8000d7a:	7942      	ldrb	r2, [r0, #5]
 8000d7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d80:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
 8000d84:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
 8000d86:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
 8000d90:	f004 ff6b 	bl	8005c6a <usb_dc_ep_configure>
	if (ret == -EALREADY) {
 8000d94:	f110 0f78 	cmn.w	r0, #120	; 0x78
 8000d98:	d004      	beq.n	8000da4 <set_endpoint+0x34>
	} else if (ret) {
 8000d9a:	b118      	cbz	r0, 8000da4 <set_endpoint+0x34>
		return false;
 8000d9c:	2000      	movs	r0, #0
}
 8000d9e:	b003      	add	sp, #12
 8000da0:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
 8000da4:	f89d 0000 	ldrb.w	r0, [sp]
 8000da8:	f001 fcc6 	bl	8002738 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
 8000dac:	f110 0f78 	cmn.w	r0, #120	; 0x78
 8000db0:	d001      	beq.n	8000db6 <set_endpoint+0x46>
	} else if (ret) {
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d1f2      	bne.n	8000d9c <set_endpoint+0x2c>
	usb_dev.configured = true;
 8000db6:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <set_endpoint+0x50>)
 8000db8:	2001      	movs	r0, #1
 8000dba:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
 8000dbe:	e7ee      	b.n	8000d9e <set_endpoint+0x2e>
 8000dc0:	200004d0 	.word	0x200004d0

08000dc4 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <usb_reset_alt_setting+0xc>)
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f004 beb7 	b.w	8005b3c <memset>
 8000dce:	bf00      	nop
 8000dd0:	2000058b 	.word	0x2000058b

08000dd4 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
 8000dd4:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <is_ep_valid.part.0+0x30>)
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <is_ep_valid.part.0+0x34>)
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d301      	bcc.n	8000de2 <is_ep_valid.part.0+0xe>
	return false;
 8000dde:	2000      	movs	r0, #0
}
 8000de0:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
 8000de2:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
 8000de4:	7f1e      	ldrb	r6, [r3, #28]
 8000de6:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
 8000de8:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
 8000dea:	b2d5      	uxtb	r5, r2
 8000dec:	42ae      	cmp	r6, r5
 8000dee:	d801      	bhi.n	8000df4 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000df0:	3324      	adds	r3, #36	; 0x24
 8000df2:	e7f2      	b.n	8000dda <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
 8000df4:	3201      	adds	r2, #1
 8000df6:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
 8000dfa:	4285      	cmp	r5, r0
 8000dfc:	d1f5      	bne.n	8000dea <is_ep_valid.part.0+0x16>
		return true;
 8000dfe:	2001      	movs	r0, #1
 8000e00:	e7ee      	b.n	8000de0 <is_ep_valid.part.0+0xc>
 8000e02:	bf00      	nop
 8000e04:	20000264 	.word	0x20000264
 8000e08:	20000288 	.word	0x20000288

08000e0c <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
 8000e0c:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
 8000e10:	7803      	ldrb	r3, [r0, #0]
 8000e12:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
 8000e16:	330a      	adds	r3, #10
 8000e18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
 8000e1c:	b13b      	cbz	r3, 8000e2e <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
 8000e1e:	f100 0208 	add.w	r2, r0, #8
 8000e22:	f100 0110 	add.w	r1, r0, #16
 8000e26:	4798      	blx	r3
 8000e28:	43c0      	mvns	r0, r0
 8000e2a:	0fc0      	lsrs	r0, r0, #31
}
 8000e2c:	bd08      	pop	{r3, pc}
		return false;
 8000e2e:	4618      	mov	r0, r3
 8000e30:	e7fc      	b.n	8000e2c <usb_handle_request.constprop.0+0x20>
 8000e32:	bf00      	nop
 8000e34:	200004d0 	.word	0x200004d0

08000e38 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
 8000e38:	2804      	cmp	r0, #4
{
 8000e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e3e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8000ecc <forward_status_cb+0x94>
 8000e42:	4604      	mov	r4, r0
 8000e44:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
 8000e46:	d113      	bne.n	8000e70 <forward_status_cb+0x38>
		usb_reset_alt_setting();
 8000e48:	f7ff ffbc 	bl	8000dc4 <usb_reset_alt_setting>
		if (usb_dev.configured) {
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <forward_status_cb+0x98>)
 8000e4e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8000e52:	b1ab      	cbz	r3, 8000e80 <forward_status_cb+0x48>
			usb_cancel_transfers();
 8000e54:	f000 fd6a 	bl	800192c <usb_cancel_transfers>
 8000e58:	4d1e      	ldr	r5, [pc, #120]	; (8000ed4 <forward_status_cb+0x9c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000e5a:	4545      	cmp	r5, r8
 8000e5c:	d226      	bcs.n	8000eac <forward_status_cb+0x74>
		ep_data = cfg_data->endpoint;
 8000e5e:	f8d5 9020 	ldr.w	r9, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
 8000e62:	2700      	movs	r7, #0
 8000e64:	7f2a      	ldrb	r2, [r5, #28]
 8000e66:	b2fb      	uxtb	r3, r7
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d817      	bhi.n	8000e9c <forward_status_cb+0x64>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000e6c:	3524      	adds	r5, #36	; 0x24
 8000e6e:	e7f4      	b.n	8000e5a <forward_status_cb+0x22>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
 8000e70:	2805      	cmp	r0, #5
 8000e72:	d110      	bne.n	8000e96 <forward_status_cb+0x5e>
		if (usb_dev.configured) {
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <forward_status_cb+0x98>)
 8000e76:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8000e7a:	b10b      	cbz	r3, 8000e80 <forward_status_cb+0x48>
			usb_cancel_transfers();
 8000e7c:	f000 fd56 	bl	800192c <usb_cancel_transfers>
 8000e80:	4d14      	ldr	r5, [pc, #80]	; (8000ed4 <forward_status_cb+0x9c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000e82:	4545      	cmp	r5, r8
 8000e84:	d317      	bcc.n	8000eb6 <forward_status_cb+0x7e>
	if (usb_dev.user_status_callback) {
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <forward_status_cb+0x98>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	b1e3      	cbz	r3, 8000ec6 <forward_status_cb+0x8e>
		usb_dev.user_status_callback(status, param);
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	4620      	mov	r0, r4
}
 8000e90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
 8000e94:	4718      	bx	r3
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
 8000e96:	2801      	cmp	r0, #1
 8000e98:	d1f2      	bne.n	8000e80 <forward_status_cb+0x48>
 8000e9a:	e7d7      	b.n	8000e4c <forward_status_cb+0x14>
	return usb_dc_ep_disable(ep_data->ep_addr);
 8000e9c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
			if (ret < 0) {
 8000ea0:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
 8000ea2:	7918      	ldrb	r0, [r3, #4]
 8000ea4:	f001 fc6a 	bl	800277c <usb_dc_ep_disable>
			if (ret < 0) {
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	dadb      	bge.n	8000e64 <forward_status_cb+0x2c>
				usb_dev.configured = false;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <forward_status_cb+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 8000eb4:	e7e4      	b.n	8000e80 <forward_status_cb+0x48>
		if (cfg_data->cb_usb_status) {
 8000eb6:	68eb      	ldr	r3, [r5, #12]
 8000eb8:	b11b      	cbz	r3, 8000ec2 <forward_status_cb+0x8a>
			cfg_data->cb_usb_status(cfg_data, status, param);
 8000eba:	4632      	mov	r2, r6
 8000ebc:	4621      	mov	r1, r4
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8000ec2:	3524      	adds	r5, #36	; 0x24
 8000ec4:	e7dd      	b.n	8000e82 <forward_status_cb+0x4a>
}
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000288 	.word	0x20000288
 8000ed0:	200004d0 	.word	0x200004d0
 8000ed4:	20000264 	.word	0x20000264

08000ed8 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
 8000ed8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
 8000eda:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
 8000edc:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
 8000ede:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
 8000ee0:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
 8000ee4:	d007      	beq.n	8000ef6 <usb_halt_endpoint_req.isra.0+0x1e>
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f7ff ff74 	bl	8000dd4 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
 8000eec:	b178      	cbz	r0, 8000f0e <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
 8000ef0:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
 8000ef4:	b158      	cbz	r0, 8000f0e <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
 8000ef6:	4e0b      	ldr	r6, [pc, #44]	; (8000f24 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
 8000ef8:	4620      	mov	r0, r4
		if (halt) {
 8000efa:	b155      	cbz	r5, 8000f12 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
 8000efc:	f001 fbf0 	bl	80026e0 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
 8000f00:	69f3      	ldr	r3, [r6, #28]
 8000f02:	b11b      	cbz	r3, 8000f0c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
 8000f04:	f10d 0107 	add.w	r1, sp, #7
 8000f08:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
 8000f0a:	4798      	blx	r3
		return true;
 8000f0c:	2001      	movs	r0, #1
}
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
 8000f12:	f001 fbfb 	bl	800270c <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
 8000f16:	69f3      	ldr	r3, [r6, #28]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f7      	beq.n	8000f0c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
 8000f1c:	f10d 0107 	add.w	r1, sp, #7
 8000f20:	2009      	movs	r0, #9
 8000f22:	e7f2      	b.n	8000f0a <usb_halt_endpoint_req.isra.0+0x32>
 8000f24:	200004d0 	.word	0x200004d0

08000f28 <usb_handle_standard_request>:
{
 8000f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
 8000f2c:	4d93      	ldr	r5, [pc, #588]	; (800117c <usb_handle_standard_request+0x254>)
 8000f2e:	69ab      	ldr	r3, [r5, #24]
{
 8000f30:	4604      	mov	r4, r0
 8000f32:	460e      	mov	r6, r1
 8000f34:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
 8000f36:	b9c3      	cbnz	r3, 8000f6a <usb_handle_standard_request+0x42>
	switch (setup->RequestType.recipient) {
 8000f38:	7820      	ldrb	r0, [r4, #0]
 8000f3a:	f000 001f 	and.w	r0, r0, #31
 8000f3e:	2801      	cmp	r0, #1
 8000f40:	d076      	beq.n	8001030 <usb_handle_standard_request+0x108>
 8000f42:	2802      	cmp	r0, #2
 8000f44:	f000 80df 	beq.w	8001106 <usb_handle_standard_request+0x1de>
 8000f48:	bb00      	cbnz	r0, 8000f8c <usb_handle_standard_request+0x64>
	if (usb_reqtype_is_to_host(setup)) {
 8000f4a:	f994 1000 	ldrsb.w	r1, [r4]
	uint8_t *data = *data_buf;
 8000f4e:	683a      	ldr	r2, [r7, #0]
		switch (setup->bRequest) {
 8000f50:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
 8000f52:	2900      	cmp	r1, #0
 8000f54:	da2e      	bge.n	8000fb4 <usb_handle_standard_request+0x8c>
		switch (setup->bRequest) {
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d00c      	beq.n	8000f74 <usb_handle_standard_request+0x4c>
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d025      	beq.n	8000faa <usb_handle_standard_request+0x82>
 8000f5e:	b9ab      	cbnz	r3, 8000f8c <usb_handle_standard_request+0x64>
	data[1] = 0U;
 8000f60:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
 8000f62:	2301      	movs	r3, #1
 8000f64:	7013      	strb	r3, [r2, #0]
		*len = 2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	e106      	b.n	8001178 <usb_handle_standard_request+0x250>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
 8000f6a:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d1e3      	bne.n	8000f38 <usb_handle_standard_request+0x10>
		return 0;
 8000f70:	2000      	movs	r0, #0
 8000f72:	e00d      	b.n	8000f90 <usb_handle_standard_request+0x68>
			return usb_get_descriptor(setup, len, data_buf);
 8000f74:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
 8000f76:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
 8000f78:	1f11      	subs	r1, r2, #4
 8000f7a:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
 8000f7c:	4694      	mov	ip, r2
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
 8000f7e:	d905      	bls.n	8000f8c <usb_handle_standard_request+0x64>
 8000f80:	2a07      	cmp	r2, #7
 8000f82:	d803      	bhi.n	8000f8c <usb_handle_standard_request+0x64>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
 8000f84:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
 8000f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
 8000f88:	781c      	ldrb	r4, [r3, #0]
 8000f8a:	b91c      	cbnz	r4, 8000f94 <usb_handle_standard_request+0x6c>
			rc = -EINVAL;
 8000f8c:	f06f 0015 	mvn.w	r0, #21
}
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
 8000f94:	785d      	ldrb	r5, [r3, #1]
 8000f96:	4565      	cmp	r5, ip
 8000f98:	d103      	bne.n	8000fa2 <usb_handle_standard_request+0x7a>
			if (cur_index == index) {
 8000f9a:	4281      	cmp	r1, r0
 8000f9c:	f000 80e7 	beq.w	800116e <usb_handle_standard_request+0x246>
			cur_index++;
 8000fa0:	3001      	adds	r0, #1
		p += p[DESC_bLength];
 8000fa2:	4423      	add	r3, r4
 8000fa4:	e7f0      	b.n	8000f88 <usb_handle_standard_request+0x60>
			*len = p[DESC_bLength];
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	e0e6      	b.n	8001178 <usb_handle_standard_request+0x250>
			data[0] = usb_dev.configuration;
 8000faa:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
 8000fae:	7013      	strb	r3, [r2, #0]
				*len = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e0e1      	b.n	8001178 <usb_handle_standard_request+0x250>
		switch (setup->bRequest) {
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d011      	beq.n	8000fdc <usb_handle_standard_request+0xb4>
 8000fb8:	2b09      	cmp	r3, #9
 8000fba:	d1e7      	bne.n	8000f8c <usb_handle_standard_request+0x64>
	if (setup->wValue == 0U) {
 8000fbc:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
 8000fbe:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	if (setup->wValue == 0U) {
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d132      	bne.n	800102a <usb_handle_standard_request+0x102>
		usb_reset_alt_setting();
 8000fc4:	f7ff fefe 	bl	8000dc4 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
 8000fc8:	8863      	ldrh	r3, [r4, #2]
 8000fca:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
		if (usb_dev.status_callback) {
 8000fce:	69eb      	ldr	r3, [r5, #28]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0cd      	beq.n	8000f70 <usb_handle_standard_request+0x48>
			usb_dev.status_callback(USB_DC_CONFIGURED,
 8000fd4:	496a      	ldr	r1, [pc, #424]	; (8001180 <usb_handle_standard_request+0x258>)
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	4798      	blx	r3
 8000fda:	e7c9      	b.n	8000f70 <usb_handle_standard_request+0x48>
			return !usb_dc_set_address(setup->wValue);
 8000fdc:	78a0      	ldrb	r0, [r4, #2]
 8000fde:	f001 fb3f 	bl	8002660 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	d0c4      	beq.n	8000f70 <usb_handle_standard_request+0x48>
 8000fe6:	e7d1      	b.n	8000f8c <usb_handle_standard_request+0x64>
		switch (p[DESC_bDescriptorType]) {
 8000fe8:	7873      	ldrb	r3, [r6, #1]
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d010      	beq.n	8001010 <usb_handle_standard_request+0xe8>
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	d011      	beq.n	8001016 <usb_handle_standard_request+0xee>
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d104      	bne.n	8001000 <usb_handle_standard_request+0xd8>
			cur_config = p[CONF_DESC_bConfigurationValue];
 8000ff6:	7977      	ldrb	r7, [r6, #5]
			if (cur_config == setup->wValue) {
 8000ff8:	8863      	ldrh	r3, [r4, #2]
				found = true;
 8000ffa:	42bb      	cmp	r3, r7
 8000ffc:	bf08      	it	eq
 8000ffe:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
 8001000:	7833      	ldrb	r3, [r6, #0]
 8001002:	441e      	add	r6, r3
	while (p[DESC_bLength] != 0U) {
 8001004:	7833      	ldrb	r3, [r6, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1ee      	bne.n	8000fe8 <usb_handle_standard_request+0xc0>
	if (found) {
 800100a:	2800      	cmp	r0, #0
 800100c:	d0be      	beq.n	8000f8c <usb_handle_standard_request+0x64>
 800100e:	e7d9      	b.n	8000fc4 <usb_handle_standard_request+0x9c>
			cur_alt_setting =
 8001010:	f896 8003 	ldrb.w	r8, [r6, #3]
			break;
 8001014:	e7f4      	b.n	8001000 <usb_handle_standard_request+0xd8>
			if ((cur_config != setup->wValue) ||
 8001016:	8863      	ldrh	r3, [r4, #2]
 8001018:	42bb      	cmp	r3, r7
 800101a:	d1f1      	bne.n	8001000 <usb_handle_standard_request+0xd8>
 800101c:	f1b8 0f00 	cmp.w	r8, #0
 8001020:	d1ee      	bne.n	8001000 <usb_handle_standard_request+0xd8>
			found = set_endpoint((struct usb_ep_descriptor *)p);
 8001022:	4630      	mov	r0, r6
 8001024:	f7ff fea4 	bl	8000d70 <set_endpoint>
			break;
 8001028:	e7ea      	b.n	8001000 <usb_handle_standard_request+0xd8>
	uint8_t cur_config = 0xFF;
 800102a:	27ff      	movs	r7, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
 800102c:	46b8      	mov	r8, r7
 800102e:	e7e9      	b.n	8001004 <usb_handle_standard_request+0xdc>
	if (!is_device_configured() ||
 8001030:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
 8001034:	f8d7 c000 	ldr.w	ip, [r7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0a7      	beq.n	8000f8c <usb_handle_standard_request+0x64>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
 800103c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
 800103e:	88a2      	ldrh	r2, [r4, #4]
 8001040:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
 8001044:	463b      	mov	r3, r7
	while (p[DESC_bLength] != 0U) {
 8001046:	7818      	ldrb	r0, [r3, #0]
 8001048:	2800      	cmp	r0, #0
 800104a:	d09f      	beq.n	8000f8c <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
 800104c:	7859      	ldrb	r1, [r3, #1]
 800104e:	2902      	cmp	r1, #2
 8001050:	d104      	bne.n	800105c <usb_handle_standard_request+0x134>
			if (interface < cfg_descr->bNumInterfaces) {
 8001052:	f893 8004 	ldrb.w	r8, [r3, #4]
 8001056:	45f0      	cmp	r8, lr
 8001058:	f200 8094 	bhi.w	8001184 <usb_handle_standard_request+0x25c>
		p += p[DESC_bLength];
 800105c:	4403      	add	r3, r0
 800105e:	e7f2      	b.n	8001046 <usb_handle_standard_request+0x11e>
			data[0] = 0U;
 8001060:	f88c 3000 	strb.w	r3, [ip]
			data[1] = 0U;
 8001064:	f88c 3001 	strb.w	r3, [ip, #1]
			*len = 2;
 8001068:	6031      	str	r1, [r6, #0]
			return true;
 800106a:	e781      	b.n	8000f70 <usb_handle_standard_request+0x48>
		p += p[DESC_bLength];
 800106c:	441f      	add	r7, r3
 800106e:	e095      	b.n	800119c <usb_handle_standard_request+0x274>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
 8001070:	2b0b      	cmp	r3, #11
 8001072:	d18b      	bne.n	8000f8c <usb_handle_standard_request+0x64>
	bool ret = false;
 8001074:	2600      	movs	r6, #0
	uint8_t cur_iface = 0xFF;
 8001076:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
 800107a:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
 800107c:	46b2      	mov	sl, r6
 800107e:	e006      	b.n	800108e <usb_handle_standard_request+0x166>
		switch (p[DESC_bDescriptorType]) {
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b04      	cmp	r3, #4
 8001084:	d00f      	beq.n	80010a6 <usb_handle_standard_request+0x17e>
 8001086:	2b05      	cmp	r3, #5
 8001088:	d021      	beq.n	80010ce <usb_handle_standard_request+0x1a6>
		p += p[DESC_bLength];
 800108a:	783b      	ldrb	r3, [r7, #0]
 800108c:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
 800108e:	783b      	ldrb	r3, [r7, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f5      	bne.n	8001080 <usb_handle_standard_request+0x158>
	if (usb_dev.status_callback) {
 8001094:	69eb      	ldr	r3, [r5, #28]
 8001096:	b113      	cbz	r3, 800109e <usb_handle_standard_request+0x176>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
 8001098:	4651      	mov	r1, sl
 800109a:	2007      	movs	r0, #7
 800109c:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
 800109e:	2e00      	cmp	r6, #0
 80010a0:	f47f af66 	bne.w	8000f70 <usb_handle_standard_request+0x48>
 80010a4:	e772      	b.n	8000f8c <usb_handle_standard_request+0x64>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
 80010a6:	f897 8002 	ldrb.w	r8, [r7, #2]
			if (cur_iface == setup->wIndex &&
 80010aa:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
 80010ac:	f897 9003 	ldrb.w	r9, [r7, #3]
			if (cur_iface == setup->wIndex &&
 80010b0:	4598      	cmp	r8, r3
 80010b2:	d1ea      	bne.n	800108a <usb_handle_standard_request+0x162>
			    cur_alt_setting == setup->wValue) {
 80010b4:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
 80010b6:	4599      	cmp	r9, r3
 80010b8:	d1e7      	bne.n	800108a <usb_handle_standard_request+0x162>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
 80010ba:	f1b8 0f07 	cmp.w	r8, #7
 80010be:	d81f      	bhi.n	8001100 <usb_handle_standard_request+0x1d8>
		usb_dev.alt_setting[iface] = alt_setting;
 80010c0:	eb05 0308 	add.w	r3, r5, r8
		return true;
 80010c4:	46ba      	mov	sl, r7
				ret = usb_set_alt_setting(setup->wIndex,
 80010c6:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
	return true;
 80010ca:	2601      	movs	r6, #1
 80010cc:	e7dd      	b.n	800108a <usb_handle_standard_request+0x162>
			if (cur_iface == setup->wIndex) {
 80010ce:	88a3      	ldrh	r3, [r4, #4]
 80010d0:	4543      	cmp	r3, r8
 80010d2:	d1da      	bne.n	800108a <usb_handle_standard_request+0x162>
	if (cur_alt_setting != alt_setting) {
 80010d4:	78a3      	ldrb	r3, [r4, #2]
 80010d6:	454b      	cmp	r3, r9
 80010d8:	d00d      	beq.n	80010f6 <usb_handle_standard_request+0x1ce>
		ret = reset_endpoint(ep_desc);
 80010da:	78be      	ldrb	r6, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
 80010dc:	4630      	mov	r0, r6
 80010de:	f000 fc07 	bl	80018f0 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
 80010e2:	4630      	mov	r0, r6
 80010e4:	f001 fb4a 	bl	800277c <usb_dc_ep_disable>
	if (ret == -EALREADY) {
 80010e8:	f110 0f78 	cmn.w	r0, #120	; 0x78
 80010ec:	d0ed      	beq.n	80010ca <usb_handle_standard_request+0x1a2>
	} else if (ret) {
 80010ee:	fab0 f680 	clz	r6, r0
 80010f2:	0976      	lsrs	r6, r6, #5
 80010f4:	e7c9      	b.n	800108a <usb_handle_standard_request+0x162>
		ret = set_endpoint(ep_desc);
 80010f6:	4638      	mov	r0, r7
 80010f8:	f7ff fe3a 	bl	8000d70 <set_endpoint>
 80010fc:	4606      	mov	r6, r0
 80010fe:	e7c4      	b.n	800108a <usb_handle_standard_request+0x162>
 8001100:	46ba      	mov	sl, r7
	return false;
 8001102:	2600      	movs	r6, #0
 8001104:	e7c1      	b.n	800108a <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
 8001106:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
 800110a:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
 800110c:	2a00      	cmp	r2, #0
 800110e:	da18      	bge.n	8001142 <usb_handle_standard_request+0x21a>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
 8001110:	2b00      	cmp	r3, #0
 8001112:	f47f af3b 	bne.w	8000f8c <usb_handle_standard_request+0x64>
	uint8_t ep = setup->wIndex;
 8001116:	7924      	ldrb	r4, [r4, #4]
 8001118:	683f      	ldr	r7, [r7, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
 800111a:	0663      	lsls	r3, r4, #25
 800111c:	d00a      	beq.n	8001134 <usb_handle_standard_request+0x20c>
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff fe58 	bl	8000dd4 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
 8001124:	2800      	cmp	r0, #0
 8001126:	f43f af31 	beq.w	8000f8c <usb_handle_standard_request+0x64>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
 800112a:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
 800112e:	2b00      	cmp	r3, #0
 8001130:	f43f af2c 	beq.w	8000f8c <usb_handle_standard_request+0x64>
		usb_dc_ep_is_stalled(ep, &data[0]);
 8001134:	4639      	mov	r1, r7
 8001136:	4620      	mov	r0, r4
 8001138:	f004 fdac 	bl	8005c94 <usb_dc_ep_is_stalled>
		data[1] = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	707b      	strb	r3, [r7, #1]
 8001140:	e711      	b.n	8000f66 <usb_handle_standard_request+0x3e>
		switch (setup->bRequest) {
 8001142:	2b01      	cmp	r3, #1
 8001144:	d008      	beq.n	8001158 <usb_handle_standard_request+0x230>
 8001146:	2b03      	cmp	r3, #3
 8001148:	f47f af20 	bne.w	8000f8c <usb_handle_standard_request+0x64>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
 800114c:	8863      	ldrh	r3, [r4, #2]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f47f af1c 	bne.w	8000f8c <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
 8001154:	2101      	movs	r1, #1
 8001156:	e003      	b.n	8001160 <usb_handle_standard_request+0x238>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
 8001158:	8861      	ldrh	r1, [r4, #2]
 800115a:	2900      	cmp	r1, #0
 800115c:	f47f af16 	bne.w	8000f8c <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
 8001160:	88a0      	ldrh	r0, [r4, #4]
 8001162:	f7ff feb9 	bl	8000ed8 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
 8001166:	2800      	cmp	r0, #0
 8001168:	f47f af02 	bne.w	8000f70 <usb_handle_standard_request+0x48>
 800116c:	e70e      	b.n	8000f8c <usb_handle_standard_request+0x64>
		if (type == USB_DESC_CONFIGURATION) {
 800116e:	2a02      	cmp	r2, #2
		*data = p;
 8001170:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
 8001172:	f47f af18 	bne.w	8000fa6 <usb_handle_standard_request+0x7e>
			*len = (p[CONF_DESC_wTotalLength]) |
 8001176:	885b      	ldrh	r3, [r3, #2]
		*len = 2;
 8001178:	6033      	str	r3, [r6, #0]
		return true;
 800117a:	e6f9      	b.n	8000f70 <usb_handle_standard_request+0x48>
 800117c:	200004d0 	.word	0x200004d0
 8001180:	2000058a 	.word	0x2000058a
	if (usb_reqtype_is_to_host(setup)) {
 8001184:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
 8001188:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
 800118a:	2800      	cmp	r0, #0
 800118c:	f6bf af70 	bge.w	8001070 <usb_handle_standard_request+0x148>
		switch (setup->bRequest) {
 8001190:	2b00      	cmp	r3, #0
 8001192:	f43f af65 	beq.w	8001060 <usb_handle_standard_request+0x138>
 8001196:	2b0a      	cmp	r3, #10
 8001198:	f47f aef8 	bne.w	8000f8c <usb_handle_standard_request+0x64>
	while (p[DESC_bLength] != 0U) {
 800119c:	783b      	ldrb	r3, [r7, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f43f aef4 	beq.w	8000f8c <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
 80011a4:	7879      	ldrb	r1, [r7, #1]
 80011a6:	2904      	cmp	r1, #4
 80011a8:	f47f af60 	bne.w	800106c <usb_handle_standard_request+0x144>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
 80011ac:	78b9      	ldrb	r1, [r7, #2]
			if (cur_iface == setup->wIndex) {
 80011ae:	428a      	cmp	r2, r1
 80011b0:	f47f af5c 	bne.w	800106c <usb_handle_standard_request+0x144>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
 80011b4:	2a07      	cmp	r2, #7
		return usb_dev.alt_setting[iface];
 80011b6:	bf96      	itet	ls
 80011b8:	1952      	addls	r2, r2, r5
	return 0;
 80011ba:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
 80011bc:	f892 30bb 	ldrbls.w	r3, [r2, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
 80011c0:	f88c 3000 	strb.w	r3, [ip]
 80011c4:	e6f4      	b.n	8000fb0 <usb_handle_standard_request+0x88>
 80011c6:	bf00      	nop

080011c8 <usb_data_to_host>:
{
 80011c8:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
 80011ca:	4c13      	ldr	r4, [pc, #76]	; (8001218 <usb_data_to_host+0x50>)
 80011cc:	7d23      	ldrb	r3, [r4, #20]
 80011ce:	b9cb      	cbnz	r3, 8001204 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
 80011d0:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
 80011d2:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
 80011d4:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
 80011d6:	ab01      	add	r3, sp, #4
 80011d8:	2080      	movs	r0, #128	; 0x80
 80011da:	f004 fb0e 	bl	80057fa <usb_write>
		usb_dev.data_buf += chunk;
 80011de:	9a01      	ldr	r2, [sp, #4]
 80011e0:	68a3      	ldr	r3, [r4, #8]
 80011e2:	4413      	add	r3, r2
 80011e4:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
 80011e6:	68e3      	ldr	r3, [r4, #12]
 80011e8:	1a9b      	subs	r3, r3, r2
 80011ea:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
 80011ec:	b943      	cbnz	r3, 8001200 <usb_data_to_host+0x38>
 80011ee:	b13a      	cbz	r2, 8001200 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
 80011f0:	6923      	ldr	r3, [r4, #16]
 80011f2:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dd03      	ble.n	8001200 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
 80011f8:	069b      	lsls	r3, r3, #26
 80011fa:	d101      	bne.n	8001200 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
 80011fc:	2301      	movs	r3, #1
 80011fe:	7523      	strb	r3, [r4, #20]
}
 8001200:	b002      	add	sp, #8
 8001202:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
 8001204:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
 8001206:	461a      	mov	r2, r3
 8001208:	4619      	mov	r1, r3
 800120a:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
 800120c:	7523      	strb	r3, [r4, #20]
}
 800120e:	b002      	add	sp, #8
 8001210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
 8001214:	f001 bac6 	b.w	80027a4 <usb_dc_ep_write>
 8001218:	200004d0 	.word	0x200004d0

0800121c <usb_handle_control_transfer>:
{
 800121c:	b530      	push	{r4, r5, lr}
 800121e:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
 8001220:	2300      	movs	r3, #0
{
 8001222:	4602      	mov	r2, r0
 8001224:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
 8001226:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
 8001228:	2800      	cmp	r0, #0
 800122a:	d158      	bne.n	80012de <usb_handle_control_transfer+0xc2>
 800122c:	2900      	cmp	r1, #0
 800122e:	d135      	bne.n	800129c <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
 8001230:	2208      	movs	r2, #8
 8001232:	460b      	mov	r3, r1
 8001234:	eb0d 0102 	add.w	r1, sp, r2
 8001238:	f004 fd39 	bl	8005cae <usb_dc_ep_read>
 800123c:	2800      	cmp	r0, #0
 800123e:	da04      	bge.n	800124a <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
 8001240:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
 8001242:	f001 fa4d 	bl	80026e0 <usb_dc_ep_set_stall>
}
 8001246:	b005      	add	sp, #20
 8001248:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
 800124a:	4c2a      	ldr	r4, [pc, #168]	; (80012f4 <usb_handle_control_transfer+0xd8>)
 800124c:	9a02      	ldr	r2, [sp, #8]
 800124e:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
 8001250:	9a03      	ldr	r2, [sp, #12]
 8001252:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
 8001254:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8001258:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
 800125a:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
 800125e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
 8001262:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
 8001264:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
 8001266:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
 800126a:	db0a      	blt.n	8001282 <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
 800126c:	2b80      	cmp	r3, #128	; 0x80
 800126e:	d904      	bls.n	800127a <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
 8001270:	2080      	movs	r0, #128	; 0x80
 8001272:	f001 fa35 	bl	80026e0 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
 8001276:	2000      	movs	r0, #0
 8001278:	e7e3      	b.n	8001242 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
 800127a:	b113      	cbz	r3, 8001282 <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
 800127c:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
 8001280:	e7e1      	b.n	8001246 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
 8001282:	f7ff fdc3 	bl	8000e0c <usb_handle_request.constprop.0>
 8001286:	2800      	cmp	r0, #0
 8001288:	d0da      	beq.n	8001240 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
 800128a:	88e2      	ldrh	r2, [r4, #6]
 800128c:	6923      	ldr	r3, [r4, #16]
 800128e:	429a      	cmp	r2, r3
 8001290:	bfd4      	ite	le
 8001292:	60e2      	strle	r2, [r4, #12]
 8001294:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
 8001296:	f7ff ff97 	bl	80011c8 <usb_data_to_host>
 800129a:	e7d4      	b.n	8001246 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
 800129c:	4c15      	ldr	r4, [pc, #84]	; (80012f4 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
 800129e:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
 80012a2:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
 80012a4:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
 80012a6:	dc04      	bgt.n	80012b2 <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
 80012a8:	f004 fd01 	bl	8005cae <usb_dc_ep_read>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	daca      	bge.n	8001246 <usb_handle_control_transfer+0x2a>
 80012b0:	e7c6      	b.n	8001240 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
 80012b2:	462a      	mov	r2, r5
 80012b4:	f004 fcfb 	bl	8005cae <usb_dc_ep_read>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	dbd9      	blt.n	8001270 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
 80012bc:	9a01      	ldr	r2, [sp, #4]
 80012be:	68a3      	ldr	r3, [r4, #8]
 80012c0:	4413      	add	r3, r2
 80012c2:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
 80012c4:	68e3      	ldr	r3, [r4, #12]
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1bb      	bne.n	8001246 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
 80012ce:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80012d2:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
 80012d4:	f7ff fd9a 	bl	8000e0c <usb_handle_request.constprop.0>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1dc      	bne.n	8001296 <usb_handle_control_transfer+0x7a>
 80012dc:	e7b0      	b.n	8001240 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
 80012de:	2880      	cmp	r0, #128	; 0x80
 80012e0:	d1b1      	bne.n	8001246 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <usb_handle_control_transfer+0xd8>)
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d1d5      	bne.n	8001296 <usb_handle_control_transfer+0x7a>
 80012ea:	7d1b      	ldrb	r3, [r3, #20]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1d2      	bne.n	8001296 <usb_handle_control_transfer+0x7a>
 80012f0:	e7a9      	b.n	8001246 <usb_handle_control_transfer+0x2a>
 80012f2:	bf00      	nop
 80012f4:	200004d0 	.word	0x200004d0

080012f8 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
 80012fa:	4a06      	ldr	r2, [pc, #24]	; (8001314 <usb_set_config+0x1c>)
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
 80012fe:	4a06      	ldr	r2, [pc, #24]	; (8001318 <usb_set_config+0x20>)
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
 8001302:	4a06      	ldr	r2, [pc, #24]	; (800131c <usb_set_config+0x24>)
 8001304:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
 8001306:	4a06      	ldr	r2, [pc, #24]	; (8001320 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
 8001308:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
 800130a:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
 800130c:	2000      	movs	r0, #0
 800130e:	4770      	bx	lr
 8001310:	200004d0 	.word	0x200004d0
 8001314:	08000f29 	.word	0x08000f29
 8001318:	08000c95 	.word	0x08000c95
 800131c:	08000d35 	.word	0x08000d35
 8001320:	08000cd5 	.word	0x08000cd5

08001324 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
 8001324:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <usb_device_init+0x24>)
 8001328:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
 800132c:	b934      	cbnz	r4, 800133c <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
 800132e:	f000 f8cb 	bl	80014c8 <usb_get_device_descriptor>
	if (!device_descriptor) {
 8001332:	b130      	cbz	r0, 8001342 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
 8001334:	f7ff ffe0 	bl	80012f8 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
 8001338:	4620      	mov	r0, r4
}
 800133a:	bd10      	pop	{r4, pc}
		return -EALREADY;
 800133c:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8001340:	e7fb      	b.n	800133a <usb_device_init+0x16>
		return -1;
 8001342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001346:	e7f8      	b.n	800133a <usb_device_init+0x16>
 8001348:	200004d0 	.word	0x200004d0

0800134c <usb_enable>:
{
 800134c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001350:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
 8001352:	4d35      	ldr	r5, [pc, #212]	; (8001428 <usb_enable+0xdc>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
 8001354:	4835      	ldr	r0, [pc, #212]	; (800142c <usb_enable+0xe0>)
 8001356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135e:	f003 fa15 	bl	800478c <z_impl_k_mutex_lock>
 8001362:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
 8001366:	2e00      	cmp	r6, #0
 8001368:	d15b      	bne.n	8001422 <usb_enable+0xd6>
	usb_dev.status_callback = cb;
 800136a:	4831      	ldr	r0, [pc, #196]	; (8001430 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
 800136c:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
 800136e:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
 8001370:	f001 f970 	bl	8002654 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
 8001374:	f001 f8e0 	bl	8002538 <usb_dc_attach>
	if (ret < 0) {
 8001378:	1e04      	subs	r4, r0, #0
 800137a:	db36      	blt.n	80013ea <usb_enable+0x9e>
	ret = usb_transfer_init();
 800137c:	f000 fafa 	bl	8001974 <usb_transfer_init>
	if (ret < 0) {
 8001380:	1e04      	subs	r4, r0, #0
 8001382:	db32      	blt.n	80013ea <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
 8001384:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
 8001386:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
 8001388:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
 800138c:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
 8001390:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
 8001394:	f004 fc69 	bl	8005c6a <usb_dc_ep_configure>
	if (ret < 0) {
 8001398:	1e04      	subs	r4, r0, #0
 800139a:	db26      	blt.n	80013ea <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
 800139c:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
 800139e:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
 80013a0:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
 80013a4:	f004 fc61 	bl	8005c6a <usb_dc_ep_configure>
	if (ret < 0) {
 80013a8:	1e04      	subs	r4, r0, #0
 80013aa:	db1e      	blt.n	80013ea <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
 80013ac:	4921      	ldr	r1, [pc, #132]	; (8001434 <usb_enable+0xe8>)
 80013ae:	4630      	mov	r0, r6
 80013b0:	f004 fc41 	bl	8005c36 <usb_dc_ep_set_callback>
	if (ret < 0) {
 80013b4:	1e04      	subs	r4, r0, #0
 80013b6:	db18      	blt.n	80013ea <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
 80013b8:	491e      	ldr	r1, [pc, #120]	; (8001434 <usb_enable+0xe8>)
 80013ba:	4638      	mov	r0, r7
 80013bc:	f004 fc3b 	bl	8005c36 <usb_dc_ep_set_callback>
	if (ret < 0) {
 80013c0:	1e04      	subs	r4, r0, #0
 80013c2:	db12      	blt.n	80013ea <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 80013c4:	4c1c      	ldr	r4, [pc, #112]	; (8001438 <usb_enable+0xec>)
 80013c6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800143c <usb_enable+0xf0>
 80013ca:	4544      	cmp	r4, r8
 80013cc:	d314      	bcc.n	80013f8 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f001 f9b2 	bl	8002738 <usb_dc_ep_enable>
	if (ret < 0) {
 80013d4:	1e04      	subs	r4, r0, #0
 80013d6:	db08      	blt.n	80013ea <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
 80013d8:	2080      	movs	r0, #128	; 0x80
 80013da:	f001 f9ad 	bl	8002738 <usb_dc_ep_enable>
	if (ret < 0) {
 80013de:	1e04      	subs	r4, r0, #0
 80013e0:	db03      	blt.n	80013ea <usb_enable+0x9e>
	usb_dev.enabled = true;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
 80013e8:	2400      	movs	r4, #0
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <usb_enable+0xe0>)
 80013ec:	f003 fa48 	bl	8004880 <z_impl_k_mutex_unlock>
}
 80013f0:	4620      	mov	r0, r4
 80013f2:	b002      	add	sp, #8
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
 80013f8:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
 80013fa:	2600      	movs	r6, #0
 80013fc:	7f22      	ldrb	r2, [r4, #28]
 80013fe:	b2f3      	uxtb	r3, r6
 8001400:	429a      	cmp	r2, r3
 8001402:	d801      	bhi.n	8001408 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 8001404:	3424      	adds	r4, #36	; 0x24
 8001406:	e7e0      	b.n	80013ca <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
 8001408:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 800140c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8001410:	7910      	ldrb	r0, [r2, #4]
 8001412:	f004 fc10 	bl	8005c36 <usb_dc_ep_set_callback>
 8001416:	3601      	adds	r6, #1
 8001418:	2800      	cmp	r0, #0
 800141a:	d0ef      	beq.n	80013fc <usb_enable+0xb0>
 800141c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001420:	e7e3      	b.n	80013ea <usb_enable+0x9e>
		ret = -EALREADY;
 8001422:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8001426:	e7e0      	b.n	80013ea <usb_enable+0x9e>
 8001428:	200004d0 	.word	0x200004d0
 800142c:	20000194 	.word	0x20000194
 8001430:	08000e39 	.word	0x08000e39
 8001434:	0800121d 	.word	0x0800121d
 8001438:	20000264 	.word	0x20000264
 800143c:	20000288 	.word	0x20000288

08001440 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
 8001440:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <usb_update_sn_string_descriptor+0x80>)
{
 8001444:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
 8001446:	aa05      	add	r2, sp, #20
 8001448:	f103 0510 	add.w	r5, r3, #16
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	4614      	mov	r4, r2
 8001452:	c403      	stmia	r4!, {r0, r1}
 8001454:	3308      	adds	r3, #8
 8001456:	42ab      	cmp	r3, r5
 8001458:	4622      	mov	r2, r4
 800145a:	d1f7      	bne.n	800144c <usb_update_sn_string_descriptor+0xc>
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
 8001460:	2210      	movs	r2, #16
 8001462:	2100      	movs	r1, #0
 8001464:	a801      	add	r0, sp, #4
 8001466:	f004 fb69 	bl	8005b3c <memset>
	memset(sn, 0, sizeof(sn));
 800146a:	2212      	movs	r2, #18
 800146c:	2100      	movs	r1, #0
 800146e:	4815      	ldr	r0, [pc, #84]	; (80014c4 <usb_update_sn_string_descriptor+0x84>)
 8001470:	f004 fb64 	bl	8005b3c <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
 8001474:	2110      	movs	r1, #16
 8001476:	a801      	add	r0, sp, #4
 8001478:	f001 fdec 	bl	8003054 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
 800147c:	2800      	cmp	r0, #0
 800147e:	dd1b      	ble.n	80014b8 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
 8001480:	2808      	cmp	r0, #8
 8001482:	bfb8      	it	lt
 8001484:	2008      	movlt	r0, #8
 8001486:	3809      	subs	r0, #9
 8001488:	ab01      	add	r3, sp, #4
 800148a:	490e      	ldr	r1, [pc, #56]	; (80014c4 <usb_update_sn_string_descriptor+0x84>)
 800148c:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
 800148e:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
 8001490:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001494:	ac0a      	add	r4, sp, #40	; 0x28
 8001496:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3328      	adds	r3, #40	; 0x28
 80014a0:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
 80014a2:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
 80014a4:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
 80014a8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
 80014ac:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
 80014ae:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
 80014b0:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
 80014b2:	f101 0102 	add.w	r1, r1, #2
 80014b6:	d1eb      	bne.n	8001490 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <usb_update_sn_string_descriptor+0x84>)
 80014ba:	b00b      	add	sp, #44	; 0x2c
 80014bc:	bd30      	pop	{r4, r5, pc}
 80014be:	bf00      	nop
 80014c0:	08007a46 	.word	0x08007a46
 80014c4:	20000f5c 	.word	0x20000f5c

080014c8 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
 80014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014cc:	4c64      	ldr	r4, [pc, #400]	; (8001660 <usb_get_device_descriptor+0x198>)
 80014ce:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
 80014d0:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
 80014d2:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
 80014d6:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
 80014d8:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
 80014da:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
 80014dc:	7823      	ldrb	r3, [r4, #0]
 80014de:	b92b      	cbnz	r3, 80014ec <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
 80014e0:	4b60      	ldr	r3, [pc, #384]	; (8001664 <usb_get_device_descriptor+0x19c>)
 80014e2:	3402      	adds	r4, #2
 80014e4:	429c      	cmp	r4, r3
 80014e6:	d1f3      	bne.n	80014d0 <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
 80014e8:	485d      	ldr	r0, [pc, #372]	; (8001660 <usb_get_device_descriptor+0x198>)
 80014ea:	e01c      	b.n	8001526 <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
 80014ec:	7863      	ldrb	r3, [r4, #1]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d805      	bhi.n	80014fe <usb_get_device_descriptor+0x36>
 80014f2:	e8df f003 	tbb	[pc, r3]
 80014f6:	047b      	.short	0x047b
 80014f8:	25077b03 	.word	0x25077b03
 80014fc:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
 80014fe:	7823      	ldrb	r3, [r4, #0]
 8001500:	441c      	add	r4, r3
 8001502:	e7eb      	b.n	80014dc <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
 8001504:	78e3      	ldrb	r3, [r4, #3]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f9      	bne.n	80014fe <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
 800150a:	78a3      	ldrb	r3, [r4, #2]
 800150c:	b173      	cbz	r3, 800152c <usb_get_device_descriptor+0x64>
			numof_ifaces++;
 800150e:	f109 0901 	add.w	r9, r9, #1
 8001512:	fa5f f989 	uxtb.w	r9, r9
			break;
 8001516:	e7f2      	b.n	80014fe <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
 8001518:	686a      	ldr	r2, [r5, #4]
 800151a:	4294      	cmp	r4, r2
 800151c:	d009      	beq.n	8001532 <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 800151e:	3524      	adds	r5, #36	; 0x24
 8001520:	429d      	cmp	r5, r3
 8001522:	d3f9      	bcc.n	8001518 <usb_get_device_descriptor+0x50>
		return NULL;
 8001524:	2000      	movs	r0, #0
}
 8001526:	b005      	add	sp, #20
 8001528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
 800152c:	4d4e      	ldr	r5, [pc, #312]	; (8001668 <usb_get_device_descriptor+0x1a0>)
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <usb_get_device_descriptor+0x1a4>)
 8001530:	e7f6      	b.n	8001520 <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
 8001532:	68ab      	ldr	r3, [r5, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0ea      	beq.n	800150e <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
 8001538:	4649      	mov	r1, r9
 800153a:	4620      	mov	r0, r4
 800153c:	4798      	blx	r3
 800153e:	e7e6      	b.n	800150e <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
 8001540:	2d00      	cmp	r5, #0
 8001542:	d0ef      	beq.n	8001524 <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
 8001544:	2300      	movs	r3, #0
 8001546:	2101      	movs	r1, #1
 8001548:	7f2a      	ldrb	r2, [r5, #28]
 800154a:	4293      	cmp	r3, r2
 800154c:	d2ea      	bcs.n	8001524 <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
 800154e:	6a2a      	ldr	r2, [r5, #32]
 8001550:	78a7      	ldrb	r7, [r4, #2]
 8001552:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001556:	7910      	ldrb	r0, [r2, #4]
 8001558:	4287      	cmp	r7, r0
 800155a:	d001      	beq.n	8001560 <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
 800155c:	3301      	adds	r3, #1
 800155e:	e7f3      	b.n	8001548 <usb_get_device_descriptor+0x80>
 8001560:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
 8001562:	78e0      	ldrb	r0, [r4, #3]
 8001564:	f000 0003 	and.w	r0, r0, #3
 8001568:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
 800156c:	7920      	ldrb	r0, [r4, #4]
 800156e:	f894 c005 	ldrb.w	ip, [r4, #5]
 8001572:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001576:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
 800157a:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800157e:	2800      	cmp	r0, #0
 8001580:	fa5f f887 	uxtb.w	r8, r7
 8001584:	da27      	bge.n	80015d6 <usb_get_device_descriptor+0x10e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
 8001586:	f107 0010 	add.w	r0, r7, #16
 800158a:	fa01 f000 	lsl.w	r0, r1, r0
 800158e:	ea10 0f0b 	tst.w	r0, fp
 8001592:	d127      	bne.n	80015e4 <usb_get_device_descriptor+0x11c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
 8001594:	f048 0080 	orr.w	r0, r8, #128	; 0x80
 8001598:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
 800159c:	a802      	add	r0, sp, #8
 800159e:	e9cd 3200 	strd	r3, r2, [sp]
 80015a2:	f004 fb53 	bl	8005c4c <usb_dc_ep_check_cap>
 80015a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80015aa:	2101      	movs	r1, #1
 80015ac:	b9d0      	cbnz	r0, 80015e4 <usb_get_device_descriptor+0x11c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
 80015ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80015b2:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
 80015b4:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
 80015b8:	bf18      	it	ne
 80015ba:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
 80015be:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
 80015c0:	bf18      	it	ne
 80015c2:	fa5f f888 	uxtbne.w	r8, r8
 80015c6:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
 80015c8:	bf0c      	ite	eq
 80015ca:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
 80015cc:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
 80015d0:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
 80015d4:	e793      	b.n	80014fe <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
 80015d6:	fa01 f007 	lsl.w	r0, r1, r7
 80015da:	ea10 0f0b 	tst.w	r0, fp
 80015de:	d101      	bne.n	80015e4 <usb_get_device_descriptor+0x11c>
 80015e0:	4640      	mov	r0, r8
 80015e2:	e7d9      	b.n	8001598 <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
 80015e4:	3701      	adds	r7, #1
 80015e6:	2f10      	cmp	r7, #16
 80015e8:	d1bb      	bne.n	8001562 <usb_get_device_descriptor+0x9a>
 80015ea:	e7b7      	b.n	800155c <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
 80015ec:	2e03      	cmp	r6, #3
 80015ee:	d11d      	bne.n	800162c <usb_get_device_descriptor+0x164>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
 80015f0:	f7ff ff26 	bl	8001440 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
 80015f4:	4607      	mov	r7, r0
 80015f6:	b168      	cbz	r0, 8001614 <usb_get_device_descriptor+0x14c>
	runtime_sn_len = strlen(runtime_sn);
 80015f8:	f004 fa71 	bl	8005ade <strlen>
	if (!runtime_sn_len) {
 80015fc:	4680      	mov	r8, r0
 80015fe:	b148      	cbz	r0, 8001614 <usb_get_device_descriptor+0x14c>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
 8001600:	481b      	ldr	r0, [pc, #108]	; (8001670 <usb_get_device_descriptor+0x1a8>)
 8001602:	f004 fa6c 	bl	8005ade <strlen>
	if (runtime_sn_len != default_sn_len) {
 8001606:	4580      	cmp	r8, r0
 8001608:	d104      	bne.n	8001614 <usb_get_device_descriptor+0x14c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
 800160a:	4642      	mov	r2, r8
 800160c:	4639      	mov	r1, r7
 800160e:	1ca0      	adds	r0, r4, #2
 8001610:	f004 fa89 	bl	8005b26 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
 8001614:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
 8001616:	f06f 0102 	mvn.w	r1, #2
 800161a:	18e2      	adds	r2, r4, r3
 800161c:	1b09      	subs	r1, r1, r4
 800161e:	eb04 0353 	add.w	r3, r4, r3, lsr #1
 8001622:	42d1      	cmn	r1, r2
 8001624:	d513      	bpl.n	800164e <usb_get_device_descriptor+0x186>
			str_descr_idx += 1U;
 8001626:	3601      	adds	r6, #1
 8001628:	b2f6      	uxtb	r6, r6
			break;
 800162a:	e768      	b.n	80014fe <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
 800162c:	2e00      	cmp	r6, #0
 800162e:	d1f1      	bne.n	8001614 <usb_get_device_descriptor+0x14c>
				if (!cfg_descr) {
 8001630:	f1ba 0f00 	cmp.w	sl, #0
 8001634:	f43f af76 	beq.w	8001524 <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
 8001638:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
 800163c:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
 8001640:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001644:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
 8001648:	f88a 9004 	strb.w	r9, [sl, #4]
 800164c:	e7eb      	b.n	8001626 <usb_get_device_descriptor+0x15e>
		buf[i] = 0U;
 800164e:	f04f 0000 	mov.w	r0, #0
 8001652:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
 8001656:	f813 0901 	ldrb.w	r0, [r3], #-1
 800165a:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
 800165e:	e7e0      	b.n	8001622 <usb_get_device_descriptor+0x15a>
 8001660:	200001a8 	.word	0x200001a8
 8001664:	20000261 	.word	0x20000261
 8001668:	20000264 	.word	0x20000264
 800166c:	20000288 	.word	0x20000288
 8001670:	08007a46 	.word	0x08007a46

08001674 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
 8001674:	b510      	push	{r4, lr}
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8001678:	2100      	movs	r1, #0
 800167a:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
 800167c:	781c      	ldrb	r4, [r3, #0]
 800167e:	4284      	cmp	r4, r0
 8001680:	d104      	bne.n	800168c <usb_ep_get_transfer+0x18>
 8001682:	685c      	ldr	r4, [r3, #4]
 8001684:	b114      	cbz	r4, 800168c <usb_ep_get_transfer+0x18>
			return &ut_data[i];
 8001686:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
 800168a:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 800168c:	3101      	adds	r1, #1
 800168e:	2904      	cmp	r1, #4
 8001690:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8001694:	d1f2      	bne.n	800167c <usb_ep_get_transfer+0x8>
	return NULL;
 8001696:	2000      	movs	r0, #0
 8001698:	e7f7      	b.n	800168a <usb_ep_get_transfer+0x16>
 800169a:	bf00      	nop
 800169c:	20000594 	.word	0x20000594

080016a0 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
 80016a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
 80016a4:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
 80016a8:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
 80016ac:	3310      	adds	r3, #16
{
 80016ae:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
 80016b0:	d110      	bne.n	80016d4 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
 80016b2:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
 80016b4:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
 80016b8:	0799      	lsls	r1, r3, #30
 80016ba:	d53c      	bpl.n	8001736 <usb_transfer_work+0x96>
		if (!trans->bsize) {
 80016bc:	bb02      	cbnz	r2, 8001700 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
 80016be:	f013 0304 	ands.w	r3, r3, #4
 80016c2:	d104      	bne.n	80016ce <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
 80016c4:	461a      	mov	r2, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	4630      	mov	r0, r6
 80016ca:	f004 f896 	bl	80057fa <usb_write>
			}
			trans->status = 0;
 80016ce:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
 80016d0:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
 80016d4:	f854 3c28 	ldr.w	r3, [r4, #-40]
 80016d8:	3310      	adds	r3, #16
 80016da:	d00e      	beq.n	80016fa <usb_transfer_work+0x5a>
 80016dc:	f854 5c18 	ldr.w	r5, [r4, #-24]
 80016e0:	b15d      	cbz	r5, 80016fa <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
 80016e2:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
 80016e6:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
 80016ea:	f005 fc49 	bl	8006f80 <k_is_in_isr>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d04c      	beq.n	800178c <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 80016f2:	482e      	ldr	r0, [pc, #184]	; (80017ac <usb_transfer_work+0x10c>)
 80016f4:	4621      	mov	r1, r4
 80016f6:	f005 fc9d 	bl	8007034 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
 80016fa:	b002      	add	sp, #8
 80016fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
 8001700:	f850 1c24 	ldr.w	r1, [r0, #-36]
 8001704:	ab01      	add	r3, sp, #4
 8001706:	4630      	mov	r0, r6
 8001708:	f004 f877 	bl	80057fa <usb_write>
		if (ret) {
 800170c:	b110      	cbz	r0, 8001714 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
 800170e:	f06f 0315 	mvn.w	r3, #21
 8001712:	e7dd      	b.n	80016d0 <usb_transfer_work+0x30>
		trans->buffer += bytes;
 8001714:	9a01      	ldr	r2, [sp, #4]
 8001716:	f854 3c24 	ldr.w	r3, [r4, #-36]
 800171a:	4413      	add	r3, r2
 800171c:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
 8001720:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
 800172a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800172e:	4413      	add	r3, r2
 8001730:	f844 3c1c 	str.w	r3, [r4, #-28]
 8001734:	e7ce      	b.n	80016d4 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
 8001736:	f850 1c24 	ldr.w	r1, [r0, #-36]
 800173a:	ab01      	add	r3, sp, #4
 800173c:	4630      	mov	r0, r6
 800173e:	f001 f883 	bl	8002848 <usb_dc_ep_read_wait>
		if (ret) {
 8001742:	2800      	cmp	r0, #0
 8001744:	d1e3      	bne.n	800170e <usb_transfer_work+0x6e>
		trans->buffer += bytes;
 8001746:	9d01      	ldr	r5, [sp, #4]
 8001748:	f854 3c24 	ldr.w	r3, [r4, #-36]
 800174c:	442b      	add	r3, r5
 800174e:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
 8001752:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8001756:	1b5b      	subs	r3, r3, r5
 8001758:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
 800175c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8001760:	442b      	add	r3, r5
 8001762:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
 8001766:	2d00      	cmp	r5, #0
 8001768:	d0b1      	beq.n	80016ce <usb_transfer_work+0x2e>
 800176a:	4630      	mov	r0, r6
 800176c:	f004 faad 	bl	8005cca <usb_dc_ep_mps>
 8001770:	fbb5 f3f0 	udiv	r3, r5, r0
 8001774:	fb03 5510 	mls	r5, r3, r0, r5
 8001778:	2d00      	cmp	r5, #0
 800177a:	d1a8      	bne.n	80016ce <usb_transfer_work+0x2e>
 800177c:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0a4      	beq.n	80016ce <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
 8001784:	4630      	mov	r0, r6
 8001786:	f001 f88f 	bl	80028a8 <usb_dc_ep_read_continue>
 800178a:	e7a3      	b.n	80016d4 <usb_transfer_work+0x34>
		trans->cb = NULL;
 800178c:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001790:	f1a4 0010 	sub.w	r0, r4, #16
 8001794:	f003 f8b0 	bl	80048f8 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
 8001798:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800179c:	338c      	adds	r3, #140	; 0x8c
 800179e:	d0ac      	beq.n	80016fa <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
 80017a0:	4642      	mov	r2, r8
 80017a2:	4639      	mov	r1, r7
 80017a4:	4630      	mov	r0, r6
 80017a6:	47a8      	blx	r5
 80017a8:	e7a7      	b.n	80016fa <usb_transfer_work+0x5a>
 80017aa:	bf00      	nop
 80017ac:	20000288 	.word	0x20000288

080017b0 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
 80017b0:	1e4b      	subs	r3, r1, #1
 80017b2:	2b01      	cmp	r3, #1
{
 80017b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017b6:	4606      	mov	r6, r0
 80017b8:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
 80017ba:	d80f      	bhi.n	80017dc <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
 80017bc:	f7ff ff5a 	bl	8001674 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
 80017c0:	4604      	mov	r4, r0
 80017c2:	b968      	cbnz	r0, 80017e0 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
 80017c4:	2d01      	cmp	r5, #1
 80017c6:	d109      	bne.n	80017dc <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
 80017c8:	ab01      	add	r3, sp, #4
 80017ca:	2201      	movs	r2, #1
 80017cc:	f10d 0103 	add.w	r1, sp, #3
 80017d0:	4630      	mov	r0, r6
 80017d2:	f001 f839 	bl	8002848 <usb_dc_ep_read_wait>
			} while (bytes);
 80017d6:	9b01      	ldr	r3, [sp, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f5      	bne.n	80017c8 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
 80017dc:	b002      	add	sp, #8
 80017de:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
 80017e0:	f005 fbce 	bl	8006f80 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 80017e4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
 80017e8:	b108      	cbz	r0, 80017ee <usb_transfer_ep_callback+0x3e>
 80017ea:	2d01      	cmp	r5, #1
 80017ec:	d105      	bne.n	80017fa <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
 80017ee:	4608      	mov	r0, r1
}
 80017f0:	b002      	add	sp, #8
 80017f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
 80017f6:	f7ff bf53 	b.w	80016a0 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <usb_transfer_ep_callback+0x58>)
}
 80017fc:	b002      	add	sp, #8
 80017fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 8001802:	f005 bc17 	b.w	8007034 <k_work_submit_to_queue>
 8001806:	bf00      	nop
 8001808:	20000288 	.word	0x20000288

0800180c <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
 800180c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001810:	4606      	mov	r6, r0
 8001812:	9101      	str	r1, [sp, #4]
 8001814:	4615      	mov	r5, r2
 8001816:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
 8001818:	f004 f837 	bl	800588a <usb_transfer_is_busy>
 800181c:	4604      	mov	r4, r0
 800181e:	2800      	cmp	r0, #0
 8001820:	d15c      	bne.n	80018dc <usb_transfer+0xd0>
	__asm__ volatile(
 8001822:	f04f 0310 	mov.w	r3, #16
 8001826:	f3ef 8a11 	mrs	sl, BASEPRI
 800182a:	f383 8812 	msr	BASEPRI_MAX, r3
 800182e:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8001832:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80018e4 <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
 8001836:	2200      	movs	r2, #0
 8001838:	2300      	movs	r3, #0
 800183a:	4658      	mov	r0, fp
 800183c:	f003 f87c 	bl	8004938 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
 8001840:	b970      	cbnz	r0, 8001860 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
 8001842:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80018e8 <usb_transfer+0xdc>
 8001846:	01a7      	lsls	r7, r4, #6
 8001848:	eb09 1484 	add.w	r4, r9, r4, lsl #6
 800184c:	6863      	ldr	r3, [r4, #4]
 800184e:	f113 0f10 	cmn.w	r3, #16
 8001852:	d114      	bne.n	800187e <usb_transfer+0x72>
 8001854:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
 8001856:	4658      	mov	r0, fp
 8001858:	f003 f84e 	bl	80048f8 <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
 800185c:	9b01      	ldr	r3, [sp, #4]
 800185e:	e006      	b.n	800186e <usb_transfer+0x62>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8001860:	3401      	adds	r4, #1
 8001862:	2c04      	cmp	r4, #4
 8001864:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8001868:	d1e5      	bne.n	8001836 <usb_transfer+0x2a>
		ret = -ENOMEM;
 800186a:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
 800186e:	f38a 8811 	msr	BASEPRI, sl
 8001872:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
 8001876:	4618      	mov	r0, r3
 8001878:	b003      	add	sp, #12
 800187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
 800187e:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
 8001880:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
 8001882:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
 8001886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001888:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
 800188a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800188c:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
 800188e:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
 8001892:	f809 6007 	strb.w	r6, [r9, r7]
	trans->flags = flags;
 8001896:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
 800189a:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
 800189c:	4630      	mov	r0, r6
 800189e:	f004 fa14 	bl	8005cca <usb_dc_ep_mps>
 80018a2:	b158      	cbz	r0, 80018bc <usb_transfer+0xb0>
 80018a4:	4630      	mov	r0, r6
 80018a6:	f004 fa10 	bl	8005cca <usb_dc_ep_mps>
 80018aa:	fbb5 f3f0 	udiv	r3, r5, r0
 80018ae:	fb03 5510 	mls	r5, r3, r0, r5
 80018b2:	b11d      	cbz	r5, 80018bc <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
 80018b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
 80018bc:	f018 0f02 	tst.w	r8, #2
 80018c0:	d007      	beq.n	80018d2 <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 80018c2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80018c6:	4809      	ldr	r0, [pc, #36]	; (80018ec <usb_transfer+0xe0>)
 80018c8:	4449      	add	r1, r9
 80018ca:	f005 fbb3 	bl	8007034 <k_work_submit_to_queue>
	int i, key, ret = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e7cd      	b.n	800186e <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
 80018d2:	4630      	mov	r0, r6
 80018d4:	f000 ffe8 	bl	80028a8 <usb_dc_ep_read_continue>
 80018d8:	4603      	mov	r3, r0
 80018da:	e7c8      	b.n	800186e <usb_transfer+0x62>
		return -EBUSY;
 80018dc:	f06f 030f 	mvn.w	r3, #15
 80018e0:	e7c9      	b.n	8001876 <usb_transfer+0x6a>
 80018e2:	bf00      	nop
 80018e4:	200005b0 	.word	0x200005b0
 80018e8:	20000594 	.word	0x20000594
 80018ec:	20000288 	.word	0x20000288

080018f0 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
 80018f0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80018f2:	f04f 0310 	mov.w	r3, #16
 80018f6:	f3ef 8411 	mrs	r4, BASEPRI
 80018fa:	f383 8812 	msr	BASEPRI_MAX, r3
 80018fe:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
 8001902:	f7ff feb7 	bl	8001674 <usb_ep_get_transfer>
	if (!trans) {
 8001906:	b150      	cbz	r0, 800191e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
 8001908:	6843      	ldr	r3, [r0, #4]
 800190a:	3310      	adds	r3, #16
 800190c:	d107      	bne.n	800191e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
 800190e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8001912:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 8001914:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <usb_cancel_transfer+0x38>)
 800191a:	f005 fb8b 	bl	8007034 <k_work_submit_to_queue>
	__asm__ volatile(
 800191e:	f384 8811 	msr	BASEPRI, r4
 8001922:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
 8001926:	bd10      	pop	{r4, pc}
 8001928:	20000288 	.word	0x20000288

0800192c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	4c0f      	ldr	r4, [pc, #60]	; (800196c <usb_cancel_transfers+0x40>)
 8001930:	2504      	movs	r5, #4
	__asm__ volatile(
 8001932:	f04f 0310 	mov.w	r3, #16
 8001936:	f3ef 8611 	mrs	r6, BASEPRI
 800193a:	f383 8812 	msr	BASEPRI_MAX, r3
 800193e:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
 8001942:	6863      	ldr	r3, [r4, #4]
 8001944:	3310      	adds	r3, #16
 8001946:	d107      	bne.n	8001958 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
 8001948:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 800194c:	4808      	ldr	r0, [pc, #32]	; (8001970 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
 800194e:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
 8001950:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8001954:	f005 fb6e 	bl	8007034 <k_work_submit_to_queue>
	__asm__ volatile(
 8001958:	f386 8811 	msr	BASEPRI, r6
 800195c:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 8001960:	3d01      	subs	r5, #1
 8001962:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8001966:	d1e4      	bne.n	8001932 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
 8001968:	bd70      	pop	{r4, r5, r6, pc}
 800196a:	bf00      	nop
 800196c:	20000594 	.word	0x20000594
 8001970:	20000288 	.word	0x20000288

08001974 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
 8001974:	b570      	push	{r4, r5, r6, lr}
 8001976:	4c0a      	ldr	r4, [pc, #40]	; (80019a0 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
 8001978:	4e0a      	ldr	r6, [pc, #40]	; (80019a4 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 800197a:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
 800197c:	4631      	mov	r1, r6
 800197e:	4620      	mov	r0, r4
 8001980:	f005 fb3b 	bl	8006ffa <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8001984:	2201      	movs	r2, #1
 8001986:	f1a4 0010 	sub.w	r0, r4, #16
 800198a:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
 800198c:	3501      	adds	r5, #1
 800198e:	f005 fb16 	bl	8006fbe <z_impl_k_sem_init>
 8001992:	2d04      	cmp	r5, #4
 8001994:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8001998:	d1f0      	bne.n	800197c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
 800199a:	2000      	movs	r0, #0
 800199c:	bd70      	pop	{r4, r5, r6, pc}
 800199e:	bf00      	nop
 80019a0:	200005c0 	.word	0x200005c0
 80019a4:	080016a1 	.word	0x080016a1

080019a8 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	4604      	mov	r4, r0
 80019ac:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
 80019ae:	7901      	ldrb	r1, [r0, #4]
 80019b0:	4812      	ldr	r0, [pc, #72]	; (80019fc <cdc_acm_class_handle_req+0x54>)
{
 80019b2:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
 80019b4:	f003 ff45 	bl	8005842 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
 80019b8:	b1e8      	cbz	r0, 80019f6 <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
 80019ba:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
 80019be:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	db11      	blt.n	80019e8 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d004      	beq.n	80019d2 <cdc_acm_class_handle_req+0x2a>
 80019c8:	2b22      	cmp	r3, #34	; 0x22
 80019ca:	d009      	beq.n	80019e0 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
 80019cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80019d0:	e005      	b.n	80019de <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
 80019d2:	6829      	ldr	r1, [r5, #0]
 80019d4:	2207      	movs	r2, #7
 80019d6:	3810      	subs	r0, #16
 80019d8:	f004 f8a5 	bl	8005b26 <memcpy>
			return 0;
 80019dc:	2000      	movs	r0, #0
}
 80019de:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
 80019e0:	8863      	ldrh	r3, [r4, #2]
 80019e2:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
 80019e6:	e7f9      	b.n	80019dc <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
 80019e8:	2b21      	cmp	r3, #33	; 0x21
 80019ea:	d1ef      	bne.n	80019cc <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
 80019ec:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
 80019ee:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
 80019f0:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
 80019f2:	6033      	str	r3, [r6, #0]
			return 0;
 80019f4:	e7f2      	b.n	80019dc <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
 80019f6:	f06f 0012 	mvn.w	r0, #18
 80019fa:	e7f0      	b.n	80019de <cdc_acm_class_handle_req+0x36>
 80019fc:	20000694 	.word	0x20000694

08001a00 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
 8001a00:	b508      	push	{r3, lr}
 8001a02:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <cdc_acm_int_in+0x14>)
 8001a06:	f003 ff2a 	bl	800585e <usb_get_dev_data_by_ep>
	if (common == NULL) {
 8001a0a:	b110      	cbz	r0, 8001a12 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
 8001a12:	bd08      	pop	{r3, pc}
 8001a14:	20000694 	.word	0x20000694

08001a18 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8001a18:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
 8001a20:	680b      	ldr	r3, [r1, #0]
 8001a22:	b133      	cbz	r3, 8001a32 <cdc_acm_irq_rx_enable+0x1a>
 8001a24:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8001a28:	b11b      	cbz	r3, 8001a32 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 8001a2a:	4802      	ldr	r0, [pc, #8]	; (8001a34 <cdc_acm_irq_rx_enable+0x1c>)
 8001a2c:	3108      	adds	r1, #8
 8001a2e:	f005 bb01 	b.w	8007034 <k_work_submit_to_queue>
	}
}
 8001a32:	4770      	bx	lr
 8001a34:	20000288 	.word	0x20000288

08001a38 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8001a38:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
 8001a40:	680b      	ldr	r3, [r1, #0]
 8001a42:	b133      	cbz	r3, 8001a52 <cdc_acm_irq_tx_enable+0x1a>
 8001a44:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8001a48:	b11b      	cbz	r3, 8001a52 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 8001a4a:	4802      	ldr	r0, [pc, #8]	; (8001a54 <cdc_acm_irq_tx_enable+0x1c>)
 8001a4c:	3108      	adds	r1, #8
 8001a4e:	f005 baf1 	b.w	8007034 <k_work_submit_to_queue>
}
 8001a52:	4770      	bx	lr
 8001a54:	20000288 	.word	0x20000288

08001a58 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
 8001a58:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <cdc_acm_reset_port+0x34>)
{
 8001a5a:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
 8001a60:	6810      	ldr	r0, [r2, #0]
 8001a62:	6758      	str	r0, [r3, #116]	; 0x74
 8001a64:	8890      	ldrh	r0, [r2, #4]
 8001a66:	7992      	ldrb	r2, [r2, #6]
 8001a68:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
 8001a6c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
 8001a70:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
 8001a74:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	dev_data->configured = false;
 8001a78:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
	dev_data->rx_paused = false;
 8001a7c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
 8001a80:	2240      	movs	r2, #64	; 0x40
 8001a82:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8001a86:	f004 b859 	b.w	8005b3c <memset>
 8001a8a:	bf00      	nop
 8001a8c:	08007778 	.word	0x08007778

08001a90 <cdc_acm_fifo_fill>:
{
 8001a90:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8001a92:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
 8001a94:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
 8001a98:	b170      	cbz	r0, 8001ab8 <cdc_acm_fifo_fill+0x28>
 8001a9a:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
 8001a9e:	b963      	cbnz	r3, 8001aba <cdc_acm_fifo_fill+0x2a>
	dev_data->tx_ready = false;
 8001aa0:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
 8001aa4:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8001aa6:	f003 fe26 	bl	80056f6 <ring_buf_put>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
 8001aaa:	f105 0118 	add.w	r1, r5, #24
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
 8001aae:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <cdc_acm_fifo_fill+0x30>)
 8001ab2:	f005 fabf 	bl	8007034 <k_work_submit_to_queue>
	return wrote;
 8001ab6:	4620      	mov	r0, r4
}
 8001ab8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 8001aba:	2000      	movs	r0, #0
 8001abc:	e7fc      	b.n	8001ab8 <cdc_acm_fifo_fill+0x28>
 8001abe:	bf00      	nop
 8001ac0:	20000288 	.word	0x20000288

08001ac4 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
 8001ac4:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8001ac6:	6904      	ldr	r4, [r0, #16]
{
 8001ac8:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
 8001acc:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
 8001ad0:	b18b      	cbz	r3, 8001af6 <cdc_acm_poll_out+0x32>
 8001ad2:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 8001ad6:	b973      	cbnz	r3, 8001af6 <cdc_acm_poll_out+0x32>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
 8001ad8:	f10d 0107 	add.w	r1, sp, #7
 8001adc:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
 8001ade:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f003 fe07 	bl	80056f6 <ring_buf_put>
 8001ae8:	4601      	mov	r1, r0
 8001aea:	b130      	cbz	r0, 8001afa <cdc_acm_poll_out+0x36>
			LOG_ERR("Failed to drain buffer");
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <cdc_acm_poll_out+0x54>)
 8001aee:	f104 0118 	add.w	r1, r4, #24
 8001af2:	f005 fa9f 	bl	8007034 <k_work_submit_to_queue>
}
 8001af6:	b002      	add	sp, #8
 8001af8:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
 8001afa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001afc:	2201      	movs	r2, #1
 8001afe:	f003 fe4e 	bl	800579e <ring_buf_get>
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d0f7      	beq.n	8001af6 <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
 8001b06:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f10d 0107 	add.w	r1, sp, #7
 8001b0e:	f003 fdf2 	bl	80056f6 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d1ea      	bne.n	8001aec <cdc_acm_poll_out+0x28>
 8001b16:	e7ee      	b.n	8001af6 <cdc_acm_poll_out+0x32>
 8001b18:	20000288 	.word	0x20000288

08001b1c <tx_work_handler>:
{
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
 8001b1e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	7d1f      	ldrb	r7, [r3, #20]
{
 8001b26:	b085      	sub	sp, #20
 8001b28:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
 8001b2a:	4638      	mov	r0, r7
 8001b2c:	f003 fead 	bl	800588a <usb_transfer_is_busy>
 8001b30:	4606      	mov	r6, r0
 8001b32:	b9d8      	cbnz	r0, 8001b6c <tx_work_handler+0x50>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
 8001b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3a:	a903      	add	r1, sp, #12
 8001b3c:	f003 fdfa 	bl	8005734 <ring_buf_get_claim>
	if (!len) {
 8001b40:	4604      	mov	r4, r0
 8001b42:	b198      	cbz	r0, 8001b6c <tx_work_handler+0x50>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
 8001b44:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
 8001b46:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
 8001b4a:	bf08      	it	eq
 8001b4c:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	dev_data->tx_ready = false;
 8001b50:	742e      	strb	r6, [r5, #16]
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <tx_work_handler+0x54>)
 8001b56:	9903      	ldr	r1, [sp, #12]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	4638      	mov	r0, r7
 8001b60:	f7ff fe54 	bl	800180c <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
 8001b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b66:	4621      	mov	r1, r4
 8001b68:	f003 fe04 	bl	8005774 <ring_buf_get_finish>
}
 8001b6c:	b005      	add	sp, #20
 8001b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b70:	08001b75 	.word	0x08001b75

08001b74 <cdc_acm_write_cb>:
{
 8001b74:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
 8001b7c:	6813      	ldr	r3, [r2, #0]
{
 8001b7e:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
 8001b80:	b13b      	cbz	r3, 8001b92 <cdc_acm_write_cb+0x1e>
 8001b82:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8001b86:	b123      	cbz	r3, 8001b92 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 8001b88:	4808      	ldr	r0, [pc, #32]	; (8001bac <cdc_acm_write_cb+0x38>)
 8001b8a:	f102 0108 	add.w	r1, r2, #8
 8001b8e:	f005 fa51 	bl	8007034 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
 8001b92:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d006      	beq.n	8001baa <cdc_acm_write_cb+0x36>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
 8001b9c:	f104 0118 	add.w	r1, r4, #24
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <cdc_acm_write_cb+0x38>)
}
 8001ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
 8001ba6:	f005 ba45 	b.w	8007034 <k_work_submit_to_queue>
}
 8001baa:	bd10      	pop	{r4, pc}
 8001bac:	20000288 	.word	0x20000288

08001bb0 <cdc_acm_init>:
{
 8001bb0:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8001bb2:	6904      	ldr	r4, [r0, #16]
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
 8001bbc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8001bc0:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
 8001bc2:	f104 0288 	add.w	r2, r4, #136	; 0x88
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 8001bc6:	b969      	cbnz	r1, 8001be4 <cdc_acm_init+0x34>
	list->head = node;
 8001bc8:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
 8001bcc:	f104 0008 	add.w	r0, r4, #8
 8001bd0:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <cdc_acm_init+0x40>)
 8001bd2:	f005 fa12 	bl	8006ffa <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
 8001bd6:	f104 0018 	add.w	r0, r4, #24
 8001bda:	4906      	ldr	r1, [pc, #24]	; (8001bf4 <cdc_acm_init+0x44>)
 8001bdc:	f005 fa0d 	bl	8006ffa <k_work_init>
}
 8001be0:	2000      	movs	r0, #0
 8001be2:	bd10      	pop	{r4, pc}
	parent->next = child;
 8001be4:	600a      	str	r2, [r1, #0]
	list->tail = node;
 8001be6:	605a      	str	r2, [r3, #4]
}
 8001be8:	e7f0      	b.n	8001bcc <cdc_acm_init+0x1c>
 8001bea:	bf00      	nop
 8001bec:	20000694 	.word	0x20000694
 8001bf0:	080058b5 	.word	0x080058b5
 8001bf4:	08001b1d 	.word	0x08001b1d

08001bf8 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
 8001bf8:	b530      	push	{r4, r5, lr}
	notification.wIndex = 0U;
 8001bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	struct usb_cfg_data * const cfg = (void *)dev->config;
 8001bfe:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8001c00:	6905      	ldr	r5, [r0, #16]
	while (!((volatile uint8_t)dev_data->notification_sent)) {
 8001c02:	4c0d      	ldr	r4, [pc, #52]	; (8001c38 <cdc_acm_send_notification.isra.0+0x40>)
static int cdc_acm_send_notification(const struct device *dev,
 8001c04:	b085      	sub	sp, #20
	notification.wIndex = 0U;
 8001c06:	f242 00a1 	movw	r0, #8353	; 0x20a1
 8001c0a:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
 8001c14:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
 8001c16:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
 8001c1a:	7900      	ldrb	r0, [r0, #4]
 8001c1c:	220a      	movs	r2, #10
 8001c1e:	a901      	add	r1, sp, #4
 8001c20:	f003 fdeb 	bl	80057fa <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
 8001c24:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
 8001c28:	b923      	cbnz	r3, 8001c34 <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f003 fc80 	bl	8005530 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
 8001c30:	3c01      	subs	r4, #1
 8001c32:	d1f7      	bne.n	8001c24 <cdc_acm_send_notification.isra.0+0x2c>
}
 8001c34:	b005      	add	sp, #20
 8001c36:	bd30      	pop	{r4, r5, pc}
 8001c38:	000186a1 	.word	0x000186a1

08001c3c <cdc_acm_read_cb>:
{
 8001c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c3e:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
 8001c40:	f102 062c 	add.w	r6, r2, #44	; 0x2c
	if (size <= 0) {
 8001c44:	1e0a      	subs	r2, r1, #0
{
 8001c46:	4605      	mov	r5, r0
	if (size <= 0) {
 8001c48:	dd1d      	ble.n	8001c86 <cdc_acm_read_cb+0x4a>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
 8001c4a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001c4c:	4631      	mov	r1, r6
 8001c4e:	f003 fd52 	bl	80056f6 <ring_buf_put>
	dev_data->rx_ready = true;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	b13b      	cbz	r3, 8001c6c <cdc_acm_read_cb+0x30>
 8001c5c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8001c60:	b123      	cbz	r3, 8001c6c <cdc_acm_read_cb+0x30>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <cdc_acm_read_cb+0x60>)
 8001c64:	f104 0108 	add.w	r1, r4, #8
 8001c68:	f005 f9e4 	bl	8007034 <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
 8001c6c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
 8001c6e:	684b      	ldr	r3, [r1, #4]
 8001c70:	694a      	ldr	r2, [r1, #20]
 8001c72:	1a9a      	subs	r2, r3, r2
 8001c74:	69cb      	ldr	r3, [r1, #28]
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	2b3f      	cmp	r3, #63	; 0x3f
 8001c7a:	d804      	bhi.n	8001c86 <cdc_acm_read_cb+0x4a>
		dev_data->rx_paused = true;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8001c82:	b002      	add	sp, #8
 8001c84:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <cdc_acm_read_cb+0x64>)
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	9401      	str	r4, [sp, #4]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	4631      	mov	r1, r6
 8001c92:	4628      	mov	r0, r5
 8001c94:	f7ff fdba 	bl	800180c <usb_transfer>
 8001c98:	e7f3      	b.n	8001c82 <cdc_acm_read_cb+0x46>
 8001c9a:	bf00      	nop
 8001c9c:	20000288 	.word	0x20000288
 8001ca0:	08001c3d 	.word	0x08001c3d

08001ca4 <cdc_acm_dev_status_cb>:
{
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
 8001ca8:	4601      	mov	r1, r0
 8001caa:	4824      	ldr	r0, [pc, #144]	; (8001d3c <cdc_acm_dev_status_cb+0x98>)
 8001cac:	f003 fdbd 	bl	800582a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	b380      	cbz	r0, 8001d16 <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
 8001cb4:	4602      	mov	r2, r0
	switch (status) {
 8001cb6:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
 8001cb8:	f852 3984 	ldr.w	r3, [r2], #-132
 8001cbc:	685b      	ldr	r3, [r3, #4]
	switch (status) {
 8001cbe:	2905      	cmp	r1, #5
 8001cc0:	d829      	bhi.n	8001d16 <cdc_acm_dev_status_cb+0x72>
 8001cc2:	e8df f001 	tbb	[pc, r1]
 8001cc6:	2820      	.short	0x2820
 8001cc8:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
 8001ccc:	f814 1c06 	ldrb.w	r1, [r4, #-6]
 8001cd0:	b931      	cbnz	r1, 8001ce0 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	7b18      	ldrb	r0, [r3, #12]
 8001cd6:	f7ff ffb1 	bl	8001c3c <cdc_acm_read_cb>
			dev_data->configured = true;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
 8001ce0:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
 8001ce4:	b9bb      	cbnz	r3, 8001d16 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
 8001cec:	f854 3c84 	ldr.w	r3, [r4, #-132]
 8001cf0:	b18b      	cbz	r3, 8001d16 <cdc_acm_dev_status_cb+0x72>
 8001cf2:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
 8001cf6:	b173      	cbz	r3, 8001d16 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 8001cf8:	f1a4 017c 	sub.w	r1, r4, #124	; 0x7c
 8001cfc:	4810      	ldr	r0, [pc, #64]	; (8001d40 <cdc_acm_dev_status_cb+0x9c>)
}
 8001cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
 8001d02:	f005 b997 	b.w	8007034 <k_work_submit_to_queue>
}
 8001d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7ff bea4 	b.w	8001a58 <cdc_acm_reset_port>
		dev_data->suspended = true;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f804 3c05 	strb.w	r3, [r4, #-5]
}
 8001d16:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
 8001d18:	f814 1c05 	ldrb.w	r1, [r4, #-5]
 8001d1c:	2900      	cmp	r1, #0
 8001d1e:	d0fa      	beq.n	8001d16 <cdc_acm_dev_status_cb+0x72>
			if (dev_data->configured) {
 8001d20:	f814 0c06 	ldrb.w	r0, [r4, #-6]
			dev_data->suspended = false;
 8001d24:	2100      	movs	r1, #0
 8001d26:	f804 1c05 	strb.w	r1, [r4, #-5]
			if (dev_data->configured) {
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d0f3      	beq.n	8001d16 <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	7b18      	ldrb	r0, [r3, #12]
}
 8001d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
 8001d36:	f7ff bf81 	b.w	8001c3c <cdc_acm_read_cb>
 8001d3a:	bf00      	nop
 8001d3c:	20000694 	.word	0x20000694
 8001d40:	20000288 	.word	0x20000288

08001d44 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
 8001d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
 8001d46:	4d09      	ldr	r5, [pc, #36]	; (8001d6c <z_usb_work_q_init+0x28>)
 8001d48:	4909      	ldr	r1, [pc, #36]	; (8001d70 <z_usb_work_q_init+0x2c>)
 8001d4a:	2400      	movs	r4, #0
 8001d4c:	9400      	str	r4, [sp, #0]
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d56:	4628      	mov	r0, r5
 8001d58:	f002 ff0c 	bl	8004b74 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
 8001d5c:	4905      	ldr	r1, [pc, #20]	; (8001d74 <z_usb_work_q_init+0x30>)
 8001d5e:	4628      	mov	r0, r5
 8001d60:	f005 f914 	bl	8006f8c <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
 8001d64:	4620      	mov	r0, r4
 8001d66:	b003      	add	sp, #12
 8001d68:	bd30      	pop	{r4, r5, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000288 	.word	0x20000288
 8001d70:	20000f80 	.word	0x20000f80
 8001d74:	08007a65 	.word	0x08007a65

08001d78 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8001d78:	4901      	ldr	r1, [pc, #4]	; (8001d80 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8001d7a:	2210      	movs	r2, #16
	str	r2, [r1]
 8001d7c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8001d7e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8001d80:	e000ed10 	.word	0xe000ed10

08001d84 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8001d84:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8001d86:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8001d88:	f380 8811 	msr	BASEPRI, r0
	isb
 8001d8c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8001d90:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8001d94:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8001d96:	b662      	cpsie	i
	isb
 8001d98:	f3bf 8f6f 	isb	sy

	bx	lr
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop

08001da0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8001da0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001da2:	2800      	cmp	r0, #0
 8001da4:	db07      	blt.n	8001db6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <arch_irq_enable+0x18>)
 8001da8:	0941      	lsrs	r1, r0, #5
 8001daa:	2301      	movs	r3, #1
 8001dac:	f000 001f 	and.w	r0, r0, #31
 8001db0:	4083      	lsls	r3, r0
 8001db2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8001dbc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	db0c      	blt.n	8001ddc <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	0943      	lsrs	r3, r0, #5
 8001dc4:	4906      	ldr	r1, [pc, #24]	; (8001de0 <arch_irq_disable+0x24>)
 8001dc6:	f000 001f 	and.w	r0, r0, #31
 8001dca:	3320      	adds	r3, #32
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4082      	lsls	r2, r0
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dd8:	f3bf 8f6f 	isb	sy
}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8001de4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001de6:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	bfa8      	it	ge
 8001dea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
 8001dee:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	bfb8      	it	lt
 8001df4:	4b06      	ldrlt	r3, [pc, #24]	; (8001e10 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8001dfa:	bfac      	ite	ge
 8001dfc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	bfb4      	ite	lt
 8001e08:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed14 	.word	0xe000ed14

08001e14 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8001e14:	bf30      	wfi
    b z_SysNmiOnReset
 8001e16:	f7ff bffd 	b.w	8001e14 <z_SysNmiOnReset>
 8001e1a:	bf00      	nop

08001e1c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8001e1e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <z_arm_prep_c+0x44>)
 8001e22:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001e26:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e2c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8001e30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e34:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001e3c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8001e40:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001e44:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8001e48:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8001e4c:	f002 fb44 	bl	80044d8 <z_bss_zero>
	z_data_copy();
 8001e50:	f003 fa14 	bl	800527c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8001e54:	f000 f9ca 	bl	80021ec <z_arm_interrupt_init>
	z_cstart();
 8001e58:	f002 fb82 	bl	8004560 <z_cstart>
 8001e5c:	08000000 	.word	0x08000000
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8001e64:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8001e66:	490a      	ldr	r1, [pc, #40]	; (8001e90 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8001e68:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8001e6a:	6809      	ldr	r1, [r1, #0]
 8001e6c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001e6e:	4909      	ldr	r1, [pc, #36]	; (8001e94 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8001e70:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001e72:	684b      	ldr	r3, [r1, #4]
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	604b      	str	r3, [r1, #4]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f383 8811 	msr	BASEPRI, r3
 8001e80:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8001e84:	6893      	ldr	r3, [r2, #8]
}
 8001e86:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000f20 	.word	0x20000f20
 8001e90:	08007a08 	.word	0x08007a08
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001e98:	4912      	ldr	r1, [pc, #72]	; (8001ee4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8001e9a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8001e9c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8001ea0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8001ea2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8001ea6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001eaa:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8001eac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8001eb0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8001eb4:	4f0c      	ldr	r7, [pc, #48]	; (8001ee8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001eb6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8001eba:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8001ebc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8001ebe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8001ec0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 8001ec2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001ec4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001ec6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8001eca:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8001ecc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8001ece:	f000 f9d1 	bl	8002274 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8001ed2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8001ed6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8001eda:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8001ede:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8001ee2:	4770      	bx	lr
    ldr r1, =_kernel
 8001ee4:	20000f20 	.word	0x20000f20
    ldr v4, =_SCS_ICSR
 8001ee8:	e000ed04 	.word	0xe000ed04

08001eec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8001eec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8001ef0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8001ef2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8001ef6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8001efa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8001efc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8001f00:	2902      	cmp	r1, #2
    beq _oops
 8001f02:	d0ff      	beq.n	8001f04 <_oops>

08001f04 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8001f04:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 8001f06:	f003 fddb 	bl	8005ac0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 8001f0a:	bd01      	pop	{r0, pc}

08001f0c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8001f0c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8001f10:	9b00      	ldr	r3, [sp, #0]
 8001f12:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8001f16:	490a      	ldr	r1, [pc, #40]	; (8001f40 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8001f18:	9b01      	ldr	r3, [sp, #4]
 8001f1a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8001f1e:	9b02      	ldr	r3, [sp, #8]
 8001f20:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8001f24:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f2c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8001f30:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8001f34:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8001f36:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8001f38:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8001f3a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	080055c1 	.word	0x080055c1

08001f44 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8001f44:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <z_check_thread_stack_fail+0x28>)
{
 8001f46:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8001f48:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
 8001f4a:	b170      	cbz	r0, 8001f6a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001f4c:	f113 0f16 	cmn.w	r3, #22
 8001f50:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001f52:	d005      	beq.n	8001f60 <z_check_thread_stack_fail+0x1c>
 8001f54:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d805      	bhi.n	8001f68 <z_check_thread_stack_fail+0x24>
 8001f5c:	4283      	cmp	r3, r0
 8001f5e:	d203      	bcs.n	8001f68 <z_check_thread_stack_fail+0x24>
		return 0;
 8001f60:	4281      	cmp	r1, r0
 8001f62:	bf28      	it	cs
 8001f64:	2000      	movcs	r0, #0
 8001f66:	4770      	bx	lr
 8001f68:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
 8001f6a:	4770      	bx	lr
 8001f6c:	20000f20 	.word	0x20000f20

08001f70 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8001f70:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <arch_switch_to_main_thread+0x28>)
 8001f74:	6098      	str	r0, [r3, #8]
{
 8001f76:	460d      	mov	r5, r1
 8001f78:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8001f7a:	f000 f97b 	bl	8002274 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f385 8809 	msr	PSP, r5
 8001f84:	2100      	movs	r1, #0
 8001f86:	b663      	cpsie	if
 8001f88:	f381 8811 	msr	BASEPRI, r1
 8001f8c:	f3bf 8f6f 	isb	sy
 8001f90:	2200      	movs	r2, #0
 8001f92:	2300      	movs	r3, #0
 8001f94:	f003 fb14 	bl	80055c0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8001f98:	20000f20 	.word	0x20000f20

08001f9c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8001f9c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8001f9e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001fa2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001fa6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8001faa:	4904      	ldr	r1, [pc, #16]	; (8001fbc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8001fac:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8001fae:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001fb0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001fb2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001fb6:	4902      	ldr	r1, [pc, #8]	; (8001fc0 <_isr_wrapper+0x24>)
	bx r1
 8001fb8:	4708      	bx	r1
 8001fba:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8001fbc:	08007424 	.word	0x08007424
	ldr r1, =z_arm_int_exit
 8001fc0:	08001fc5 	.word	0x08001fc5

08001fc4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001fc6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001fc8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8001fca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8001fcc:	d003      	beq.n	8001fd6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8001fce:	4903      	ldr	r1, [pc, #12]	; (8001fdc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001fd4:	600a      	str	r2, [r1, #0]

08001fd6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001fd6:	4770      	bx	lr
	ldr r3, =_kernel
 8001fd8:	20000f20 	.word	0x20000f20
	ldr r1, =_SCS_ICSR
 8001fdc:	e000ed04 	.word	0xe000ed04

08001fe0 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8001fe0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <mem_manage_fault+0x78>)
{
 8001fe4:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8001fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8001fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fec:	0792      	lsls	r2, r2, #30
{
 8001fee:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8001ff0:	d522      	bpl.n	8002038 <mem_manage_fault+0x58>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8001ff2:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8001ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff6:	0614      	lsls	r4, r2, #24
 8001ff8:	d51e      	bpl.n	8002038 <mem_manage_fault+0x58>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
 8001ffa:	b119      	cbz	r1, 8002004 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8001ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8002004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8002006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200a:	4c13      	ldr	r4, [pc, #76]	; (8002058 <mem_manage_fault+0x78>)
 800200c:	f012 0f10 	tst.w	r2, #16
 8002010:	d115      	bne.n	800203e <mem_manage_fault+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002014:	0799      	lsls	r1, r3, #30
 8002016:	d412      	bmi.n	800203e <mem_manage_fault+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8002018:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800201a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <mem_manage_fault+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800201e:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
 8002020:	bf42      	ittt	mi
 8002022:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
 8002024:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
 8002028:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800202a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800202c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8002030:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8002032:	2300      	movs	r3, #0
 8002034:	702b      	strb	r3, [r5, #0]

	return reason;
}
 8002036:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 8002038:	f06f 0015 	mvn.w	r0, #21
 800203c:	e7e2      	b.n	8002004 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800203e:	6863      	ldr	r3, [r4, #4]
 8002040:	051a      	lsls	r2, r3, #20
 8002042:	d5e9      	bpl.n	8002018 <mem_manage_fault+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8002044:	4631      	mov	r1, r6
 8002046:	f7ff ff7d 	bl	8001f44 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 800204a:	2800      	cmp	r0, #0
 800204c:	d0e4      	beq.n	8002018 <mem_manage_fault+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800204e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8002052:	2002      	movs	r0, #2
 8002054:	e7e1      	b.n	800201a <mem_manage_fault+0x3a>
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <bus_fault.constprop.0+0x38>)
 800205e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8002060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8002062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002064:	0592      	lsls	r2, r2, #22
 8002066:	d508      	bpl.n	800207a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8002068:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800206a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800206c:	0412      	lsls	r2, r2, #16
 800206e:	d504      	bpl.n	800207a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8002070:	b118      	cbz	r0, 800207a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8002072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002074:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800207a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800207c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800207e:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8002082:	bf58      	it	pl
 8002084:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8002086:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8002088:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800208a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800208e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8002090:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8002098:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800209a:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <z_arm_fault+0x12c>)
 800209c:	685b      	ldr	r3, [r3, #4]
{
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80020a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a6:	2600      	movs	r6, #0
 80020a8:	f386 8811 	msr	BASEPRI, r6
 80020ac:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80020b0:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
 80020b4:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 80020b8:	d111      	bne.n	80020de <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80020ba:	f002 000c 	and.w	r0, r2, #12
 80020be:	2808      	cmp	r0, #8
 80020c0:	d00d      	beq.n	80020de <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80020c2:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 80020c4:	bf4c      	ite	mi
 80020c6:	460d      	movmi	r5, r1
			*nested_exc = true;
 80020c8:	2601      	movpl	r6, #1
	*recoverable = false;
 80020ca:	2200      	movs	r2, #0
	switch (fault) {
 80020cc:	3b03      	subs	r3, #3
	*recoverable = false;
 80020ce:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d84d      	bhi.n	8002172 <z_arm_fault+0xda>
 80020d6:	e8df f003 	tbb	[pc, r3]
 80020da:	6504      	.short	0x6504
 80020dc:	6d69      	.short	0x6d69
		return NULL;
 80020de:	4635      	mov	r5, r6
 80020e0:	e7f3      	b.n	80020ca <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80020e2:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <z_arm_fault+0x12c>)
 80020e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e6:	0791      	lsls	r1, r2, #30
 80020e8:	d443      	bmi.n	8002172 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	db40      	blt.n	8002172 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80020f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f2:	0052      	lsls	r2, r2, #1
 80020f4:	d53d      	bpl.n	8002172 <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80020f6:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80020f8:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 80020fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002100:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002104:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 8002108:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 800210a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 800210e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002112:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002114:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002118:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800211c:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8002120:	4291      	cmp	r1, r2
 8002122:	d009      	beq.n	8002138 <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 8002124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	b142      	cbz	r2, 800213c <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
 800212a:	f10d 0207 	add.w	r2, sp, #7
 800212e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8002130:	4628      	mov	r0, r5
 8002132:	f7ff ff55 	bl	8001fe0 <mem_manage_fault>
 8002136:	e00a      	b.n	800214e <z_arm_fault+0xb6>
			reason = esf->basic.r0;
 8002138:	682c      	ldr	r4, [r5, #0]
 800213a:	e01b      	b.n	8002174 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 800213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800213e:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
 8002142:	d006      	beq.n	8002152 <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
 8002144:	f10d 0107 	add.w	r1, sp, #7
 8002148:	2001      	movs	r0, #1
 800214a:	f7ff ff87 	bl	800205c <bus_fault.constprop.0>
 800214e:	4604      	mov	r4, r0
 8002150:	e010      	b.n	8002174 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 8002152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002154:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002158:	d30b      	bcc.n	8002172 <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800215a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800215c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800215e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8002160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8002162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8002164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8002166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002168:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800216c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
 8002172:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8002174:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002178:	b993      	cbnz	r3, 80021a0 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800217a:	2220      	movs	r2, #32
 800217c:	4629      	mov	r1, r5
 800217e:	a802      	add	r0, sp, #8
 8002180:	f003 fcd1 	bl	8005b26 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8002184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002186:	b1be      	cbz	r6, 80021b8 <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8002188:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800218c:	b922      	cbnz	r2, 8002198 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800218e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8002192:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002196:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8002198:	a902      	add	r1, sp, #8
 800219a:	4620      	mov	r0, r4
 800219c:	f003 fc8e 	bl	8005abc <z_arm_fatal_error>
}
 80021a0:	b00a      	add	sp, #40	; 0x28
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 80021a4:	f10d 0207 	add.w	r2, sp, #7
 80021a8:	2100      	movs	r1, #0
 80021aa:	e7c1      	b.n	8002130 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
 80021ac:	f10d 0107 	add.w	r1, sp, #7
 80021b0:	2000      	movs	r0, #0
 80021b2:	e7ca      	b.n	800214a <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <z_arm_fault+0x12c>)
 80021b6:	e7d0      	b.n	800215a <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80021b8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	e7e9      	b.n	8002196 <z_arm_fault+0xfe>
 80021c2:	bf00      	nop
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80021c8:	4a02      	ldr	r2, [pc, #8]	; (80021d4 <z_arm_fault_init+0xc>)
 80021ca:	6953      	ldr	r3, [r2, #20]
 80021cc:	f043 0310 	orr.w	r3, r3, #16
 80021d0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80021d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80021dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80021e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80021e2:	4672      	mov	r2, lr
	bl z_arm_fault
 80021e4:	f7ff ff58 	bl	8002098 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80021e8:	bd01      	pop	{r0, pc}
 80021ea:	bf00      	nop

080021ec <z_arm_interrupt_init>:
 80021ec:	4804      	ldr	r0, [pc, #16]	; (8002200 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	2110      	movs	r1, #16
 80021f2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80021f4:	3301      	adds	r3, #1
 80021f6:	2b55      	cmp	r3, #85	; 0x55
 80021f8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80021fc:	d1f9      	bne.n	80021f2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100

08002204 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002204:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8002206:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800220a:	4808      	ldr	r0, [pc, #32]	; (800222c <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 800220c:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
 8002210:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8002212:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8002216:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800221a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 800221c:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800221e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8002222:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8002226:	f7ff fdf9 	bl	8001e1c <z_arm_prep_c>
 800222a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 800222c:	200013c0 	.word	0x200013c0

08002230 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <z_impl_k_thread_abort+0x24>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4283      	cmp	r3, r0
 8002236:	d10b      	bne.n	8002250 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002238:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 800223c:	b143      	cbz	r3, 8002250 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <z_impl_k_thread_abort+0x28>)
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002246:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 8002248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 8002250:	f002 bfa2 	b.w	8005198 <z_thread_abort>
 8002254:	20000f20 	.word	0x20000f20
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <z_arm_configure_static_mpu_regions+0xc>)
 800225e:	4a03      	ldr	r2, [pc, #12]	; (800226c <z_arm_configure_static_mpu_regions+0x10>)
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <z_arm_configure_static_mpu_regions+0x14>)
 8002262:	2101      	movs	r1, #1
 8002264:	f000 b870 	b.w	8002348 <arm_core_mpu_configure_static_mpu_regions>
 8002268:	20010000 	.word	0x20010000
 800226c:	20000000 	.word	0x20000000
 8002270:	080077d4 	.word	0x080077d4

08002274 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8002274:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8002278:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
 800227a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002284:	4618      	mov	r0, r3
 8002286:	2101      	movs	r1, #1
 8002288:	f000 b868 	b.w	800235c <arm_core_mpu_configure_dynamic_mpu_regions>
 800228c:	2000069c 	.word	0x2000069c
 8002290:	150b0000 	.word	0x150b0000

08002294 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8002296:	4e20      	ldr	r6, [pc, #128]	; (8002318 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8002298:	2500      	movs	r5, #0
 800229a:	428d      	cmp	r5, r1
 800229c:	da39      	bge.n	8002312 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
 800229e:	6844      	ldr	r4, [r0, #4]
 80022a0:	b374      	cbz	r4, 8002300 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 80022a2:	b153      	cbz	r3, 80022ba <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 80022a4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 80022a8:	ea14 0f0c 	tst.w	r4, ip
 80022ac:	d12f      	bne.n	800230e <mpu_configure_regions+0x7a>
		&&
 80022ae:	2c1f      	cmp	r4, #31
 80022b0:	d92d      	bls.n	800230e <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
 80022b2:	6807      	ldr	r7, [r0, #0]
		&&
 80022b4:	ea1c 0f07 	tst.w	ip, r7
 80022b8:	d129      	bne.n	800230e <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 80022ba:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 80022bc:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80022be:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80022c2:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
 80022c6:	d91e      	bls.n	8002306 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
 80022c8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80022cc:	d81d      	bhi.n	800230a <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80022ce:	3c01      	subs	r4, #1
 80022d0:	fab4 f484 	clz	r4, r4
 80022d4:	f1c4 041f 	rsb	r4, r4, #31
 80022d8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80022da:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80022de:	ea4c 0c04 	orr.w	ip, ip, r4
 80022e2:	d814      	bhi.n	800230e <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80022e4:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
 80022e8:	4314      	orrs	r4, r2
 80022ea:	f044 0410 	orr.w	r4, r4, #16
 80022ee:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80022f2:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80022f6:	f04c 0401 	orr.w	r4, ip, #1
 80022fa:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 80022fe:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
 8002300:	3501      	adds	r5, #1
 8002302:	300c      	adds	r0, #12
 8002304:	e7c9      	b.n	800229a <mpu_configure_regions+0x6>
		return REGION_32B;
 8002306:	2408      	movs	r4, #8
 8002308:	e7e7      	b.n	80022da <mpu_configure_regions+0x46>
		return REGION_4G;
 800230a:	243e      	movs	r4, #62	; 0x3e
 800230c:	e7e5      	b.n	80022da <mpu_configure_regions+0x46>
			return -EINVAL;
 800230e:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
 8002312:	4610      	mov	r0, r2
 8002314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <arm_core_mpu_enable+0x14>)
 800231e:	2205      	movs	r2, #5
 8002320:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8002324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002328:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002334:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8002338:	4b02      	ldr	r3, [pc, #8]	; (8002344 <arm_core_mpu_disable+0x10>)
 800233a:	2200      	movs	r2, #0
 800233c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8002348:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 800234a:	4c03      	ldr	r4, [pc, #12]	; (8002358 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 800234c:	2301      	movs	r3, #1
 800234e:	7822      	ldrb	r2, [r4, #0]
 8002350:	f7ff ffa0 	bl	8002294 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8002354:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8002356:	bd10      	pop	{r4, pc}
 8002358:	20000f6e 	.word	0x20000f6e

0800235c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
 800235c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
 8002360:	2300      	movs	r3, #0
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	f7ff ff96 	bl	8002294 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8002368:	f110 0f16 	cmn.w	r0, #22
 800236c:	d002      	beq.n	8002374 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800236e:	4a06      	ldr	r2, [pc, #24]	; (8002388 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8002370:	2807      	cmp	r0, #7
 8002372:	dd00      	ble.n	8002376 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8002374:	bd08      	pop	{r3, pc}
 8002376:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 800237a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800237e:	3001      	adds	r0, #1
 8002380:	e7f6      	b.n	8002370 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
 8002382:	bf00      	nop
 8002384:	20000f6e 	.word	0x20000f6e
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800238c:	4914      	ldr	r1, [pc, #80]	; (80023e0 <z_arm_mpu_init+0x54>)
 800238e:	6808      	ldr	r0, [r1, #0]
 8002390:	2808      	cmp	r0, #8
{
 8002392:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8002394:	d821      	bhi.n	80023da <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8002396:	f7ff ffcd 	bl	8002334 <arm_core_mpu_disable>
 800239a:	4c12      	ldr	r4, [pc, #72]	; (80023e4 <z_arm_mpu_init+0x58>)
 800239c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800239e:	2200      	movs	r2, #0
 80023a0:	4290      	cmp	r0, r2
 80023a2:	f101 010c 	add.w	r1, r1, #12
 80023a6:	d105      	bne.n	80023b4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <z_arm_mpu_init+0x5c>)
 80023aa:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80023ac:	f7ff ffb6 	bl	800231c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80023b0:	2000      	movs	r0, #0
}
 80023b2:	bd10      	pop	{r4, pc}
 80023b4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80023b8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80023bc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80023c6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80023ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80023d6:	3201      	adds	r2, #1
 80023d8:	e7e2      	b.n	80023a0 <z_arm_mpu_init+0x14>
		return -1;
 80023da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023de:	e7e8      	b.n	80023b2 <z_arm_mpu_init+0x26>
 80023e0:	080077e0 	.word	0x080077e0
 80023e4:	e000ed00 	.word	0xe000ed00
 80023e8:	20000f6e 	.word	0x20000f6e

080023ec <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 80023ec:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <__stdout_hook_install+0x8>)
 80023ee:	6018      	str	r0, [r3, #0]
}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	200000e8 	.word	0x200000e8

080023f8 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 80023f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80023fc:	4f0d      	ldr	r7, [pc, #52]	; (8002434 <__stm32_exti_isr.isra.0+0x3c>)
 80023fe:	4604      	mov	r4, r0
 8002400:	460e      	mov	r6, r1
 8002402:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002404:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8002408:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 800240c:	42b4      	cmp	r4, r6
 800240e:	db01      	blt.n	8002414 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8002410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002414:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002416:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800241a:	ea33 0202 	bics.w	r2, r3, r2
 800241e:	d107      	bne.n	8002430 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8002420:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8002422:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8002426:	b11b      	cbz	r3, 8002430 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8002428:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 800242c:	4620      	mov	r0, r4
 800242e:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8002430:	3401      	adds	r4, #1
 8002432:	e7eb      	b.n	800240c <__stm32_exti_isr.isra.0+0x14>
 8002434:	40013c00 	.word	0x40013c00

08002438 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 800243a:	2301      	movs	r3, #1
 800243c:	6811      	ldr	r1, [r2, #0]
 800243e:	4083      	lsls	r3, r0
 8002440:	430b      	orrs	r3, r1
 8002442:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <stm32_exti_enable+0x18>)
 8002446:	5618      	ldrsb	r0, [r3, r0]
 8002448:	f7ff bcaa 	b.w	8001da0 <arch_irq_enable>
 800244c:	40013c00 	.word	0x40013c00
 8002450:	08007a9b 	.word	0x08007a9b

08002454 <stm32_exti_disable>:
	if (line < 32) {
 8002454:	281f      	cmp	r0, #31
 8002456:	dc06      	bgt.n	8002466 <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002458:	4903      	ldr	r1, [pc, #12]	; (8002468 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800245a:	2201      	movs	r2, #1
 800245c:	680b      	ldr	r3, [r1, #0]
 800245e:	4082      	lsls	r2, r0
 8002460:	ea23 0302 	bic.w	r3, r3, r2
 8002464:	600b      	str	r3, [r1, #0]
}
 8002466:	4770      	bx	lr
 8002468:	40013c00 	.word	0x40013c00

0800246c <stm32_exti_trigger>:
	switch (trigger) {
 800246c:	2903      	cmp	r1, #3
 800246e:	d82a      	bhi.n	80024c6 <stm32_exti_trigger+0x5a>
 8002470:	e8df f001 	tbb	[pc, r1]
 8002474:	1f140e02 	.word	0x1f140e02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <stm32_exti_trigger+0x5c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800247a:	2201      	movs	r2, #1
 800247c:	6899      	ldr	r1, [r3, #8]
 800247e:	4082      	lsls	r2, r0
 8002480:	ea21 0102 	bic.w	r1, r1, r2
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002484:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002486:	68d9      	ldr	r1, [r3, #12]
 8002488:	ea21 0202 	bic.w	r2, r1, r2
 800248c:	60da      	str	r2, [r3, #12]
}
 800248e:	4770      	bx	lr
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8002492:	2201      	movs	r2, #1
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	4082      	lsls	r2, r0
 8002498:	4311      	orrs	r1, r2
 800249a:	e7f3      	b.n	8002484 <stm32_exti_trigger+0x18>
  SET_BIT(EXTI->FTSR, ExtiLine);
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <stm32_exti_trigger+0x5c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800249e:	2201      	movs	r2, #1
 80024a0:	68d9      	ldr	r1, [r3, #12]
 80024a2:	4082      	lsls	r2, r0
 80024a4:	4311      	orrs	r1, r2
 80024a6:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80024a8:	6899      	ldr	r1, [r3, #8]
 80024aa:	ea21 0202 	bic.w	r2, r1, r2
 80024ae:	609a      	str	r2, [r3, #8]
}
 80024b0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80024b2:	2301      	movs	r3, #1
 80024b4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <stm32_exti_trigger+0x5c>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4302      	orrs	r2, r0
 80024be:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	4310      	orrs	r0, r2
 80024c4:	60d8      	str	r0, [r3, #12]
}
 80024c6:	4770      	bx	lr
 80024c8:	40013c00 	.word	0x40013c00

080024cc <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 80024cc:	b510      	push	{r4, lr}
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <stm32_exti_set_callback+0x20>)
{
 80024d0:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 80024d2:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80024d6:	b928      	cbnz	r0, 80024e4 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80024d8:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 80024dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80024e0:	605a      	str	r2, [r3, #4]

	return 0;
}
 80024e2:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80024e4:	f06f 000f 	mvn.w	r0, #15
 80024e8:	e7fb      	b.n	80024e2 <stm32_exti_set_callback+0x16>
 80024ea:	bf00      	nop
 80024ec:	200006a8 	.word	0x200006a8

080024f0 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *const dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <stm32_exti_unset_callback+0x10>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80024f8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80024fc:	605a      	str	r2, [r3, #4]
}
 80024fe:	4770      	bx	lr
 8002500:	200006a8 	.word	0x200006a8

08002504 <usb_dc_stm32_get_ep_state>:

static struct usb_dc_stm32_ep_state *usb_dc_stm32_get_ep_state(uint8_t ep)
{
	struct usb_dc_stm32_ep_state *ep_state_base;

	if (USB_EP_GET_IDX(ep) >= USB_NUM_BIDIR_ENDPOINTS) {
 8002504:	f020 0280 	bic.w	r2, r0, #128	; 0x80
 8002508:	2a03      	cmp	r2, #3
 800250a:	d80b      	bhi.n	8002524 <usb_dc_stm32_get_ep_state+0x20>
		return NULL;
	}

	if (USB_EP_DIR_IS_OUT(ep)) {
		ep_state_base = usb_dc_stm32_state.out_ep_state;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <usb_dc_stm32_get_ep_state+0x24>)
 800250e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002512:	f1a3 0190 	sub.w	r1, r3, #144	; 0x90
 8002516:	bf14      	ite	ne
 8002518:	4618      	movne	r0, r3
 800251a:	4608      	moveq	r0, r1
	} else {
		ep_state_base = usb_dc_stm32_state.in_ep_state;
	}

	return ep_state_base + USB_EP_GET_IDX(ep);
 800251c:	2324      	movs	r3, #36	; 0x24
 800251e:	fb03 0002 	mla	r0, r3, r2, r0
 8002522:	4770      	bx	lr
		return NULL;
 8002524:	2000      	movs	r0, #0
}
 8002526:	4770      	bx	lr
 8002528:	20000d00 	.word	0x20000d00

0800252c <usb_dc_stm32_isr>:

static void usb_dc_stm32_isr(const void *arg)
{
	HAL_PCD_IRQHandler(&usb_dc_stm32_state.pcd);
 800252c:	4801      	ldr	r0, [pc, #4]	; (8002534 <usb_dc_stm32_isr+0x8>)
 800252e:	f001 b899 	b.w	8003664 <HAL_PCD_IRQHandler>
 8002532:	bf00      	nop
 8002534:	20000760 	.word	0x20000760

08002538 <usb_dc_attach>:
}

/* Zephyr USB device controller API implementation */

int usb_dc_attach(void)
{
 8002538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct stm32_pclken pclken = {
 800253a:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <usb_dc_attach+0x100>)
 800253c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002540:	466f      	mov	r7, sp
 8002542:	e887 0003 	stmia.w	r7, {r0, r1}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8002546:	4c3d      	ldr	r4, [pc, #244]	; (800263c <usb_dc_attach+0x104>)
 8002548:	4620      	mov	r0, r4
 800254a:	f004 fce3 	bl	8006f14 <z_device_is_ready>
	if (!device_is_ready(clk)) {
 800254e:	b920      	cbnz	r0, 800255a <usb_dc_attach+0x22>
		return -ENODEV;
 8002550:	f06f 0612 	mvn.w	r6, #18
	LL_PWR_EnableVddUSB();
#endif /* defined(LL_APB1_GRP1_PERIPH_PWR) */
#endif /* PWR_CR2_USV */

	return 0;
}
 8002554:	4630      	mov	r0, r6
 8002556:	b003      	add	sp, #12
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800255a:	68a3      	ldr	r3, [r4, #8]
 800255c:	4639      	mov	r1, r7
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4620      	mov	r0, r4
 8002562:	4798      	blx	r3
	if (clock_control_on(clk, (clock_control_subsys_t *)&pclken) != 0) {
 8002564:	4606      	mov	r6, r0
 8002566:	b110      	cbz	r0, 800256e <usb_dc_attach+0x36>
		return -EIO;
 8002568:	f06f 0604 	mvn.w	r6, #4
 800256c:	e7f2      	b.n	8002554 <usb_dc_attach+0x1c>
	usb_dc_stm32_state.pcd.Instance = USB_OTG_FS;
 800256e:	4d34      	ldr	r5, [pc, #208]	; (8002640 <usb_dc_attach+0x108>)
	if (!strncmp(USB_MAXIMUM_SPEED, "high-speed", 10)) {
 8002570:	4834      	ldr	r0, [pc, #208]	; (8002644 <usb_dc_attach+0x10c>)
	usb_dc_stm32_state.pcd.Init.dev_endpoints = USB_NUM_BIDIR_ENDPOINTS;
 8002572:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002576:	2304      	movs	r3, #4
 8002578:	e9c5 1300 	strd	r1, r3, [r5]
	if (!strncmp(USB_MAXIMUM_SPEED, "high-speed", 10)) {
 800257c:	220a      	movs	r2, #10
 800257e:	4932      	ldr	r1, [pc, #200]	; (8002648 <usb_dc_attach+0x110>)
 8002580:	f003 fabd 	bl	8005afe <strncmp>
 8002584:	2800      	cmp	r0, #0
 8002586:	d054      	beq.n	8002632 <usb_dc_attach+0xfa>
	} else if (!strncmp(USB_MAXIMUM_SPEED, "full-speed", 10)) {
 8002588:	492e      	ldr	r1, [pc, #184]	; (8002644 <usb_dc_attach+0x10c>)
 800258a:	220a      	movs	r2, #10
 800258c:	4608      	mov	r0, r1
 800258e:	f003 fab6 	bl	8005afe <strncmp>
		speed = USB_OTG_SPEED_HIGH_IN_FULL;
 8002592:	2800      	cmp	r0, #0
 8002594:	bf14      	ite	ne
 8002596:	2303      	movne	r3, #3
 8002598:	2301      	moveq	r3, #1
	usb_dc_stm32_state.pcd.Init.vbus_sensing_enable = DISABLE;
 800259a:	2400      	movs	r4, #0
	usb_dc_stm32_state.pcd.Init.speed = usb_dc_stm32_get_maximum_speed();
 800259c:	60eb      	str	r3, [r5, #12]
	usb_dc_stm32_state.pcd.Init.ep0_mps = USB_OTG_MAX_EP0_SIZE;
 800259e:	2202      	movs	r2, #2
 80025a0:	2340      	movs	r3, #64	; 0x40
 80025a2:	e9c5 3205 	strd	r3, r2, [r5, #20]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 80025a6:	4829      	ldr	r0, [pc, #164]	; (800264c <usb_dc_attach+0x114>)
	usb_dc_stm32_state.pcd.Init.vbus_sensing_enable = DISABLE;
 80025a8:	62ec      	str	r4, [r5, #44]	; 0x2c
 80025aa:	463a      	mov	r2, r7
 80025ac:	4621      	mov	r1, r4
	usb_dc_stm32_state.pcd.Init.dma_enable = DISABLE;
 80025ae:	612c      	str	r4, [r5, #16]
 80025b0:	f004 f856 	bl	8006660 <pinctrl_lookup_state>
	if (ret < 0) {
 80025b4:	42a0      	cmp	r0, r4
 80025b6:	db05      	blt.n	80025c4 <usb_dc_attach+0x8c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 80025b8:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80025ba:	4622      	mov	r2, r4
 80025bc:	7919      	ldrb	r1, [r3, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	f000 ffde 	bl	8003580 <pinctrl_configure_pins>
	status = HAL_PCD_Init(&usb_dc_stm32_state.pcd);
 80025c4:	481e      	ldr	r0, [pc, #120]	; (8002640 <usb_dc_attach+0x108>)
 80025c6:	f004 f862 	bl	800668e <HAL_PCD_Init>
	if (status != HAL_OK) {
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d1cc      	bne.n	8002568 <usb_dc_attach+0x30>
	status = HAL_PCD_Stop(&usb_dc_stm32_state.pcd);
 80025ce:	481c      	ldr	r0, [pc, #112]	; (8002640 <usb_dc_attach+0x108>)
 80025d0:	f004 f8ff 	bl	80067d2 <HAL_PCD_Stop>
	if (status != HAL_OK) {
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d1c7      	bne.n	8002568 <usb_dc_attach+0x30>
	status = HAL_PCD_Start(&usb_dc_stm32_state.pcd);
 80025d8:	4819      	ldr	r0, [pc, #100]	; (8002640 <usb_dc_attach+0x108>)
 80025da:	f004 f8da 	bl	8006792 <HAL_PCD_Start>
	if (status != HAL_OK) {
 80025de:	4604      	mov	r4, r0
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d1c1      	bne.n	8002568 <usb_dc_attach+0x30>
	usb_dc_stm32_state.out_ep_state[EP0_IDX].ep_mps = EP0_MPS;
 80025e4:	2140      	movs	r1, #64	; 0x40
	usb_dc_stm32_state.out_ep_state[EP0_IDX].ep_type = EP_TYPE_CTRL;
 80025e6:	f885 0514 	strb.w	r0, [r5, #1300]	; 0x514
	usb_dc_stm32_state.in_ep_state[EP0_IDX].ep_type = EP_TYPE_CTRL;
 80025ea:	f885 05a4 	strb.w	r0, [r5, #1444]	; 0x5a4
	usb_dc_stm32_state.out_ep_state[EP0_IDX].ep_mps = EP0_MPS;
 80025ee:	f8a5 1510 	strh.w	r1, [r5, #1296]	; 0x510
	usb_dc_stm32_state.in_ep_state[EP0_IDX].ep_mps = EP0_MPS;
 80025f2:	f8a5 15a0 	strh.w	r1, [r5, #1440]	; 0x5a0
	HAL_PCDEx_SetRxFiFo(&usb_dc_stm32_state.pcd, FIFO_EP_WORDS);
 80025f6:	4812      	ldr	r0, [pc, #72]	; (8002640 <usb_dc_attach+0x108>)
 80025f8:	4d15      	ldr	r5, [pc, #84]	; (8002650 <usb_dc_attach+0x118>)
 80025fa:	f004 fa75 	bl	8006ae8 <HAL_PCDEx_SetRxFiFo>
		HAL_PCDEx_SetTxFiFo(&usb_dc_stm32_state.pcd, i,
 80025fe:	f2a5 57b4 	subw	r7, r5, #1460	; 0x5b4
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	b2e1      	uxtb	r1, r4
 8002606:	4638      	mov	r0, r7
 8002608:	f004 fa4f 	bl	8006aaa <HAL_PCDEx_SetTxFiFo>
	return z_impl_k_sem_init(sem, initial_count, limit);
 800260c:	2201      	movs	r2, #1
 800260e:	4628      	mov	r0, r5
 8002610:	4611      	mov	r1, r2
	for (i = 0U; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
 8002612:	3401      	adds	r4, #1
 8002614:	f004 fcd3 	bl	8006fbe <z_impl_k_sem_init>
 8002618:	2c04      	cmp	r4, #4
 800261a:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800261e:	d1f0      	bne.n	8002602 <usb_dc_attach+0xca>
	IRQ_CONNECT(USB_IRQ, USB_IRQ_PRI,
 8002620:	2200      	movs	r2, #0
 8002622:	4611      	mov	r1, r2
 8002624:	2043      	movs	r0, #67	; 0x43
 8002626:	f7ff fbdd 	bl	8001de4 <z_arm_irq_priority_set>
	irq_enable(USB_IRQ);
 800262a:	2043      	movs	r0, #67	; 0x43
 800262c:	f7ff fbb8 	bl	8001da0 <arch_irq_enable>
	return 0;
 8002630:	e790      	b.n	8002554 <usb_dc_attach+0x1c>
		speed = USB_OTG_SPEED_HIGH;
 8002632:	4633      	mov	r3, r6
 8002634:	e7b1      	b.n	800259a <usb_dc_attach+0x62>
 8002636:	bf00      	nop
 8002638:	08007748 	.word	0x08007748
 800263c:	080072ec 	.word	0x080072ec
 8002640:	20000760 	.word	0x20000760
 8002644:	08007abd 	.word	0x08007abd
 8002648:	08007ab2 	.word	0x08007ab2
 800264c:	08007800 	.word	0x08007800
 8002650:	20000d14 	.word	0x20000d14

08002654 <usb_dc_set_status_callback>:

void usb_dc_set_status_callback(const usb_dc_status_callback cb)
{
	LOG_DBG("");

	usb_dc_stm32_state.status_cb = cb;
 8002654:	4b01      	ldr	r3, [pc, #4]	; (800265c <usb_dc_set_status_callback+0x8>)
 8002656:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
 800265a:	4770      	bx	lr
 800265c:	20000760 	.word	0x20000760

08002660 <usb_dc_set_address>:

int usb_dc_set_address(const uint8_t addr)
{
 8002660:	4601      	mov	r1, r0
 8002662:	b508      	push	{r3, lr}
	HAL_StatusTypeDef status;

	LOG_DBG("addr %u (0x%02x)", addr, addr);

	status = HAL_PCD_SetAddress(&usb_dc_stm32_state.pcd, addr);
 8002664:	4804      	ldr	r0, [pc, #16]	; (8002678 <usb_dc_set_address+0x18>)
 8002666:	f004 f8db 	bl	8006820 <HAL_PCD_SetAddress>
		LOG_ERR("HAL_PCD_SetAddress failed(0x%02x), %d", addr,
			(int)status);
		return -EIO;
	}

	return 0;
 800266a:	2800      	cmp	r0, #0
}
 800266c:	bf14      	ite	ne
 800266e:	f06f 0004 	mvnne.w	r0, #4
 8002672:	2000      	moveq	r0, #0
 8002674:	bd08      	pop	{r3, pc}
 8002676:	bf00      	nop
 8002678:	20000760 	.word	0x20000760

0800267c <usb_dc_ep_start_read>:

int usb_dc_ep_start_read(uint8_t ep, uint8_t *data, uint32_t max_data_len)
{
 800267c:	b508      	push	{r3, lr}
 800267e:	4613      	mov	r3, r2
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x, len %u", ep, max_data_len);

	/* we flush EP0_IN by doing a 0 length receive on it */
	if (!USB_EP_DIR_IS_OUT(ep) && (ep != EP0_IN || max_data_len)) {
 8002680:	0602      	lsls	r2, r0, #24
{
 8002682:	4601      	mov	r1, r0
	if (!USB_EP_DIR_IS_OUT(ep) && (ep != EP0_IN || max_data_len)) {
 8002684:	d505      	bpl.n	8002692 <usb_dc_ep_start_read+0x16>
 8002686:	2880      	cmp	r0, #128	; 0x80
 8002688:	d100      	bne.n	800268c <usb_dc_ep_start_read+0x10>
 800268a:	b12b      	cbz	r3, 8002698 <usb_dc_ep_start_read+0x1c>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
 800268c:	f06f 0015 	mvn.w	r0, #21
 8002690:	e010      	b.n	80026b4 <usb_dc_ep_start_read+0x38>
	}

	if (max_data_len > EP_MPS) {
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	bf28      	it	cs
 8002696:	2340      	movcs	r3, #64	; 0x40
		max_data_len = EP_MPS;
	}

	status = HAL_PCD_EP_Receive(&usb_dc_stm32_state.pcd, ep,
				    usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 8002698:	f021 0280 	bic.w	r2, r1, #128	; 0x80
 800269c:	4806      	ldr	r0, [pc, #24]	; (80026b8 <usb_dc_ep_start_read+0x3c>)
 800269e:	0192      	lsls	r2, r2, #6
 80026a0:	f502 62c6 	add.w	r2, r2, #1584	; 0x630
	status = HAL_PCD_EP_Receive(&usb_dc_stm32_state.pcd, ep,
 80026a4:	4402      	add	r2, r0
 80026a6:	f004 f936 	bl	8006916 <HAL_PCD_EP_Receive>
		LOG_ERR("HAL_PCD_EP_Receive failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	return 0;
 80026aa:	2800      	cmp	r0, #0
 80026ac:	bf14      	ite	ne
 80026ae:	f06f 0004 	mvnne.w	r0, #4
 80026b2:	2000      	moveq	r0, #0
}
 80026b4:	bd08      	pop	{r3, pc}
 80026b6:	bf00      	nop
 80026b8:	20000760 	.word	0x20000760

080026bc <usb_dc_ep_get_read_count>:

int usb_dc_ep_get_read_count(uint8_t ep, uint32_t *read_bytes)
{
	if (!USB_EP_DIR_IS_OUT(ep) || !read_bytes) {
 80026bc:	0603      	lsls	r3, r0, #24
{
 80026be:	b510      	push	{r4, lr}
 80026c0:	460c      	mov	r4, r1
	if (!USB_EP_DIR_IS_OUT(ep) || !read_bytes) {
 80026c2:	d407      	bmi.n	80026d4 <usb_dc_ep_get_read_count+0x18>
 80026c4:	b131      	cbz	r1, 80026d4 <usb_dc_ep_get_read_count+0x18>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
	}

	*read_bytes = HAL_PCD_EP_GetRxCount(&usb_dc_stm32_state.pcd, ep);
 80026c6:	4601      	mov	r1, r0
 80026c8:	4804      	ldr	r0, [pc, #16]	; (80026dc <usb_dc_ep_get_read_count+0x20>)
 80026ca:	f004 f948 	bl	800695e <HAL_PCD_EP_GetRxCount>
 80026ce:	6020      	str	r0, [r4, #0]

	return 0;
 80026d0:	2000      	movs	r0, #0
}
 80026d2:	bd10      	pop	{r4, pc}
		return -EINVAL;
 80026d4:	f06f 0015 	mvn.w	r0, #21
 80026d8:	e7fb      	b.n	80026d2 <usb_dc_ep_get_read_count+0x16>
 80026da:	bf00      	nop
 80026dc:	20000760 	.word	0x20000760

080026e0 <usb_dc_ep_set_stall>:

	return 0;
}

int usb_dc_ep_set_stall(const uint8_t ep)
{
 80026e0:	b538      	push	{r3, r4, r5, lr}
 80026e2:	4605      	mov	r5, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80026e4:	f7ff ff0e 	bl	8002504 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 80026e8:	4604      	mov	r4, r0
 80026ea:	b138      	cbz	r0, 80026fc <usb_dc_ep_set_stall+0x1c>
		return -EINVAL;
	}

	status = HAL_PCD_EP_SetStall(&usb_dc_stm32_state.pcd, ep);
 80026ec:	4806      	ldr	r0, [pc, #24]	; (8002708 <usb_dc_ep_set_stall+0x28>)
 80026ee:	4629      	mov	r1, r5
 80026f0:	f004 f95d 	bl	80069ae <HAL_PCD_EP_SetStall>
	if (status != HAL_OK) {
 80026f4:	b928      	cbnz	r0, 8002702 <usb_dc_ep_set_stall+0x22>
		LOG_ERR("HAL_PCD_EP_SetStall failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	ep_state->ep_stalled = 1U;
 80026f6:	2301      	movs	r3, #1
 80026f8:	7163      	strb	r3, [r4, #5]

	return 0;
}
 80026fa:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 80026fc:	f06f 0015 	mvn.w	r0, #21
 8002700:	e7fb      	b.n	80026fa <usb_dc_ep_set_stall+0x1a>
		return -EIO;
 8002702:	f06f 0004 	mvn.w	r0, #4
 8002706:	e7f8      	b.n	80026fa <usb_dc_ep_set_stall+0x1a>
 8002708:	20000760 	.word	0x20000760

0800270c <usb_dc_ep_clear_stall>:

int usb_dc_ep_clear_stall(const uint8_t ep)
{
 800270c:	b538      	push	{r3, r4, r5, lr}
 800270e:	4605      	mov	r5, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8002710:	f7ff fef8 	bl	8002504 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 8002714:	4604      	mov	r4, r0
 8002716:	b138      	cbz	r0, 8002728 <usb_dc_ep_clear_stall+0x1c>
		return -EINVAL;
	}

	status = HAL_PCD_EP_ClrStall(&usb_dc_stm32_state.pcd, ep);
 8002718:	4806      	ldr	r0, [pc, #24]	; (8002734 <usb_dc_ep_clear_stall+0x28>)
 800271a:	4629      	mov	r1, r5
 800271c:	f004 f97f 	bl	8006a1e <HAL_PCD_EP_ClrStall>
	if (status != HAL_OK) {
 8002720:	b928      	cbnz	r0, 800272e <usb_dc_ep_clear_stall+0x22>
		LOG_ERR("HAL_PCD_EP_ClrStall failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	ep_state->ep_stalled = 0U;
 8002722:	7160      	strb	r0, [r4, #5]
	ep_state->read_count = 0U;
 8002724:	60e0      	str	r0, [r4, #12]

	return 0;
}
 8002726:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8002728:	f06f 0015 	mvn.w	r0, #21
 800272c:	e7fb      	b.n	8002726 <usb_dc_ep_clear_stall+0x1a>
		return -EIO;
 800272e:	f06f 0004 	mvn.w	r0, #4
 8002732:	e7f8      	b.n	8002726 <usb_dc_ep_clear_stall+0x1a>
 8002734:	20000760 	.word	0x20000760

08002738 <usb_dc_ep_enable>:

	return 0;
}

int usb_dc_ep_enable(const uint8_t ep)
{
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 800273c:	f7ff fee2 	bl	8002504 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 8002740:	b1a0      	cbz	r0, 800276c <usb_dc_ep_enable+0x34>
	}

	LOG_DBG("HAL_PCD_EP_Open(0x%02x, %u, %u)", ep, ep_state->ep_mps,
		ep_state->ep_type);

	status = HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, ep,
 8002742:	4d0d      	ldr	r5, [pc, #52]	; (8002778 <usb_dc_ep_enable+0x40>)
 8002744:	7903      	ldrb	r3, [r0, #4]
 8002746:	8802      	ldrh	r2, [r0, #0]
 8002748:	4621      	mov	r1, r4
 800274a:	4628      	mov	r0, r5
 800274c:	f004 f87c 	bl	8006848 <HAL_PCD_EP_Open>
				 ep_state->ep_mps, ep_state->ep_type);
	if (status != HAL_OK) {
 8002750:	b978      	cbnz	r0, 8002772 <usb_dc_ep_enable+0x3a>
		LOG_ERR("HAL_PCD_EP_Open failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	if (USB_EP_DIR_IS_OUT(ep) && ep != EP0_OUT) {
 8002752:	b263      	sxtb	r3, r4
 8002754:	2b00      	cmp	r3, #0
 8002756:	dd0b      	ble.n	8002770 <usb_dc_ep_enable+0x38>
		return usb_dc_ep_start_read(ep,
					  usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 8002758:	2240      	movs	r2, #64	; 0x40
 800275a:	fb02 5104 	mla	r1, r2, r4, r5
		return usb_dc_ep_start_read(ep,
 800275e:	4620      	mov	r0, r4
 8002760:	f501 61c6 	add.w	r1, r1, #1584	; 0x630
					  EP_MPS);
	}

	return 0;
}
 8002764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return usb_dc_ep_start_read(ep,
 8002768:	f7ff bf88 	b.w	800267c <usb_dc_ep_start_read>
		return -EINVAL;
 800276c:	f06f 0015 	mvn.w	r0, #21
}
 8002770:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
 8002772:	f06f 0004 	mvn.w	r0, #4
 8002776:	e7fb      	b.n	8002770 <usb_dc_ep_enable+0x38>
 8002778:	20000760 	.word	0x20000760

0800277c <usb_dc_ep_disable>:

int usb_dc_ep_disable(const uint8_t ep)
{
 800277c:	b510      	push	{r4, lr}
 800277e:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8002780:	f7ff fec0 	bl	8002504 <usb_dc_stm32_get_ep_state>
	HAL_StatusTypeDef status;

	LOG_DBG("ep 0x%02x", ep);

	if (!ep_state) {
 8002784:	b148      	cbz	r0, 800279a <usb_dc_ep_disable+0x1e>
		return -EINVAL;
	}

	status = HAL_PCD_EP_Close(&usb_dc_stm32_state.pcd, ep);
 8002786:	4806      	ldr	r0, [pc, #24]	; (80027a0 <usb_dc_ep_disable+0x24>)
 8002788:	4621      	mov	r1, r4
 800278a:	f004 f895 	bl	80068b8 <HAL_PCD_EP_Close>
		LOG_ERR("HAL_PCD_EP_Close failed(0x%02x), %d", ep,
			(int)status);
		return -EIO;
	}

	return 0;
 800278e:	2800      	cmp	r0, #0
 8002790:	bf14      	ite	ne
 8002792:	f06f 0004 	mvnne.w	r0, #4
 8002796:	2000      	moveq	r0, #0
}
 8002798:	bd10      	pop	{r4, pc}
		return -EINVAL;
 800279a:	f06f 0015 	mvn.w	r0, #21
 800279e:	e7fb      	b.n	8002798 <usb_dc_ep_disable+0x1c>
 80027a0:	20000760 	.word	0x20000760

080027a4 <usb_dc_ep_write>:

int usb_dc_ep_write(const uint8_t ep, const uint8_t *const data,
		    const uint32_t data_len, uint32_t * const ret_bytes)
{
 80027a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a8:	4606      	mov	r6, r0
 80027aa:	4689      	mov	r9, r1
 80027ac:	4615      	mov	r5, r2
 80027ae:	4698      	mov	r8, r3
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80027b0:	f7ff fea8 	bl	8002504 <usb_dc_stm32_get_ep_state>
	uint32_t len = data_len;
	int ret = 0;

	LOG_DBG("ep 0x%02x, len %u", ep, data_len);

	if (!ep_state || !USB_EP_DIR_IS_IN(ep)) {
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d03e      	beq.n	8002836 <usb_dc_ep_write+0x92>
 80027b8:	0633      	lsls	r3, r6, #24
 80027ba:	d53c      	bpl.n	8002836 <usb_dc_ep_write+0x92>
		LOG_ERR("invalid ep 0x%02x", ep);
		return -EINVAL;
	}

	ret = k_sem_take(&ep_state->write_sem, K_NO_WAIT);
 80027bc:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_sem_take(sem, timeout);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2300      	movs	r3, #0
 80027c4:	4638      	mov	r0, r7
 80027c6:	f002 f8b7 	bl	8004938 <z_impl_k_sem_take>
	if (ret) {
 80027ca:	4604      	mov	r4, r0
 80027cc:	bbb0      	cbnz	r0, 800283c <usb_dc_ep_write+0x98>
		LOG_ERR("Unable to get write lock (%d)", ret);
		return -EAGAIN;
	}

	if (!k_is_in_isr()) {
 80027ce:	f004 fbd7 	bl	8006f80 <k_is_in_isr>
 80027d2:	b910      	cbnz	r0, 80027da <usb_dc_ep_write+0x36>
		irq_disable(USB_IRQ);
 80027d4:	2043      	movs	r0, #67	; 0x43
 80027d6:	f7ff faf1 	bl	8001dbc <arch_irq_disable>
	}

	if (ep == EP0_IN && len > USB_MAX_CTRL_MPS) {
 80027da:	2e80      	cmp	r6, #128	; 0x80
 80027dc:	d102      	bne.n	80027e4 <usb_dc_ep_write+0x40>
 80027de:	2d40      	cmp	r5, #64	; 0x40
 80027e0:	bf28      	it	cs
 80027e2:	2540      	movcs	r5, #64	; 0x40
		len = USB_MAX_CTRL_MPS;
	}

	status = HAL_PCD_EP_Transmit(&usb_dc_stm32_state.pcd, ep,
 80027e4:	464a      	mov	r2, r9
 80027e6:	4817      	ldr	r0, [pc, #92]	; (8002844 <usb_dc_ep_write+0xa0>)
 80027e8:	462b      	mov	r3, r5
 80027ea:	4631      	mov	r1, r6
 80027ec:	f004 f8bf 	bl	800696e <HAL_PCD_EP_Transmit>
				     (void *)data, len);
	if (status != HAL_OK) {
 80027f0:	4602      	mov	r2, r0
 80027f2:	b158      	cbz	r0, 800280c <usb_dc_ep_write+0x68>
	z_impl_k_sem_give(sem);
 80027f4:	4638      	mov	r0, r7
 80027f6:	f002 f87f 	bl	80048f8 <z_impl_k_sem_give>
		 * This also flushes the TX FIFO to the host.
		 */
		usb_dc_ep_start_read(ep, NULL, 0);
	}

	if (!k_is_in_isr()) {
 80027fa:	f004 fbc1 	bl	8006f80 <k_is_in_isr>
 80027fe:	b910      	cbnz	r0, 8002806 <usb_dc_ep_write+0x62>
		irq_enable(USB_IRQ);
 8002800:	2043      	movs	r0, #67	; 0x43
 8002802:	f7ff facd 	bl	8001da0 <arch_irq_enable>
		ret = -EIO;
 8002806:	f06f 0404 	mvn.w	r4, #4
 800280a:	e011      	b.n	8002830 <usb_dc_ep_write+0x8c>
	if (!ret && ep == EP0_IN && len > 0) {
 800280c:	2e80      	cmp	r6, #128	; 0x80
 800280e:	d104      	bne.n	800281a <usb_dc_ep_write+0x76>
 8002810:	b11d      	cbz	r5, 800281a <usb_dc_ep_write+0x76>
		usb_dc_ep_start_read(ep, NULL, 0);
 8002812:	4601      	mov	r1, r0
 8002814:	4630      	mov	r0, r6
 8002816:	f7ff ff31 	bl	800267c <usb_dc_ep_start_read>
	if (!k_is_in_isr()) {
 800281a:	f004 fbb1 	bl	8006f80 <k_is_in_isr>
 800281e:	b910      	cbnz	r0, 8002826 <usb_dc_ep_write+0x82>
		irq_enable(USB_IRQ);
 8002820:	2043      	movs	r0, #67	; 0x43
 8002822:	f7ff fabd 	bl	8001da0 <arch_irq_enable>
	}

	if (!ret && ret_bytes) {
 8002826:	f1b8 0f00 	cmp.w	r8, #0
 800282a:	d001      	beq.n	8002830 <usb_dc_ep_write+0x8c>
		*ret_bytes = len;
 800282c:	f8c8 5000 	str.w	r5, [r8]
	}

	return ret;
}
 8002830:	4620      	mov	r0, r4
 8002832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
 8002836:	f06f 0415 	mvn.w	r4, #21
 800283a:	e7f9      	b.n	8002830 <usb_dc_ep_write+0x8c>
		return -EAGAIN;
 800283c:	f06f 040a 	mvn.w	r4, #10
 8002840:	e7f6      	b.n	8002830 <usb_dc_ep_write+0x8c>
 8002842:	bf00      	nop
 8002844:	20000760 	.word	0x20000760

08002848 <usb_dc_ep_read_wait>:

int usb_dc_ep_read_wait(uint8_t ep, uint8_t *data, uint32_t max_data_len,
			uint32_t *read_bytes)
{
 8002848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800284c:	4681      	mov	r9, r0
 800284e:	4688      	mov	r8, r1
 8002850:	4616      	mov	r6, r2
 8002852:	461f      	mov	r7, r3
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8002854:	f7ff fe56 	bl	8002504 <usb_dc_stm32_get_ep_state>
	uint32_t read_count;

	if (!ep_state) {
 8002858:	4604      	mov	r4, r0
 800285a:	b300      	cbz	r0, 800289e <usb_dc_ep_read_wait+0x56>
	read_count = ep_state->read_count;

	LOG_DBG("ep 0x%02x, %u bytes, %u+%u, %p", ep, max_data_len,
		ep_state->read_offset, read_count, data);

	if (!USB_EP_DIR_IS_OUT(ep)) { /* check if OUT ep */
 800285c:	f019 0f80 	tst.w	r9, #128	; 0x80
	read_count = ep_state->read_count;
 8002860:	68c5      	ldr	r5, [r0, #12]
	if (!USB_EP_DIR_IS_OUT(ep)) { /* check if OUT ep */
 8002862:	d11c      	bne.n	800289e <usb_dc_ep_read_wait+0x56>

	/* When both buffer and max data to read are zero, just ignore reading
	 * and return available data in buffer. Otherwise, return data
	 * previously stored in the buffer.
	 */
	if (data) {
 8002864:	f1b8 0f00 	cmp.w	r8, #0
 8002868:	d014      	beq.n	8002894 <usb_dc_ep_read_wait+0x4c>
		read_count = MIN(read_count, max_data_len);
 800286a:	42b5      	cmp	r5, r6
 800286c:	bf28      	it	cs
 800286e:	4635      	movcs	r5, r6
		memcpy(data, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)] +
 8002870:	6903      	ldr	r3, [r0, #16]
 8002872:	490c      	ldr	r1, [pc, #48]	; (80028a4 <usb_dc_ep_read_wait+0x5c>)
 8002874:	f44f 66c6 	mov.w	r6, #1584	; 0x630
 8002878:	eb06 1689 	add.w	r6, r6, r9, lsl #6
 800287c:	441e      	add	r6, r3
 800287e:	462a      	mov	r2, r5
 8002880:	4431      	add	r1, r6
 8002882:	4640      	mov	r0, r8
 8002884:	f003 f94f 	bl	8005b26 <memcpy>
		       ep_state->read_offset, read_count);
		ep_state->read_count -= read_count;
 8002888:	68e3      	ldr	r3, [r4, #12]
 800288a:	1b5b      	subs	r3, r3, r5
 800288c:	60e3      	str	r3, [r4, #12]
		ep_state->read_offset += read_count;
 800288e:	6923      	ldr	r3, [r4, #16]
 8002890:	442b      	add	r3, r5
 8002892:	6123      	str	r3, [r4, #16]
	} else if (max_data_len) {
		LOG_ERR("Wrong arguments");
	}

	if (read_bytes) {
 8002894:	b107      	cbz	r7, 8002898 <usb_dc_ep_read_wait+0x50>
		*read_bytes = read_count;
 8002896:	603d      	str	r5, [r7, #0]
	}

	return 0;
 8002898:	2000      	movs	r0, #0
}
 800289a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
 800289e:	f06f 0015 	mvn.w	r0, #21
 80028a2:	e7fa      	b.n	800289a <usb_dc_ep_read_wait+0x52>
 80028a4:	20000760 	.word	0x20000760

080028a8 <usb_dc_ep_read_continue>:

int usb_dc_ep_read_continue(uint8_t ep)
{
 80028a8:	b510      	push	{r4, lr}
 80028aa:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 80028ac:	f7ff fe2a 	bl	8002504 <usb_dc_stm32_get_ep_state>

	if (!ep_state || !USB_EP_DIR_IS_OUT(ep)) { /* Check if OUT ep */
 80028b0:	b180      	cbz	r0, 80028d4 <usb_dc_ep_read_continue+0x2c>
 80028b2:	0623      	lsls	r3, r4, #24
 80028b4:	d40e      	bmi.n	80028d4 <usb_dc_ep_read_continue+0x2c>
	}

	/* If no more data in the buffer, start a new read transaction.
	 * DataOutStageCallback will called on transaction complete.
	 */
	if (!ep_state->read_count) {
 80028b6:	68c3      	ldr	r3, [r0, #12]
 80028b8:	b10b      	cbz	r3, 80028be <usb_dc_ep_read_continue+0x16>
		usb_dc_ep_start_read(ep, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
				     EP_MPS);
	}

	return 0;
 80028ba:	2000      	movs	r0, #0
}
 80028bc:	bd10      	pop	{r4, pc}
		usb_dc_ep_start_read(ep, usb_dc_stm32_state.ep_buf[USB_EP_GET_IDX(ep)],
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	4906      	ldr	r1, [pc, #24]	; (80028dc <usb_dc_ep_read_continue+0x34>)
 80028c2:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 80028c6:	fb12 3304 	smlabb	r3, r2, r4, r3
 80028ca:	4419      	add	r1, r3
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff fed5 	bl	800267c <usb_dc_ep_start_read>
 80028d2:	e7f2      	b.n	80028ba <usb_dc_ep_read_continue+0x12>
		return -EINVAL;
 80028d4:	f06f 0015 	mvn.w	r0, #21
 80028d8:	e7f0      	b.n	80028bc <usb_dc_ep_read_continue+0x14>
 80028da:	bf00      	nop
 80028dc:	20000760 	.word	0x20000760

080028e0 <HAL_PCD_ResetCallback>:
}

/* Callbacks from the STM32 Cube HAL code */

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80028e0:	b510      	push	{r4, lr}
	int i;

	LOG_DBG("");

	HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, EP0_IN, EP0_MPS, EP_TYPE_CTRL);
 80028e2:	4c13      	ldr	r4, [pc, #76]	; (8002930 <HAL_PCD_ResetCallback+0x50>)
 80028e4:	2300      	movs	r3, #0
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	4620      	mov	r0, r4
 80028ec:	f003 ffac 	bl	8006848 <HAL_PCD_EP_Open>
	HAL_PCD_EP_Open(&usb_dc_stm32_state.pcd, EP0_OUT, EP0_MPS,
 80028f0:	2300      	movs	r3, #0
 80028f2:	2240      	movs	r2, #64	; 0x40
 80028f4:	4619      	mov	r1, r3
 80028f6:	4620      	mov	r0, r4
 80028f8:	f003 ffa6 	bl	8006848 <HAL_PCD_EP_Open>
 80028fc:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 8002900:	f001 fffa 	bl	80048f8 <z_impl_k_sem_give>
 8002904:	f504 60bb 	add.w	r0, r4, #1496	; 0x5d8
 8002908:	f001 fff6 	bl	80048f8 <z_impl_k_sem_give>
 800290c:	f204 50fc 	addw	r0, r4, #1532	; 0x5fc
 8002910:	f001 fff2 	bl	80048f8 <z_impl_k_sem_give>
 8002914:	f504 60c4 	add.w	r0, r4, #1568	; 0x620
 8002918:	f001 ffee 	bl	80048f8 <z_impl_k_sem_give>
	 * */
	for (i = 0; i < USB_NUM_BIDIR_ENDPOINTS; i++) {
		k_sem_give(&usb_dc_stm32_state.in_ep_state[i].write_sem);
	}

	if (usb_dc_stm32_state.status_cb) {
 800291c:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 8002920:	b123      	cbz	r3, 800292c <HAL_PCD_ResetCallback+0x4c>
		usb_dc_stm32_state.status_cb(USB_DC_RESET, NULL);
	}
}
 8002922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_stm32_state.status_cb(USB_DC_RESET, NULL);
 8002926:	2100      	movs	r1, #0
 8002928:	2001      	movs	r0, #1
 800292a:	4718      	bx	r3
}
 800292c:	bd10      	pop	{r4, pc}
 800292e:	bf00      	nop
 8002930:	20000760 	.word	0x20000760

08002934 <HAL_PCD_ConnectCallback>:

void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_PCD_ConnectCallback+0x10>)
 8002936:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800293a:	b113      	cbz	r3, 8002942 <HAL_PCD_ConnectCallback+0xe>
		usb_dc_stm32_state.status_cb(USB_DC_CONNECTED, NULL);
 800293c:	2100      	movs	r1, #0
 800293e:	2002      	movs	r0, #2
 8002940:	4718      	bx	r3
	}
}
 8002942:	4770      	bx	lr
 8002944:	20000760 	.word	0x20000760

08002948 <HAL_PCD_DisconnectCallback>:

void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_PCD_DisconnectCallback+0x10>)
 800294a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800294e:	b113      	cbz	r3, 8002956 <HAL_PCD_DisconnectCallback+0xe>
		usb_dc_stm32_state.status_cb(USB_DC_DISCONNECTED, NULL);
 8002950:	2100      	movs	r1, #0
 8002952:	2004      	movs	r0, #4
 8002954:	4718      	bx	r3
	}
}
 8002956:	4770      	bx	lr
 8002958:	20000760 	.word	0x20000760

0800295c <HAL_PCD_SuspendCallback>:

void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_PCD_SuspendCallback+0x10>)
 800295e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8002962:	b113      	cbz	r3, 800296a <HAL_PCD_SuspendCallback+0xe>
		usb_dc_stm32_state.status_cb(USB_DC_SUSPEND, NULL);
 8002964:	2100      	movs	r1, #0
 8002966:	2005      	movs	r0, #5
 8002968:	4718      	bx	r3
	}
}
 800296a:	4770      	bx	lr
 800296c:	20000760 	.word	0x20000760

08002970 <HAL_PCD_ResumeCallback>:

void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
	LOG_DBG("");

	if (usb_dc_stm32_state.status_cb) {
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_PCD_ResumeCallback+0x10>)
 8002972:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8002976:	b113      	cbz	r3, 800297e <HAL_PCD_ResumeCallback+0xe>
		usb_dc_stm32_state.status_cb(USB_DC_RESUME, NULL);
 8002978:	2100      	movs	r1, #0
 800297a:	2006      	movs	r0, #6
 800297c:	4718      	bx	r3
	}
}
 800297e:	4770      	bx	lr
 8002980:	20000760 	.word	0x20000760

08002984 <HAL_PCD_SetupStageCallback>:

void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002984:	b538      	push	{r3, r4, r5, lr}
	LOG_DBG("");

	ep_state = usb_dc_stm32_get_ep_state(EP0_OUT); /* can't fail for ep0 */
	__ASSERT(ep_state, "No corresponding ep_state for EP0");

	ep_state->read_count = SETUP_SIZE;
 8002986:	4c11      	ldr	r4, [pc, #68]	; (80029cc <HAL_PCD_SetupStageCallback+0x48>)
 8002988:	2208      	movs	r2, #8
	ep_state->read_offset = 0U;
 800298a:	2500      	movs	r5, #0
	ep_state->read_count = SETUP_SIZE;
 800298c:	f8c4 251c 	str.w	r2, [r4, #1308]	; 0x51c
	ep_state->read_offset = 0U;
 8002990:	f8c4 5520 	str.w	r5, [r4, #1312]	; 0x520
	memcpy(&usb_dc_stm32_state.ep_buf[EP0_IDX],
 8002994:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 8002998:	f504 60c6 	add.w	r0, r4, #1584	; 0x630
 800299c:	f003 f8c3 	bl	8005b26 <memcpy>
	       usb_dc_stm32_state.pcd.Setup, ep_state->read_count);

	if (ep_state->cb) {
 80029a0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 80029a4:	b183      	cbz	r3, 80029c8 <HAL_PCD_SetupStageCallback+0x44>
		ep_state->cb(EP0_OUT, USB_DC_EP_SETUP);
 80029a6:	4629      	mov	r1, r5
 80029a8:	4628      	mov	r0, r5
 80029aa:	4798      	blx	r3

		if (!(setup->wLength == 0U) &&
 80029ac:	f8b4 24ca 	ldrh.w	r2, [r4, #1226]	; 0x4ca
 80029b0:	b152      	cbz	r2, 80029c8 <HAL_PCD_SetupStageCallback+0x44>
 80029b2:	f994 34c4 	ldrsb.w	r3, [r4, #1220]	; 0x4c4
 80029b6:	42ab      	cmp	r3, r5
 80029b8:	db06      	blt.n	80029c8 <HAL_PCD_SetupStageCallback+0x44>
		    usb_reqtype_is_to_device(setup)) {
			usb_dc_ep_start_read(EP0_OUT,
 80029ba:	f504 61c6 	add.w	r1, r4, #1584	; 0x630
 80029be:	4628      	mov	r0, r5
					     usb_dc_stm32_state.ep_buf[EP0_IDX],
					     setup->wLength);
		}
	}
}
 80029c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_dc_ep_start_read(EP0_OUT,
 80029c4:	f7ff be5a 	b.w	800267c <usb_dc_ep_start_read>
}
 80029c8:	bd38      	pop	{r3, r4, r5, pc}
 80029ca:	bf00      	nop
 80029cc:	20000760 	.word	0x20000760

080029d0 <stm32_clock_control_get_subsys_rate>:
}

static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 80029d0:	b510      	push	{r4, lr}
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <stm32_clock_control_get_subsys_rate+0x5c>)
 80029d4:	6818      	ldr	r0, [r3, #0]
	}
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80029d6:	680b      	ldr	r3, [r1, #0]
 80029d8:	2b44      	cmp	r3, #68	; 0x44
{
 80029da:	4614      	mov	r4, r2
	switch (pclken->bus) {
 80029dc:	d813      	bhi.n	8002a06 <stm32_clock_control_get_subsys_rate+0x36>
 80029de:	2b2f      	cmp	r3, #47	; 0x2f
 80029e0:	d806      	bhi.n	80029f0 <stm32_clock_control_get_subsys_rate+0x20>
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d014      	beq.n	8002a10 <stm32_clock_control_get_subsys_rate+0x40>
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d018      	beq.n	8002a1c <stm32_clock_control_get_subsys_rate+0x4c>
 80029ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		return -ENOTSUP;
	}

	return 0;
}
 80029ee:	bd10      	pop	{r4, pc}
	switch (pclken->bus) {
 80029f0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80029f4:	2201      	movs	r2, #1
 80029f6:	408a      	lsls	r2, r1
 80029f8:	490d      	ldr	r1, [pc, #52]	; (8002a30 <stm32_clock_control_get_subsys_rate+0x60>)
 80029fa:	420a      	tst	r2, r1
 80029fc:	d105      	bne.n	8002a0a <stm32_clock_control_get_subsys_rate+0x3a>
 80029fe:	2b40      	cmp	r3, #64	; 0x40
 8002a00:	d1f3      	bne.n	80029ea <stm32_clock_control_get_subsys_rate+0x1a>
	return clock / prescaler;
 8002a02:	0840      	lsrs	r0, r0, #1
		break;
 8002a04:	e001      	b.n	8002a0a <stm32_clock_control_get_subsys_rate+0x3a>
	switch (pclken->bus) {
 8002a06:	2ba8      	cmp	r3, #168	; 0xa8
 8002a08:	d1ef      	bne.n	80029ea <stm32_clock_control_get_subsys_rate+0x1a>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8002a0a:	6020      	str	r0, [r4, #0]
	return 0;
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	e7ee      	b.n	80029ee <stm32_clock_control_get_subsys_rate+0x1e>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8002a10:	f000 f892 	bl	8002b38 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 8002a14:	2348      	movs	r3, #72	; 0x48
 8002a16:	4358      	muls	r0, r3
 8002a18:	0900      	lsrs	r0, r0, #4
		break;
 8002a1a:	e7f6      	b.n	8002a0a <stm32_clock_control_get_subsys_rate+0x3a>
		*rate = get_pll_div_frequency(get_pllsrc_frequency(),
 8002a1c:	f000 f88c 	bl	8002b38 <get_pllsrc_frequency>
	return (pllsrc_freq * plln_mul) /
 8002a20:	2348      	movs	r3, #72	; 0x48
 8002a22:	4358      	muls	r0, r3
 8002a24:	2318      	movs	r3, #24
 8002a26:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 8002a2a:	e7ee      	b.n	8002a0a <stm32_clock_control_get_subsys_rate+0x3a>
 8002a2c:	2000016c 	.word	0x2000016c
 8002a30:	00100111 	.word	0x00100111

08002a34 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8002a34:	b570      	push	{r4, r5, r6, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a36:	4c3b      	ldr	r4, [pc, #236]	; (8002b24 <stm32_clock_control_init+0xf0>)

	new_flash_freq = RCC_CALC_FLASH_FREQ(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				      STM32_FLASH_PRESCALER);

	/* If freq increases, set flash latency before any clock setting */
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8002a38:	4e3b      	ldr	r6, [pc, #236]	; (8002b28 <stm32_clock_control_init+0xf4>)
	config_enable_default_clocks();
 8002a3a:	f000 f893 	bl	8002b64 <config_enable_default_clocks>
	old_flash_freq = RCC_CALC_FLASH_FREQ(HAL_RCC_GetSysClockFreq(),
 8002a3e:	f000 fde5 	bl	800360c <HAL_RCC_GetSysClockFreq>
 8002a42:	68a3      	ldr	r3, [r4, #8]
 8002a44:	4a39      	ldr	r2, [pc, #228]	; (8002b2c <stm32_clock_control_init+0xf8>)
 8002a46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	fa20 f503 	lsr.w	r5, r0, r3
	if (old_flash_freq < CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8002a50:	42b5      	cmp	r5, r6
 8002a52:	d802      	bhi.n	8002a5a <stm32_clock_control_init+0x26>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8002a54:	4836      	ldr	r0, [pc, #216]	; (8002b30 <stm32_clock_control_init+0xfc>)
 8002a56:	f001 fcb5 	bl	80043c4 <LL_SetFlashLatency>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a60:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <stm32_clock_control_init+0xf0>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSE_IsReady() != 1) {
 8002a6e:	0394      	lsls	r4, r2, #14
 8002a70:	d5fc      	bpl.n	8002a6c <stm32_clock_control_init+0x38>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	f002 020c 	and.w	r2, r2, #12
	if (LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8002a78:	2a08      	cmp	r2, #8
 8002a7a:	d117      	bne.n	8002aac <stm32_clock_control_init+0x78>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a82:	609a      	str	r2, [r3, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002a84:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8002a86:	0790      	lsls	r0, r2, #30
 8002a88:	d407      	bmi.n	8002a9a <stm32_clock_control_init+0x66>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002a92:	4a24      	ldr	r2, [pc, #144]	; (8002b24 <stm32_clock_control_init+0xf0>)
 8002a94:	6813      	ldr	r3, [r2, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8002a96:	0799      	lsls	r1, r3, #30
 8002a98:	d5fc      	bpl.n	8002a94 <stm32_clock_control_init+0x60>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <stm32_clock_control_init+0xf0>)
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	f022 0203 	bic.w	r2, r2, #3
 8002aa2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002aa4:	689a      	ldr	r2, [r3, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8002aa6:	f012 0f0c 	tst.w	r2, #12
 8002aaa:	d1fb      	bne.n	8002aa4 <stm32_clock_control_init+0x70>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002aac:	4c1d      	ldr	r4, [pc, #116]	; (8002b24 <stm32_clock_control_init+0xf0>)
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab4:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, pllp(STM32_PLL_P_DIVISOR));
 8002ab6:	6863      	ldr	r3, [r4, #4]
 8002ab8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002abc:	6063      	str	r3, [r4, #4]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ, pllq(STM32_PLL_Q_DIVISOR));
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002ac4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002ac8:	6063      	str	r3, [r4, #4]
	config_pll_sysclock();
 8002aca:	f000 f839 	bl	8002b40 <config_pll_sysclock>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad4:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002ad6:	6823      	ldr	r3, [r4, #0]
	while (LL_RCC_PLL_IsReady() != 1U) {
 8002ad8:	019b      	lsls	r3, r3, #6
 8002ada:	d5fc      	bpl.n	8002ad6 <stm32_clock_control_init+0xa2>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002adc:	68a3      	ldr	r3, [r4, #8]
 8002ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae2:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ae4:	68a3      	ldr	r3, [r4, #8]
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002af0:	4c0c      	ldr	r4, [pc, #48]	; (8002b24 <stm32_clock_control_init+0xf0>)
 8002af2:	68a3      	ldr	r3, [r4, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
	}

#if STM32_SYSCLK_SRC_PLL
	/* Set PLL as System Clock Source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d1fa      	bne.n	8002af2 <stm32_clock_control_init+0xbe>
		LL_RCC_SetAHBPrescaler(ahb_prescaler(STM32_CORE_PRESCALER));
	}

#if defined(FLASH_ACR_LATENCY)
	/* If freq not increased, set flash latency after all clock setting */
	if (old_flash_freq >= CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC) {
 8002afc:	42b5      	cmp	r5, r6
 8002afe:	d902      	bls.n	8002b06 <stm32_clock_control_init+0xd2>
		LL_SetFlashLatency(CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC);
 8002b00:	480b      	ldr	r0, [pc, #44]	; (8002b30 <stm32_clock_control_init+0xfc>)
 8002b02:	f001 fc5f 	bl	80043c4 <LL_SetFlashLatency>
	}
#endif /* FLASH_ACR_LATENCY */

	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <stm32_clock_control_init+0x100>)
 8002b08:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <stm32_clock_control_init+0xfc>)
 8002b0a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b0c:	68a3      	ldr	r3, [r4, #8]
 8002b0e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b16:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b18:	68a3      	ldr	r3, [r4, #8]
 8002b1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b1e:	60a3      	str	r3, [r4, #8]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8002b20:	2000      	movs	r0, #0
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	044aa1ff 	.word	0x044aa1ff
 8002b2c:	08007b62 	.word	0x08007b62
 8002b30:	044aa200 	.word	0x044aa200
 8002b34:	2000016c 	.word	0x2000016c

08002b38 <get_pllsrc_frequency>:
		return STM32_HSE_FREQ;
	}

	__ASSERT(0, "Invalid source");
	return 0;
}
 8002b38:	4800      	ldr	r0, [pc, #0]	; (8002b3c <get_pllsrc_frequency+0x4>)
 8002b3a:	4770      	bx	lr
 8002b3c:	00f42400 	.word	0x00f42400

08002b40 <config_pll_sysclock>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <config_pll_sysclock+0x18>)
 8002b42:	4906      	ldr	r1, [pc, #24]	; (8002b5c <config_pll_sysclock+0x1c>)
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4011      	ands	r1, r2
 8002b48:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <config_pll_sysclock+0x20>)
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002b54:	605a      	str	r2, [r3, #4]
{
	LL_RCC_PLL_ConfigDomain_SYS(get_pll_source(),
				    pllm(STM32_PLL_M_DIVISOR),
				    STM32_PLL_N_MULTIPLIER,
				    pllp(STM32_PLL_P_DIVISOR));
}
 8002b56:	4770      	bx	lr
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	ffbf8000 	.word	0xffbf8000
 8002b60:	00401208 	.word	0x00401208

08002b64 <config_enable_default_clocks>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <config_enable_default_clocks+0x1c>)
 8002b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8002b70:	b082      	sub	sp, #8
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002b78:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8002b7a:	b002      	add	sp, #8
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800

08002b84 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8002b84:	b508      	push	{r3, lr}
 8002b86:	4807      	ldr	r0, [pc, #28]	; (8002ba4 <uart_console_init+0x20>)
 8002b88:	f004 f9c4 	bl	8006f14 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 8002b8c:	b138      	cbz	r0, 8002b9e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <uart_console_init+0x24>)
 8002b90:	f7ff fc2c 	bl	80023ec <__stdout_hook_install>
	__printk_hook_install(console_out);
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <uart_console_init+0x24>)
 8002b96:	f7fd fc97 	bl	80004c8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 8002b9a:	2000      	movs	r0, #0
}
 8002b9c:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8002b9e:	f06f 0012 	mvn.w	r0, #18
 8002ba2:	e7fb      	b.n	8002b9c <uart_console_init+0x18>
 8002ba4:	080073dc 	.word	0x080073dc
 8002ba8:	08002bad 	.word	0x08002bad

08002bac <console_out>:
	if ('\n' == c) {
 8002bac:	280a      	cmp	r0, #10
{
 8002bae:	b538      	push	{r3, r4, r5, lr}
 8002bb0:	4d07      	ldr	r5, [pc, #28]	; (8002bd0 <console_out+0x24>)
 8002bb2:	4604      	mov	r4, r0
	if ('\n' == c) {
 8002bb4:	d104      	bne.n	8002bc0 <console_out+0x14>
	api->poll_out(dev, out_char);
 8002bb6:	68ab      	ldr	r3, [r5, #8]
 8002bb8:	210d      	movs	r1, #13
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	4798      	blx	r3
 8002bc0:	68ab      	ldr	r3, [r5, #8]
 8002bc2:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <console_out+0x24>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	b2e1      	uxtb	r1, r4
 8002bc8:	4798      	blx	r3
}
 8002bca:	4620      	mov	r0, r4
 8002bcc:	bd38      	pop	{r3, r4, r5, pc}
 8002bce:	bf00      	nop
 8002bd0:	080073dc 	.word	0x080073dc

08002bd4 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8002bd4:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
 8002bd6:	6903      	ldr	r3, [r0, #16]
{
 8002bd8:	4604      	mov	r4, r0
	int ret;

	data->dev = dev;
 8002bda:	6058      	str	r0, [r3, #4]
 8002bdc:	4d08      	ldr	r5, [pc, #32]	; (8002c00 <gpio_stm32_init+0x2c>)
 8002bde:	4628      	mov	r0, r5
 8002be0:	f004 f998 	bl	8006f14 <z_device_is_ready>

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8002be4:	b140      	cbz	r0, 8002bf8 <gpio_stm32_init+0x24>
					(clock_control_subsys_t *)&cfg->pclken);
 8002be6:	6861      	ldr	r1, [r4, #4]
 8002be8:	68ab      	ldr	r3, [r5, #8]
 8002bea:	310c      	adds	r1, #12
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4628      	mov	r0, r5
 8002bf0:	4798      	blx	r3
#endif
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
	if (ret < 0) {
 8002bf2:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8002bf6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
 8002bf8:	f06f 0012 	mvn.w	r0, #18
 8002bfc:	e7fb      	b.n	8002bf6 <gpio_stm32_init+0x22>
 8002bfe:	bf00      	nop
 8002c00:	080072ec 	.word	0x080072ec

08002c04 <gpio_stm32_pin_interrupt_configure>:
{
 8002c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c06:	4617      	mov	r7, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 8002c08:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
	const struct gpio_stm32_config *cfg = dev->config;
 8002c0c:	6846      	ldr	r6, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8002c0e:	6902      	ldr	r2, [r0, #16]
{
 8002c10:	460c      	mov	r4, r1
 8002c12:	461d      	mov	r5, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 8002c14:	d124      	bne.n	8002c60 <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8002c16:	f001 0203 	and.w	r2, r1, #3
 8002c1a:	3204      	adds	r2, #4
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	230f      	movs	r3, #15
 8002c20:	4093      	lsls	r3, r2
 8002c22:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	4933      	ldr	r1, [pc, #204]	; (8002cf8 <gpio_stm32_pin_interrupt_configure+0xf4>)
 8002c2a:	3202      	adds	r2, #2
 8002c2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002c30:	0c19      	lsrs	r1, r3, #16
 8002c32:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8002c3a:	fab2 f282 	clz	r2, r2
 8002c3e:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8002c40:	68b2      	ldr	r2, [r6, #8]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d109      	bne.n	8002c5a <gpio_stm32_pin_interrupt_configure+0x56>
			stm32_exti_disable(pin);
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7ff fc04 	bl	8002454 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f7ff fc4f 	bl	80024f0 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8002c52:	2100      	movs	r1, #0
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7ff fc09 	bl	800246c <stm32_exti_trigger>
	int err = 0;
 8002c5a:	2000      	movs	r0, #0
}
 8002c5c:	b003      	add	sp, #12
 8002c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
 8002c60:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 8002c64:	d041      	beq.n	8002cea <gpio_stm32_pin_interrupt_configure+0xe6>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8002c66:	4925      	ldr	r1, [pc, #148]	; (8002cfc <gpio_stm32_pin_interrupt_configure+0xf8>)
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f7ff fc2f 	bl	80024cc <stm32_exti_set_callback>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d13e      	bne.n	8002cf0 <gpio_stm32_pin_interrupt_configure+0xec>
	struct stm32_pclken pclken = {
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <gpio_stm32_pin_interrupt_configure+0xfc>)
	gpio_stm32_enable_int(cfg->port, pin);
 8002c74:	68b6      	ldr	r6, [r6, #8]
	struct stm32_pclken pclken = {
 8002c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c7a:	466b      	mov	r3, sp
 8002c7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c80:	4820      	ldr	r0, [pc, #128]	; (8002d04 <gpio_stm32_pin_interrupt_configure+0x100>)
 8002c82:	6882      	ldr	r2, [r0, #8]
 8002c84:	4619      	mov	r1, r3
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	4790      	blx	r2
	if (ret != 0) {
 8002c8a:	b9c0      	cbnz	r0, 8002cbe <gpio_stm32_pin_interrupt_configure+0xba>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8002c8c:	f004 0303 	and.w	r3, r4, #3
 8002c90:	3304      	adds	r3, #4
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	409a      	lsls	r2, r3
 8002c98:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002c9c:	b2d3      	uxtb	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ca4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002ca8:	0c11      	lsrs	r1, r2, #16
 8002caa:	6898      	ldr	r0, [r3, #8]
 8002cac:	ea20 4012 	bic.w	r0, r0, r2, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8002cb4:	fab2 f282 	clz	r2, r2
 8002cb8:	4096      	lsls	r6, r2
 8002cba:	4306      	orrs	r6, r0
 8002cbc:	609e      	str	r6, [r3, #8]
	switch (trig) {
 8002cbe:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8002cc2:	d00e      	beq.n	8002ce2 <gpio_stm32_pin_interrupt_configure+0xde>
 8002cc4:	f1b5 6fc0 	cmp.w	r5, #100663296	; 0x6000000
 8002cc8:	d00d      	beq.n	8002ce6 <gpio_stm32_pin_interrupt_configure+0xe2>
 8002cca:	f105 437e 	add.w	r3, r5, #4261412864	; 0xfe000000
 8002cce:	4259      	negs	r1, r3
 8002cd0:	4159      	adcs	r1, r3
 8002cd2:	0049      	lsls	r1, r1, #1
	stm32_exti_trigger(pin, edge);
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f7ff fbc9 	bl	800246c <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff fbac 	bl	8002438 <stm32_exti_enable>
 8002ce0:	e7bb      	b.n	8002c5a <gpio_stm32_pin_interrupt_configure+0x56>
		edge = STM32_EXTI_TRIG_RISING;
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	e7f6      	b.n	8002cd4 <gpio_stm32_pin_interrupt_configure+0xd0>
		edge = STM32_EXTI_TRIG_BOTH;
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	e7f4      	b.n	8002cd4 <gpio_stm32_pin_interrupt_configure+0xd0>
		err = -ENOTSUP;
 8002cea:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002cee:	e7b5      	b.n	8002c5c <gpio_stm32_pin_interrupt_configure+0x58>
		err = -EBUSY;
 8002cf0:	f06f 000f 	mvn.w	r0, #15
	return err;
 8002cf4:	e7b2      	b.n	8002c5c <gpio_stm32_pin_interrupt_configure+0x58>
 8002cf6:	bf00      	nop
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	08005f8d 	.word	0x08005f8d
 8002d00:	08007750 	.word	0x08007750
 8002d04:	080072ec 	.word	0x080072ec

08002d08 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8002d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002d0c:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8002d0e:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8002d10:	6846      	ldr	r6, [r0, #4]
 8002d12:	4f2f      	ldr	r7, [pc, #188]	; (8002dd0 <spi_stm32_init+0xc8>)
 8002d14:	4638      	mov	r0, r7
 8002d16:	f004 f8fd 	bl	8006f14 <z_device_is_ready>
	int err;

	if (!device_is_ready(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE))) {
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d055      	beq.n	8002dca <spi_stm32_init+0xc2>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6931      	ldr	r1, [r6, #16]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4638      	mov	r0, r7
 8002d26:	4798      	blx	r3
		return -ENODEV;
	}

	err = clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
			       (clock_control_subsys_t) &cfg->pclken[0]);
	if (err < 0) {
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	db4b      	blt.n	8002dc4 <spi_stm32_init+0xbc>
	ret = pinctrl_lookup_state(config, id, &state);
 8002d2c:	6870      	ldr	r0, [r6, #4]
 8002d2e:	aa01      	add	r2, sp, #4
 8002d30:	2100      	movs	r1, #0
 8002d32:	f003 fc95 	bl	8006660 <pinctrl_lookup_state>
	if (ret < 0) {
 8002d36:	2800      	cmp	r0, #0
 8002d38:	db44      	blt.n	8002dc4 <spi_stm32_init+0xbc>
	return pinctrl_apply_state_direct(config, state);
 8002d3a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	7919      	ldrb	r1, [r3, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	f000 fc1d 	bl	8003580 <pinctrl_configure_pins>
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8002d46:	2800      	cmp	r0, #0
 8002d48:	db3c      	blt.n	8002dc4 <spi_stm32_init+0xbc>
			return err;
		}
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 8002d4a:	68b3      	ldr	r3, [r6, #8]
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8002d50:	68ac      	ldr	r4, [r5, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002d52:	2601      	movs	r6, #1
 8002d54:	3408      	adds	r4, #8
 8002d56:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8002d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d5e:	f1a4 0208 	sub.w	r2, r4, #8
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d804      	bhi.n	8002d70 <spi_stm32_init+0x68>
	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);
 8002d66:	4628      	mov	r0, r5
 8002d68:	f003 f9a9 	bl	80060be <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8002d6c:	2000      	movs	r0, #0

	return 0;
 8002d6e:	e029      	b.n	8002dc4 <spi_stm32_init+0xbc>
		if (!device_is_ready(cs_gpio->port)) {
 8002d70:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8002d74:	f004 f8ce 	bl	8006f14 <z_device_is_ready>
 8002d78:	b338      	cbz	r0, 8002dca <spi_stm32_init+0xc2>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 8002d7a:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
 8002d7e:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
 8002d82:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
 8002d86:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 8002d8a:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002d8e:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8002d92:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
 8002d94:	bf54      	ite	pl
 8002d96:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8002d9a:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8002d9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002da2:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8002da6:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002da8:	bf4c      	ite	mi
 8002daa:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8002dae:	ea27 070e 	bicpl.w	r7, r7, lr
 8002db2:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
 8002db6:	f8d8 3000 	ldr.w	r3, [r8]
 8002dba:	4798      	blx	r3
		if (ret < 0) {
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	f104 0408 	add.w	r4, r4, #8
 8002dc2:	dac8      	bge.n	8002d56 <spi_stm32_init+0x4e>
}
 8002dc4:	b002      	add	sp, #8
 8002dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
 8002dca:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
 8002dce:	e7f9      	b.n	8002dc4 <spi_stm32_init+0xbc>
 8002dd0:	080072ec 	.word	0x080072ec

08002dd4 <spi_stm32_transceive>:
{
 8002dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd8:	461e      	mov	r6, r3
	SPI_TypeDef *spi = cfg->spi;
 8002dda:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8002ddc:	6905      	ldr	r5, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8002dde:	f8d3 8000 	ldr.w	r8, [r3]
{
 8002de2:	b08b      	sub	sp, #44	; 0x2c
 8002de4:	4681      	mov	r9, r0
 8002de6:	460f      	mov	r7, r1
	if (!tx_bufs && !rx_bufs) {
 8002de8:	4692      	mov	sl, r2
 8002dea:	b902      	cbnz	r2, 8002dee <spi_stm32_transceive+0x1a>
 8002dec:	b39e      	cbz	r6, 8002e56 <spi_stm32_transceive+0x82>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8002dee:	88bb      	ldrh	r3, [r7, #4]
 8002df0:	049a      	lsls	r2, r3, #18
 8002df2:	d434      	bmi.n	8002e5e <spi_stm32_transceive+0x8a>
	return z_impl_k_sem_take(sem, timeout);
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dfc:	f105 0010 	add.w	r0, r5, #16
 8002e00:	f001 fd9a 	bl	8004938 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8002e04:	606f      	str	r7, [r5, #4]
	const uint32_t scaler[] = {
 8002e06:	f8df e244 	ldr.w	lr, [pc, #580]	; 800304c <spi_stm32_transceive+0x278>
	struct spi_stm32_data *data = dev->data;
 8002e0a:	f8d9 b010 	ldr.w	fp, [r9, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8002e0e:	f8d9 c004 	ldr.w	ip, [r9, #4]
	const uint32_t scaler[] = {
 8002e12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002e16:	ac02      	add	r4, sp, #8
 8002e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e1a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8002e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8002e22:	f8db 3000 	ldr.w	r3, [fp]
	SPI_TypeDef *spi = cfg->spi;
 8002e26:	f8dc 4000 	ldr.w	r4, [ip]
	if (spi_context_configured(&data->ctx, config)) {
 8002e2a:	429f      	cmp	r7, r3
 8002e2c:	f000 8098 	beq.w	8002f60 <spi_stm32_transceive+0x18c>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8002e30:	88bb      	ldrh	r3, [r7, #4]
 8002e32:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8002e36:	2a08      	cmp	r2, #8
 8002e38:	d018      	beq.n	8002e6c <spi_stm32_transceive+0x98>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8002e3a:	2a10      	cmp	r2, #16
 8002e3c:	d016      	beq.n	8002e6c <spi_stm32_transceive+0x98>
		return -ENOTSUP;
 8002e3e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8002e42:	682b      	ldr	r3, [r5, #0]
 8002e44:	889b      	ldrh	r3, [r3, #4]
 8002e46:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8002e4a:	d104      	bne.n	8002e56 <spi_stm32_transceive+0x82>
		ctx->owner = NULL;
 8002e4c:	606b      	str	r3, [r5, #4]
	z_impl_k_sem_give(sem);
 8002e4e:	f105 0010 	add.w	r0, r5, #16
 8002e52:	f001 fd51 	bl	80048f8 <z_impl_k_sem_give>
}
 8002e56:	4630      	mov	r0, r6
 8002e58:	b00b      	add	sp, #44	; 0x2c
 8002e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8002e5e:	69ab      	ldr	r3, [r5, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1c7      	bne.n	8002df4 <spi_stm32_transceive+0x20>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8002e64:	686b      	ldr	r3, [r5, #4]
 8002e66:	429f      	cmp	r7, r3
 8002e68:	d1c4      	bne.n	8002df4 <spi_stm32_transceive+0x20>
 8002e6a:	e7cc      	b.n	8002e06 <spi_stm32_transceive+0x32>
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8002e6c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002e70:	6863      	ldr	r3, [r4, #4]
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
 8002e72:	4877      	ldr	r0, [pc, #476]	; (8003050 <spi_stm32_transceive+0x27c>)
 8002e74:	bf14      	ite	ne
 8002e76:	f043 0310 	orrne.w	r3, r3, #16
 8002e7a:	f023 0310 	biceq.w	r3, r3, #16
 8002e7e:	6063      	str	r3, [r4, #4]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8002e80:	6883      	ldr	r3, [r0, #8]
					   (clock_control_subsys_t) &cfg->pclken[0], &clock) < 0) {
 8002e82:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	b913      	cbnz	r3, 8002e90 <spi_stm32_transceive+0xbc>
			return -EIO;
 8002e8a:	f06f 0604 	mvn.w	r6, #4
 8002e8e:	e7d8      	b.n	8002e42 <spi_stm32_transceive+0x6e>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8002e90:	aa01      	add	r2, sp, #4
 8002e92:	4798      	blx	r3
		if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8002e94:	2800      	cmp	r0, #0
 8002e96:	dbf8      	blt.n	8002e8a <spi_stm32_transceive+0xb6>
		uint32_t clk = clock >> br;
 8002e98:	9a01      	ldr	r2, [sp, #4]
		if (clk <= config->frequency) {
 8002e9a:	6839      	ldr	r1, [r7, #0]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8002e9c:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 8002e9e:	fa22 f003 	lsr.w	r0, r2, r3
		if (clk <= config->frequency) {
 8002ea2:	4288      	cmp	r0, r1
 8002ea4:	d905      	bls.n	8002eb2 <spi_stm32_transceive+0xde>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	d1f8      	bne.n	8002e9e <spi_stm32_transceive+0xca>
		return -EINVAL;
 8002eac:	f06f 0615 	mvn.w	r6, #21
 8002eb0:	e7c7      	b.n	8002e42 <spi_stm32_transceive+0x6e>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002eb2:	6822      	ldr	r2, [r4, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8002eb4:	a90a      	add	r1, sp, #40	; 0x28
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eba:	6022      	str	r2, [r4, #0]
 8002ebc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002ec6:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	6023      	str	r3, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8002ece:	88bb      	ldrh	r3, [r7, #4]
 8002ed0:	079b      	lsls	r3, r3, #30
 8002ed2:	d403      	bmi.n	8002edc <spi_stm32_transceive+0x108>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	f023 0302 	bic.w	r3, r3, #2
 8002eda:	e002      	b.n	8002ee2 <spi_stm32_transceive+0x10e>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	f043 0302 	orr.w	r3, r3, #2
 8002ee2:	6023      	str	r3, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8002ee4:	88bb      	ldrh	r3, [r7, #4]
 8002ee6:	f013 0f04 	tst.w	r3, #4
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	bf14      	ite	ne
 8002eee:	f043 0301 	orrne.w	r3, r3, #1
 8002ef2:	f023 0301 	biceq.w	r3, r3, #1
 8002ef6:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8002efe:	6023      	str	r3, [r4, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8002f00:	88bb      	ldrh	r3, [r7, #4]
 8002f02:	f013 0f10 	tst.w	r3, #16
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	bf14      	ite	ne
 8002f0a:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 8002f0e:	f023 0380 	biceq.w	r3, r3, #128	; 0x80
 8002f12:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f1a:	6023      	str	r3, [r4, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d075      	beq.n	800300e <spi_stm32_transceive+0x23a>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f28:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8002f2a:	6863      	ldr	r3, [r4, #4]
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6063      	str	r3, [r4, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8002f32:	88bb      	ldrh	r3, [r7, #4]
 8002f34:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	bf14      	ite	ne
 8002f3c:	f423 7382 	bicne.w	r3, r3, #260	; 0x104
 8002f40:	f443 7382 	orreq.w	r3, r3, #260	; 0x104
 8002f44:	6023      	str	r3, [r4, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8002f46:	88bb      	ldrh	r3, [r7, #4]
 8002f48:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8002f4c:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	bf0c      	ite	eq
 8002f52:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 8002f56:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8002f5a:	6023      	str	r3, [r4, #0]
	data->ctx.config = config;
 8002f5c:	f8cb 7000 	str.w	r7, [fp]
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8002f60:	f1ba 0f00 	cmp.w	sl, #0
 8002f64:	d161      	bne.n	800302a <spi_stm32_transceive+0x256>
 8002f66:	f8c5 a034 	str.w	sl, [r5, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	63ab      	str	r3, [r5, #56]	; 0x38
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 8002f6e:	f105 0248 	add.w	r2, r5, #72	; 0x48
 8002f72:	2301      	movs	r3, #1
 8002f74:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8002f78:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8002f7c:	f003 f835 	bl	8005fea <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
 8002f80:	6468      	str	r0, [r5, #68]	; 0x44
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8002f82:	2e00      	cmp	r6, #0
 8002f84:	d159      	bne.n	800303a <spi_stm32_transceive+0x266>
 8002f86:	63ee      	str	r6, [r5, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	642b      	str	r3, [r5, #64]	; 0x40
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8002f8c:	f105 0250 	add.w	r2, r5, #80	; 0x50
 8002f90:	2301      	movs	r3, #1
 8002f92:	f105 0140 	add.w	r1, r5, #64	; 0x40
 8002f96:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8002f9a:	f003 f826 	bl	8005fea <spi_context_get_next_buf>
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 8002f9e:	2200      	movs	r2, #0
	ctx->rx_buf = (uint8_t *)
 8002fa0:	64e8      	str	r0, [r5, #76]	; 0x4c
	ctx->sync_status = 0;
 8002fa2:	632a      	str	r2, [r5, #48]	; 0x30
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8002fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fac:	f8c8 3000 	str.w	r3, [r8]
	_spi_context_cs_control(ctx, on, false);
 8002fb0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	f003 f860 	bl	800607a <_spi_context_cs_control>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_ERR(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8002fba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002fbe:	f043 0320 	orr.w	r3, r3, #32
 8002fc2:	f8c8 3004 	str.w	r3, [r8, #4]
	if (rx_bufs) {
 8002fc6:	b12e      	cbz	r6, 8002fd4 <spi_stm32_transceive+0x200>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8002fc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd0:	f8c8 3004 	str.w	r3, [r8, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_TXE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8002fd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fdc:	f8c8 3004 	str.w	r3, [r8, #4]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8002fe0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8002fe2:	6cab      	ldr	r3, [r5, #72]	; 0x48
			     ctx->config->frequency;
 8002fe4:	4628      	mov	r0, r5
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	bf38      	it	cc
 8002fea:	461a      	movcc	r2, r3
 8002fec:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002ff0:	435a      	muls	r2, r3
			     ctx->config->frequency;
 8002ff2:	f850 3b20 	ldr.w	r3, [r0], #32
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fbb2 f2f3 	udiv	r2, r2, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8002ffc:	230a      	movs	r3, #10
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 8002ffe:	32c8      	adds	r2, #200	; 0xc8
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
	return z_impl_k_sem_take(sem, timeout);
 8003004:	f001 fc98 	bl	8004938 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
 8003008:	b9e8      	cbnz	r0, 8003046 <spi_stm32_transceive+0x272>
	status = ctx->sync_status;
 800300a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
	return status;
 800300c:	e719      	b.n	8002e42 <spi_stm32_transceive+0x6e>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800300e:	88bb      	ldrh	r3, [r7, #4]
 8003010:	f013 0f01 	tst.w	r3, #1
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800301a:	d185      	bne.n	8002f28 <spi_stm32_transceive+0x154>
 800301c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003020:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8003022:	6863      	ldr	r3, [r4, #4]
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	e782      	b.n	8002f30 <spi_stm32_transceive+0x15c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 800302a:	f8da 3000 	ldr.w	r3, [sl]
 800302e:	636b      	str	r3, [r5, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8003030:	2b00      	cmp	r3, #0
 8003032:	d09a      	beq.n	8002f6a <spi_stm32_transceive+0x196>
 8003034:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003038:	e798      	b.n	8002f6c <spi_stm32_transceive+0x198>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 800303a:	6833      	ldr	r3, [r6, #0]
 800303c:	63eb      	str	r3, [r5, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0a2      	beq.n	8002f88 <spi_stm32_transceive+0x1b4>
 8003042:	6873      	ldr	r3, [r6, #4]
 8003044:	e7a1      	b.n	8002f8a <spi_stm32_transceive+0x1b6>
		return -ETIMEDOUT;
 8003046:	f06f 0673 	mvn.w	r6, #115	; 0x73
 800304a:	e6fa      	b.n	8002e42 <spi_stm32_transceive+0x6e>
 800304c:	08007758 	.word	0x08007758
 8003050:	080072ec 	.word	0x080072ec

08003054 <z_impl_hwinfo_get_device_id>:
struct stm32_uid {
	uint32_t id[3];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
 8003054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <z_impl_hwinfo_get_device_id+0x34>)
 8003058:	f8d3 2a18 	ldr.w	r2, [r3, #2584]	; 0xa18
 800305c:	ba12      	rev	r2, r2
	struct stm32_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(LL_GetUID_Word2());
 800305e:	9201      	str	r2, [sp, #4]
	dev_id.id[1] = sys_cpu_to_be32(LL_GetUID_Word1());
 8003060:	f8d3 2a14 	ldr.w	r2, [r3, #2580]	; 0xa14
 8003064:	ba12      	rev	r2, r2
 8003066:	9202      	str	r2, [sp, #8]
	dev_id.id[2] = sys_cpu_to_be32(LL_GetUID_Word0());

	if (length > sizeof(dev_id.id)) {
 8003068:	290c      	cmp	r1, #12
 800306a:	f8d3 3a10 	ldr.w	r3, [r3, #2576]	; 0xa10
 800306e:	bf28      	it	cs
 8003070:	210c      	movcs	r1, #12
 8003072:	ba1b      	rev	r3, r3
 8003074:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
 8003076:	460a      	mov	r2, r1
 8003078:	a901      	add	r1, sp, #4
	dev_id.id[2] = sys_cpu_to_be32(LL_GetUID_Word0());
 800307a:	9303      	str	r3, [sp, #12]
	memcpy(buffer, dev_id.id, length);
 800307c:	f002 fd53 	bl	8005b26 <memcpy>

	return length;
}
 8003080:	4620      	mov	r0, r4
 8003082:	b004      	add	sp, #16
 8003084:	bd10      	pop	{r4, pc}
 8003086:	bf00      	nop
 8003088:	1fff7000 	.word	0x1fff7000

0800308c <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;
 800308c:	6842      	ldr	r2, [r0, #4]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(config->usart);
 800308e:	6811      	ldr	r1, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	f101 0314 	add.w	r3, r1, #20
 8003094:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003098:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	f101 0c14 	add.w	ip, r1, #20
 80030a0:	e84c 3000 	strex	r0, r3, [ip]
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d1f3      	bne.n	8003090 <uart_stm32_irq_err_enable+0x4>
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 80030a8:	6813      	ldr	r3, [r2, #0]
 80030aa:	490e      	ldr	r1, [pc, #56]	; (80030e4 <uart_stm32_irq_err_enable+0x58>)
 80030ac:	428b      	cmp	r3, r1
 80030ae:	d007      	beq.n	80030c0 <uart_stm32_irq_err_enable+0x34>
 80030b0:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d003      	beq.n	80030c0 <uart_stm32_irq_err_enable+0x34>
 80030b8:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 80030bc:	428b      	cmp	r3, r1
 80030be:	d103      	bne.n	80030c8 <uart_stm32_irq_err_enable+0x3c>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 80030c0:	6919      	ldr	r1, [r3, #16]
 80030c2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80030c6:	6119      	str	r1, [r3, #16]
		LL_USART_EnableIT_LBD(config->usart);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(config->usart);
 80030c8:	6812      	ldr	r2, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	f102 030c 	add.w	r3, r2, #12
 80030ce:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 80030d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	f102 000c 	add.w	r0, r2, #12
 80030da:	e840 3100 	strex	r1, r3, [r0]
 80030de:	2900      	cmp	r1, #0
 80030e0:	d1f3      	bne.n	80030ca <uart_stm32_irq_err_enable+0x3e>
}
 80030e2:	4770      	bx	lr
 80030e4:	40011000 	.word	0x40011000

080030e8 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	const struct uart_stm32_config *config = dev->config;
 80030e8:	6842      	ldr	r2, [r0, #4]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(config->usart);
 80030ea:	6811      	ldr	r1, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	f101 0314 	add.w	r3, r1, #20
 80030f0:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80030f4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	f101 0c14 	add.w	ip, r1, #20
 80030fc:	e84c 3000 	strex	r0, r3, [ip]
 8003100:	2800      	cmp	r0, #0
 8003102:	d1f3      	bne.n	80030ec <uart_stm32_irq_err_disable+0x4>
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(config->usart)) {
 8003104:	6813      	ldr	r3, [r2, #0]
 8003106:	490e      	ldr	r1, [pc, #56]	; (8003140 <uart_stm32_irq_err_disable+0x58>)
 8003108:	428b      	cmp	r3, r1
 800310a:	d007      	beq.n	800311c <uart_stm32_irq_err_disable+0x34>
 800310c:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 8003110:	428b      	cmp	r3, r1
 8003112:	d003      	beq.n	800311c <uart_stm32_irq_err_disable+0x34>
 8003114:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8003118:	428b      	cmp	r3, r1
 800311a:	d103      	bne.n	8003124 <uart_stm32_irq_err_disable+0x3c>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800311c:	6919      	ldr	r1, [r3, #16]
 800311e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003122:	6119      	str	r1, [r3, #16]
		LL_USART_DisableIT_LBD(config->usart);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(config->usart);
 8003124:	6812      	ldr	r2, [r2, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	f102 030c 	add.w	r3, r2, #12
 800312a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 800312e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	f102 000c 	add.w	r0, r2, #12
 8003136:	e840 3100 	strex	r1, r3, [r0]
 800313a:	2900      	cmp	r1, #0
 800313c:	d1f3      	bne.n	8003126 <uart_stm32_irq_err_disable+0x3e>
}
 800313e:	4770      	bx	lr
 8003140:	40011000 	.word	0x40011000

08003144 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8003144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
	struct uart_stm32_data *data = dev->data;
 8003146:	6907      	ldr	r7, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8003148:	6844      	ldr	r4, [r0, #4]
{
 800314a:	4606      	mov	r6, r0
	data->clock = clk;
 800314c:	4835      	ldr	r0, [pc, #212]	; (8003224 <uart_stm32_init+0xe0>)
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	f003 fee0 	bl	8006f14 <z_device_is_ready>
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);

	if (!device_is_ready(data->clock)) {
 8003154:	2800      	cmp	r0, #0
 8003156:	d062      	beq.n	800321e <uart_stm32_init+0xda>
		LOG_ERR("clock control device not ready");
		return -ENODEV;
	}

	/* enable clock */
	err = clock_control_on(data->clock, (clock_control_subsys_t)&config->pclken[0]);
 8003158:	6878      	ldr	r0, [r7, #4]
	return api->on(dev, sys);
 800315a:	6861      	ldr	r1, [r4, #4]
 800315c:	6883      	ldr	r3, [r0, #8]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4798      	blx	r3
	if (err != 0) {
 8003162:	4605      	mov	r5, r0
 8003164:	2800      	cmp	r0, #0
 8003166:	d152      	bne.n	800320e <uart_stm32_init+0xca>
	ret = pinctrl_lookup_state(config, id, &state);
 8003168:	4601      	mov	r1, r0
 800316a:	aa01      	add	r2, sp, #4
 800316c:	69a0      	ldr	r0, [r4, #24]
 800316e:	f003 fa77 	bl	8006660 <pinctrl_lookup_state>
	if (ret < 0) {
 8003172:	2800      	cmp	r0, #0
 8003174:	da01      	bge.n	800317a <uart_stm32_init+0x36>
 8003176:	4605      	mov	r5, r0
 8003178:	e049      	b.n	800320e <uart_stm32_init+0xca>
	return pinctrl_apply_state_direct(config, state);
 800317a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800317c:	462a      	mov	r2, r5
 800317e:	7919      	ldrb	r1, [r3, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	f000 f9fd 	bl	8003580 <pinctrl_configure_pins>
		}
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 8003186:	2800      	cmp	r0, #0
 8003188:	dbf5      	blt.n	8003176 <uart_stm32_init+0x32>
		return err;
	}

	LL_USART_Disable(config->usart);
 800318a:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800318c:	68d3      	ldr	r3, [r2, #12]
 800318e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003192:	60d3      	str	r3, [r2, #12]

	/* TX/RX direction */
	LL_USART_SetTransferDirection(config->usart,
 8003194:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	f101 030c 	add.w	r3, r1, #12
 800319a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800319e:	f043 030c 	orr.w	r3, r3, #12
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a2:	f101 000c 	add.w	r0, r1, #12
 80031a6:	e840 3200 	strex	r2, r3, [r0]
 80031aa:	2a00      	cmp	r2, #0
 80031ac:	d1f3      	bne.n	8003196 <uart_stm32_init+0x52>
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 80031ae:	6923      	ldr	r3, [r4, #16]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d02f      	beq.n	8003214 <uart_stm32_init+0xd0>
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	bf12      	itee	ne
 80031b8:	2000      	movne	r0, #0
 80031ba:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 80031be:	f44f 62c0 	moveq.w	r2, #1536	; 0x600
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
	}

	/* Set datawidth and parity, 1 start bit, 1 stop bit  */
	LL_USART_ConfigCharacter(config->usart,
 80031c2:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80031c4:	68cb      	ldr	r3, [r1, #12]
 80031c6:	4310      	orrs	r0, r2
 80031c8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031cc:	4303      	orrs	r3, r0
 80031ce:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80031d0:	690b      	ldr	r3, [r1, #16]
 80031d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031d6:	610b      	str	r3, [r1, #16]
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 80031d8:	7b23      	ldrb	r3, [r4, #12]
 80031da:	b12b      	cbz	r3, 80031e8 <uart_stm32_init+0xa4>
	LL_USART_SetHWFlowCtrl(config->usart, hwctrl);
 80031dc:	6873      	ldr	r3, [r6, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80031e0:	6953      	ldr	r3, [r2, #20]
 80031e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80031e6:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80031e8:	6839      	ldr	r1, [r7, #0]
 80031ea:	4630      	mov	r0, r6
 80031ec:	f003 f9c8 	bl	8006580 <uart_stm32_set_baudrate>

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 80031f0:	7d23      	ldrb	r3, [r4, #20]
 80031f2:	b123      	cbz	r3, 80031fe <uart_stm32_init+0xba>
		LL_USART_EnableHalfDuplex(config->usart);
 80031f4:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80031f6:	6953      	ldr	r3, [r2, #20]
 80031f8:	f043 0308 	orr.w	r3, r3, #8
 80031fc:	6153      	str	r3, [r2, #20]
	if (config->tx_invert) {
		LL_USART_SetTXPinLevel(config->usart, LL_USART_TXPIN_LEVEL_INVERTED);
	}
#endif

	LL_USART_Enable(config->usart);
 80031fe:	6822      	ldr	r2, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003200:	68d3      	ldr	r3, [r2, #12]
 8003202:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003206:	60d3      	str	r3, [r2, #12]
#endif /* !USART_ISR_REACK */

#if defined(CONFIG_PM) || \
	defined(CONFIG_UART_INTERRUPT_DRIVEN) || \
	defined(CONFIG_UART_ASYNC_API)
	config->irq_config_func(dev);
 8003208:	69e3      	ldr	r3, [r4, #28]
 800320a:	4630      	mov	r0, r6
 800320c:	4798      	blx	r3
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800320e:	4628      	mov	r0, r5
 8003210:	b003      	add	sp, #12
 8003212:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8003214:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8003218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800321c:	e7d1      	b.n	80031c2 <uart_stm32_init+0x7e>
		return -ENODEV;
 800321e:	f06f 0512 	mvn.w	r5, #18
 8003222:	e7f4      	b.n	800320e <uart_stm32_init+0xca>
 8003224:	080072ec 	.word	0x080072ec

08003228 <uart_stm32_configure>:
{
 8003228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800322c:	790b      	ldrb	r3, [r1, #4]
	const struct uart_stm32_config *config = dev->config;
 800322e:	6845      	ldr	r5, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8003230:	6906      	ldr	r6, [r0, #16]
	switch (parity) {
 8003232:	2b01      	cmp	r3, #1
{
 8003234:	460c      	mov	r4, r1
	switch (parity) {
 8003236:	d07d      	beq.n	8003334 <uart_stm32_configure+0x10c>
 8003238:	1e9a      	subs	r2, r3, #2
 800323a:	4257      	negs	r7, r2
 800323c:	4157      	adcs	r7, r2
 800323e:	02bf      	lsls	r7, r7, #10
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8003240:	7962      	ldrb	r2, [r4, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8003242:	f894 8006 	ldrb.w	r8, [r4, #6]
 8003246:	2a02      	cmp	r2, #2
 8003248:	bf96      	itet	ls
 800324a:	494c      	ldrls	r1, [pc, #304]	; (800337c <uart_stm32_configure+0x154>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800324c:	f44f 5c00 	movhi.w	ip, #8192	; 0x2000
 8003250:	f831 c012 	ldrhls.w	ip, [r1, r2, lsl #1]
	switch (db) {
 8003254:	f1b8 0f04 	cmp.w	r8, #4
 8003258:	d07b      	beq.n	8003352 <uart_stm32_configure+0x12a>
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800325a:	f894 e007 	ldrb.w	lr, [r4, #7]
		if (p == UART_CFG_PARITY_NONE) {
 800325e:	2b00      	cmp	r3, #0
 8003260:	d16b      	bne.n	800333a <uart_stm32_configure+0x112>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8003262:	f1be 0f01 	cmp.w	lr, #1
 8003266:	f022 0202 	bic.w	r2, r2, #2
 800326a:	d07f      	beq.n	800336c <uart_stm32_configure+0x144>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800326c:	2a00      	cmp	r2, #0
 800326e:	d070      	beq.n	8003352 <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8003270:	f1b8 0f02 	cmp.w	r8, #2
 8003274:	d96d      	bls.n	8003352 <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 8003276:	4619      	mov	r1, r3
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8003278:	f8d5 8000 	ldr.w	r8, [r5]
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800327c:	f1be 0f00 	cmp.w	lr, #0
 8003280:	d00d      	beq.n	800329e <uart_stm32_configure+0x76>
		if (!IS_UART_HWFLOW_INSTANCE(config->usart) ||
 8003282:	4a3f      	ldr	r2, [pc, #252]	; (8003380 <uart_stm32_configure+0x158>)
 8003284:	4590      	cmp	r8, r2
 8003286:	d007      	beq.n	8003298 <uart_stm32_configure+0x70>
 8003288:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800328c:	4590      	cmp	r8, r2
 800328e:	d003      	beq.n	8003298 <uart_stm32_configure+0x70>
 8003290:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8003294:	4590      	cmp	r8, r2
 8003296:	d15c      	bne.n	8003352 <uart_stm32_configure+0x12a>
 8003298:	f1be 0f01 	cmp.w	lr, #1
 800329c:	d159      	bne.n	8003352 <uart_stm32_configure+0x12a>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800329e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80032a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a6:	f8c8 200c 	str.w	r2, [r8, #12]
	return LL_USART_GetParity(config->usart);
 80032aa:	6842      	ldr	r2, [r0, #4]
 80032ac:	f8d2 e000 	ldr.w	lr, [r2]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80032b0:	f8de 200c 	ldr.w	r2, [lr, #12]
 80032b4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 80032b8:	4297      	cmp	r7, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80032ba:	bf1f      	itttt	ne
 80032bc:	f8de 200c 	ldrne.w	r2, [lr, #12]
 80032c0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80032c4:	433a      	orrne	r2, r7
 80032c6:	f8ce 200c 	strne.w	r2, [lr, #12]
	return LL_USART_GetStopBitsLength(config->usart);
 80032ca:	6842      	ldr	r2, [r0, #4]
 80032cc:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80032d4:	4594      	cmp	ip, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80032d6:	bf1f      	itttt	ne
 80032d8:	693a      	ldrne	r2, [r7, #16]
 80032da:	f422 5240 	bicne.w	r2, r2, #12288	; 0x3000
 80032de:	ea42 020c 	orrne.w	r2, r2, ip
 80032e2:	613a      	strne	r2, [r7, #16]
	return LL_USART_GetDataWidth(config->usart);
 80032e4:	6842      	ldr	r2, [r0, #4]
 80032e6:	6817      	ldr	r7, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 80032ee:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80032f0:	bf1f      	itttt	ne
 80032f2:	68fa      	ldrne	r2, [r7, #12]
 80032f4:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 80032f8:	4313      	orrne	r3, r2
 80032fa:	60fb      	strne	r3, [r7, #12]
	return LL_USART_GetHWFlowCtrl(config->usart);
 80032fc:	6843      	ldr	r3, [r0, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003300:	6953      	ldr	r3, [r2, #20]
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8003306:	4299      	cmp	r1, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003308:	bf1f      	itttt	ne
 800330a:	6953      	ldrne	r3, [r2, #20]
 800330c:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8003310:	430b      	orrne	r3, r1
 8003312:	6153      	strne	r3, [r2, #20]
	if (cfg->baudrate != data->baud_rate) {
 8003314:	6821      	ldr	r1, [r4, #0]
 8003316:	6833      	ldr	r3, [r6, #0]
 8003318:	4299      	cmp	r1, r3
 800331a:	d003      	beq.n	8003324 <uart_stm32_configure+0xfc>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 800331c:	f003 f930 	bl	8006580 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	6033      	str	r3, [r6, #0]
	LL_USART_Enable(config->usart);
 8003324:	682a      	ldr	r2, [r5, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003326:	68d3      	ldr	r3, [r2, #12]
 8003328:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800332c:	60d3      	str	r3, [r2, #12]
	return 0;
 800332e:	2000      	movs	r0, #0
};
 8003330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (parity) {
 8003334:	f44f 67c0 	mov.w	r7, #1536	; 0x600
 8003338:	e782      	b.n	8003240 <uart_stm32_configure+0x18>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800333a:	3b03      	subs	r3, #3
 800333c:	f1be 0f01 	cmp.w	lr, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003340:	b2db      	uxtb	r3, r3
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8003342:	d109      	bne.n	8003358 <uart_stm32_configure+0x130>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003344:	2b01      	cmp	r3, #1
 8003346:	d904      	bls.n	8003352 <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 8003348:	f44f 7140 	mov.w	r1, #768	; 0x300
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800334c:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8003350:	d106      	bne.n	8003360 <uart_stm32_configure+0x138>
		return -ENOTSUP;
 8003352:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003356:	e7eb      	b.n	8003330 <uart_stm32_configure+0x108>
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8003358:	2b01      	cmp	r3, #1
 800335a:	d9fa      	bls.n	8003352 <uart_stm32_configure+0x12a>
	return LL_USART_HWCONTROL_NONE;
 800335c:	2100      	movs	r1, #0
 800335e:	e7f5      	b.n	800334c <uart_stm32_configure+0x124>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8003360:	f1b8 0f02 	cmp.w	r8, #2
 8003364:	d9f5      	bls.n	8003352 <uart_stm32_configure+0x12a>
		return LL_USART_DATAWIDTH_9B;
 8003366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336a:	e785      	b.n	8003278 <uart_stm32_configure+0x50>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800336c:	2a00      	cmp	r2, #0
 800336e:	d0f0      	beq.n	8003352 <uart_stm32_configure+0x12a>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8003370:	f1b8 0f02 	cmp.w	r8, #2
 8003374:	d9ed      	bls.n	8003352 <uart_stm32_configure+0x12a>
		return LL_USART_HWCONTROL_RTS_CTS;
 8003376:	f44f 7140 	mov.w	r1, #768	; 0x300
 800337a:	e77d      	b.n	8003278 <uart_stm32_configure+0x50>
 800337c:	08007a24 	.word	0x08007a24
 8003380:	40011000 	.word	0x40011000

08003384 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
 8003384:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
 8003386:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800338a:	699a      	ldr	r2, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800338c:	6919      	ldr	r1, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800338e:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <elapsed+0x34>)
 8003392:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8003396:	4909      	ldr	r1, [pc, #36]	; (80033bc <elapsed+0x38>)
 8003398:	d101      	bne.n	800339e <elapsed+0x1a>
	    || (val1 < val2)) {
 800339a:	4282      	cmp	r2, r0
 800339c:	d206      	bcs.n	80033ac <elapsed+0x28>
		overflow_cyc += last_load;
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	680c      	ldr	r4, [r1, #0]
 80033a2:	4422      	add	r2, r4
 80033a4:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 80033a6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80033aa:	6912      	ldr	r2, [r2, #16]
	}

	return (last_load - val2) + overflow_cyc;
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	680a      	ldr	r2, [r1, #0]
 80033b0:	4413      	add	r3, r2
}
 80033b2:	1a18      	subs	r0, r3, r0
 80033b4:	bd10      	pop	{r4, pc}
 80033b6:	bf00      	nop
 80033b8:	20000f10 	.word	0x20000f10
 80033bc:	20000f1c 	.word	0x20000f1c

080033c0 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c0:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <sys_clock_driver_init+0x28>)
 80033c2:	2210      	movs	r2, #16
 80033c4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <sys_clock_driver_init+0x2c>)
 80033ca:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80033ce:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <sys_clock_driver_init+0x30>)
 80033d2:	2000      	movs	r0, #0
 80033d4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80033d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80033da:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80033dc:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	f042 0207 	orr.w	r2, r2, #7
 80033e4:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00
 80033ec:	20000f1c 	.word	0x20000f1c
 80033f0:	20000f10 	.word	0x20000f10

080033f4 <sys_clock_isr>:
{
 80033f4:	b508      	push	{r3, lr}
	elapsed();
 80033f6:	f7ff ffc5 	bl	8003384 <elapsed>
	cycle_count += overflow_cyc;
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <sys_clock_isr+0x38>)
 80033fc:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <sys_clock_isr+0x3c>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	6811      	ldr	r1, [r2, #0]
 8003402:	4408      	add	r0, r1
 8003404:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <sys_clock_isr+0x40>)
 800340c:	6813      	ldr	r3, [r2, #0]
 800340e:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8003412:	1ac0      	subs	r0, r0, r3
 8003414:	fbb0 f0f1 	udiv	r0, r0, r1
		announced_cycles += dticks * CYC_PER_TICK;
 8003418:	fb01 3300 	mla	r3, r1, r0, r3
 800341c:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800341e:	f002 f813 	bl	8005448 <sys_clock_announce>
}
 8003422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8003426:	f7fe bdcd 	b.w	8001fc4 <z_arm_exc_exit>
 800342a:	bf00      	nop
 800342c:	20000f10 	.word	0x20000f10
 8003430:	20000f18 	.word	0x20000f18
 8003434:	20000f14 	.word	0x20000f14

08003438 <sys_clock_set_timeout>:
{
 8003438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800343c:	4e31      	ldr	r6, [pc, #196]	; (8003504 <sys_clock_set_timeout+0xcc>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800343e:	2900      	cmp	r1, #0
 8003440:	d054      	beq.n	80034ec <sys_clock_set_timeout+0xb4>
 8003442:	1c42      	adds	r2, r0, #1
 8003444:	d10a      	bne.n	800345c <sys_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8003446:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800344a:	6913      	ldr	r3, [r2, #16]
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8003452:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003456:	6033      	str	r3, [r6, #0]
}
 8003458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t last_load_ = last_load;
 800345c:	6835      	ldr	r5, [r6, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800345e:	2801      	cmp	r0, #1
 8003460:	dd4a      	ble.n	80034f8 <sys_clock_set_timeout+0xc0>
 8003462:	f640 1819 	movw	r8, #2329	; 0x919
 8003466:	4540      	cmp	r0, r8
 8003468:	dc01      	bgt.n	800346e <sys_clock_set_timeout+0x36>
 800346a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	__asm__ volatile(
 800346e:	f04f 0310 	mov.w	r3, #16
 8003472:	f3ef 8411 	mrs	r4, BASEPRI
 8003476:	f383 8812 	msr	BASEPRI_MAX, r3
 800347a:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800347e:	f7ff ff81 	bl	8003384 <elapsed>
	cycle_count += pending;
 8003482:	4f21      	ldr	r7, [pc, #132]	; (8003508 <sys_clock_set_timeout+0xd0>)
	val1 = SysTick->VAL;
 8003484:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	overflow_cyc = 0U;
 8003488:	2100      	movs	r1, #0
	val1 = SysTick->VAL;
 800348a:	f8d3 c018 	ldr.w	ip, [r3, #24]
	cycle_count += pending;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	18c2      	adds	r2, r0, r3
	overflow_cyc = 0U;
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <sys_clock_set_timeout+0xd4>)
 8003494:	6019      	str	r1, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <sys_clock_set_timeout+0xd8>)
 8003498:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800349a:	1ad1      	subs	r1, r2, r3
 800349c:	d42f      	bmi.n	80034fe <sys_clock_set_timeout+0xc6>
		delay = ticks * CYC_PER_TICK;
 800349e:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
		delay += unannounced;
 80034a2:	fb00 1108 	mla	r1, r0, r8, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80034a6:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
		delay -= unannounced;
 80034aa:	1a9b      	subs	r3, r3, r2
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80034ac:	311f      	adds	r1, #31
 80034ae:	fbb1 f1f0 	udiv	r1, r1, r0
		delay -= unannounced;
 80034b2:	fb00 3301 	mla	r3, r0, r1, r3
		delay = MAX(delay, MIN_DELAY);
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ba:	d920      	bls.n	80034fe <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 80034bc:	4915      	ldr	r1, [pc, #84]	; (8003514 <sys_clock_set_timeout+0xdc>)
 80034be:	428b      	cmp	r3, r1
 80034c0:	bf28      	it	cs
 80034c2:	460b      	movcs	r3, r1
	val2 = SysTick->VAL;
 80034c4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		last_load = MIN_DELAY;
 80034c8:	6033      	str	r3, [r6, #0]
	val2 = SysTick->VAL;
 80034ca:	6988      	ldr	r0, [r1, #24]
	SysTick->LOAD = last_load - 1;
 80034cc:	3b01      	subs	r3, #1
 80034ce:	614b      	str	r3, [r1, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80034d0:	2300      	movs	r3, #0
 80034d2:	618b      	str	r3, [r1, #24]
	if (val1 < val2) {
 80034d4:	4584      	cmp	ip, r0
 80034d6:	ebac 0300 	sub.w	r3, ip, r0
		cycle_count += (val1 + (last_load_ - val2));
 80034da:	bf38      	it	cc
 80034dc:	195b      	addcc	r3, r3, r5
		cycle_count += (val1 - val2);
 80034de:	441a      	add	r2, r3
 80034e0:	603a      	str	r2, [r7, #0]
	__asm__ volatile(
 80034e2:	f384 8811 	msr	BASEPRI, r4
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	e7b5      	b.n	8003458 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80034ec:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 80034ee:	6835      	ldr	r5, [r6, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80034f0:	d1b5      	bne.n	800345e <sys_clock_set_timeout+0x26>
 80034f2:	f640 1019 	movw	r0, #2329	; 0x919
 80034f6:	e7b8      	b.n	800346a <sys_clock_set_timeout+0x32>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80034f8:	f04f 0800 	mov.w	r8, #0
 80034fc:	e7b7      	b.n	800346e <sys_clock_set_timeout+0x36>
 80034fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003502:	e7df      	b.n	80034c4 <sys_clock_set_timeout+0x8c>
 8003504:	20000f1c 	.word	0x20000f1c
 8003508:	20000f18 	.word	0x20000f18
 800350c:	20000f10 	.word	0x20000f10
 8003510:	20000f14 	.word	0x20000f14
 8003514:	00ffdf20 	.word	0x00ffdf20

08003518 <sys_clock_elapsed>:
{
 8003518:	b510      	push	{r4, lr}
	__asm__ volatile(
 800351a:	f04f 0310 	mov.w	r3, #16
 800351e:	f3ef 8411 	mrs	r4, BASEPRI
 8003522:	f383 8812 	msr	BASEPRI_MAX, r3
 8003526:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800352a:	f7ff ff2b 	bl	8003384 <elapsed>
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <sys_clock_elapsed+0x34>)
 8003530:	4a07      	ldr	r2, [pc, #28]	; (8003550 <sys_clock_elapsed+0x38>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	4403      	add	r3, r0
	__asm__ volatile(
 800353a:	f384 8811 	msr	BASEPRI, r4
 800353e:	f3bf 8f6f 	isb	sy
}
 8003542:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8003546:	fbb3 f0f0 	udiv	r0, r3, r0
 800354a:	bd10      	pop	{r4, pc}
 800354c:	20000f18 	.word	0x20000f18
 8003550:	20000f14 	.word	0x20000f14

08003554 <sys_clock_cycle_get_32>:
{
 8003554:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003556:	f04f 0310 	mov.w	r3, #16
 800355a:	f3ef 8411 	mrs	r4, BASEPRI
 800355e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003562:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 8003566:	f7ff ff0d 	bl	8003384 <elapsed>
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <sys_clock_cycle_get_32+0x28>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4418      	add	r0, r3
	__asm__ volatile(
 8003570:	f384 8811 	msr	BASEPRI, r4
 8003574:	f3bf 8f6f 	isb	sy
}
 8003578:	bd10      	pop	{r4, pc}
 800357a:	bf00      	nop
 800357c:	20000f18 	.word	0x20000f18

08003580 <pinctrl_configure_pins>:
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8003580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	port_device = gpio_ports[STM32_PORT(pin)];
 8003584:	4f20      	ldr	r7, [pc, #128]	; (8003608 <pinctrl_configure_pins+0x88>)
 8003586:	4604      	mov	r4, r0
 8003588:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	uint32_t pin, mux;
	uint32_t pin_cgf = 0;
 800358c:	2500      	movs	r5, #0
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800358e:	42b4      	cmp	r4, r6
 8003590:	d101      	bne.n	8003596 <pinctrl_configure_pins+0x16>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
 8003592:	2000      	movs	r0, #0
 8003594:	e014      	b.n	80035c0 <pinctrl_configure_pins+0x40>
		mux = pins[i].pinmux;
 8003596:	6822      	ldr	r2, [r4, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8003598:	06d1      	lsls	r1, r2, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800359a:	f002 091f 	and.w	r9, r2, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800359e:	d411      	bmi.n	80035c4 <pinctrl_configure_pins+0x44>
			pin_cgf = pins[i].pincfg | STM32_MODER_ALT_MODE;
 80035a0:	6865      	ldr	r5, [r4, #4]
 80035a2:	f045 0520 	orr.w	r5, r5, #32
		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 80035a6:	f3c2 1a47 	ubfx	sl, r2, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 80035aa:	f3c2 2243 	ubfx	r2, r2, #9, #4
 80035ae:	2a0a      	cmp	r2, #10
 80035b0:	d827      	bhi.n	8003602 <pinctrl_configure_pins+0x82>
	port_device = gpio_ports[STM32_PORT(pin)];
 80035b2:	f857 8022 	ldr.w	r8, [r7, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80035b6:	f1b8 0f00 	cmp.w	r8, #0
 80035ba:	d111      	bne.n	80035e0 <pinctrl_configure_pins+0x60>
		return -ENODEV;
 80035bc:	f06f 0012 	mvn.w	r0, #18
}
 80035c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 80035c4:	f1b9 0f10 	cmp.w	r9, #16
 80035c8:	d008      	beq.n	80035dc <pinctrl_configure_pins+0x5c>
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_GPIO) {
 80035ca:	f1b9 0f11 	cmp.w	r9, #17
 80035ce:	d1ea      	bne.n	80035a6 <pinctrl_configure_pins+0x26>
			uint32_t gpio_out = pins[i].pincfg &
 80035d0:	6865      	ldr	r5, [r4, #4]
			if (gpio_out != 0) {
 80035d2:	052b      	lsls	r3, r5, #20
 80035d4:	d5e7      	bpl.n	80035a6 <pinctrl_configure_pins+0x26>
				pin_cgf = pins[i].pincfg | STM32_MODER_OUTPUT_MODE;
 80035d6:	f045 0510 	orr.w	r5, r5, #16
 80035da:	e7e4      	b.n	80035a6 <pinctrl_configure_pins+0x26>
			pin_cgf = STM32_MODER_ANALOG_MODE;
 80035dc:	2530      	movs	r5, #48	; 0x30
 80035de:	e7e2      	b.n	80035a6 <pinctrl_configure_pins+0x26>
 80035e0:	4640      	mov	r0, r8
 80035e2:	f003 fc97 	bl	8006f14 <z_device_is_ready>
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d0e8      	beq.n	80035bc <pinctrl_configure_pins+0x3c>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), pin_cgf, pin_func);
 80035ea:	464b      	mov	r3, r9
 80035ec:	462a      	mov	r2, r5
 80035ee:	f00a 010f 	and.w	r1, sl, #15
 80035f2:	4640      	mov	r0, r8
 80035f4:	f002 fce1 	bl	8005fba <gpio_stm32_configure>
		if (ret < 0) {
 80035f8:	2800      	cmp	r0, #0
 80035fa:	f104 0408 	add.w	r4, r4, #8
 80035fe:	dac6      	bge.n	800358e <pinctrl_configure_pins+0xe>
 8003600:	e7de      	b.n	80035c0 <pinctrl_configure_pins+0x40>
		return -EINVAL;
 8003602:	f06f 0015 	mvn.w	r0, #21
 8003606:	e7db      	b.n	80035c0 <pinctrl_configure_pins+0x40>
 8003608:	080079dc 	.word	0x080079dc

0800360c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360e:	4910      	ldr	r1, [pc, #64]	; (8003650 <HAL_RCC_GetSysClockFreq+0x44>)
 8003610:	688b      	ldr	r3, [r1, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b08      	cmp	r3, #8
 8003618:	d118      	bne.n	800364c <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800361a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361e:	6849      	ldr	r1, [r1, #4]
 8003620:	480c      	ldr	r0, [pc, #48]	; (8003654 <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003622:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003626:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800362a:	bf18      	it	ne
 800362c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800362e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003632:	fba1 0100 	umull	r0, r1, r1, r0
 8003636:	f7fc fdad 	bl	8000194 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800363a:	4b05      	ldr	r3, [pc, #20]	; (8003650 <HAL_RCC_GetSysClockFreq+0x44>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003642:	3301      	adds	r3, #1
 8003644:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003646:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800364a:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800364c:	4801      	ldr	r0, [pc, #4]	; (8003654 <HAL_RCC_GetSysClockFreq+0x48>)
  return sysclockfreq;
 800364e:	e7fc      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x3e>
 8003650:	40023800 	.word	0x40023800
 8003654:	00f42400 	.word	0x00f42400

08003658 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003658:	4b01      	ldr	r3, [pc, #4]	; (8003660 <HAL_RCC_GetHCLKFreq+0x8>)
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	2000016c 	.word	0x2000016c

08003664 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003668:	6806      	ldr	r6, [r0, #0]
{
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800366e:	4630      	mov	r0, r6
 8003670:	f003 fc3b 	bl	8006eea <USB_GetMode>
 8003674:	9003      	str	r0, [sp, #12]
 8003676:	2800      	cmp	r0, #0
 8003678:	f040 8155 	bne.w	8003926 <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800367c:	6820      	ldr	r0, [r4, #0]
 800367e:	f003 fc06 	bl	8006e8e <USB_ReadInterrupts>
 8003682:	2800      	cmp	r0, #0
 8003684:	f000 814f 	beq.w	8003926 <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003688:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800368c:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800368e:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8003692:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003696:	f003 fbfa 	bl	8006e8e <USB_ReadInterrupts>
 800369a:	0787      	lsls	r7, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800369c:	bf41      	itttt	mi
 800369e:	6822      	ldrmi	r2, [r4, #0]
 80036a0:	6953      	ldrmi	r3, [r2, #20]
 80036a2:	f003 0302 	andmi.w	r3, r3, #2
 80036a6:	6153      	strmi	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036a8:	6820      	ldr	r0, [r4, #0]
 80036aa:	f003 fbf0 	bl	8006e8e <USB_ReadInterrupts>
 80036ae:	06c0      	lsls	r0, r0, #27
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036b0:	f506 6500 	add.w	r5, r6, #2048	; 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036b4:	d52c      	bpl.n	8003710 <HAL_PCD_IRQHandler+0xac>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	6993      	ldr	r3, [r2, #24]
 80036ba:	f023 0310 	bic.w	r3, r3, #16
 80036be:	6193      	str	r3, [r2, #24]

      RegVal = USBx->GRXSTSP;
 80036c0:	f8d6 8020 	ldr.w	r8, [r6, #32]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036c4:	f3c8 4343 	ubfx	r3, r8, #17, #4
 80036c8:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80036ca:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036ce:	f040 812d 	bne.w	800392c <HAL_PCD_IRQHandler+0x2c8>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036d6:	ea18 0f03 	tst.w	r8, r3
 80036da:	d014      	beq.n	8003706 <HAL_PCD_IRQHandler+0xa2>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036dc:	2324      	movs	r3, #36	; 0x24
 80036de:	fb03 4707 	mla	r7, r3, r7, r4
 80036e2:	f3c8 190a 	ubfx	r9, r8, #4, #11
 80036e6:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80036ea:	464a      	mov	r2, r9
 80036ec:	4630      	mov	r0, r6
 80036ee:	f003 fb2e 	bl	8006d4e <USB_ReadPacket>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036f2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80036f6:	444b      	add	r3, r9
 80036f8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036fc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8003700:	444b      	add	r3, r9
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003702:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003706:	6822      	ldr	r2, [r4, #0]
 8003708:	6993      	ldr	r3, [r2, #24]
 800370a:	f043 0310 	orr.w	r3, r3, #16
 800370e:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003710:	6820      	ldr	r0, [r4, #0]
 8003712:	f003 fbbc 	bl	8006e8e <USB_ReadInterrupts>
 8003716:	0301      	lsls	r1, r0, #12
 8003718:	f100 811a 	bmi.w	8003950 <HAL_PCD_IRQHandler+0x2ec>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800371c:	6820      	ldr	r0, [r4, #0]
 800371e:	f003 fbb6 	bl	8006e8e <USB_ReadInterrupts>
 8003722:	0342      	lsls	r2, r0, #13
 8003724:	d50d      	bpl.n	8003742 <HAL_PCD_IRQHandler+0xde>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	f003 fbbd 	bl	8006ea6 <USB_ReadDevAllInEpInterrupt>
 800372c:	4627      	mov	r7, r4
 800372e:	9004      	str	r0, [sp, #16]

      epnum = 0U;

      while (ep_intr != 0U)
 8003730:	f506 6b10 	add.w	fp, r6, #2304	; 0x900
      epnum = 0U;
 8003734:	f04f 0a00 	mov.w	sl, #0
      while (ep_intr != 0U)
 8003738:	9b04      	ldr	r3, [sp, #16]
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800373a:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800373c:	2b00      	cmp	r3, #0
 800373e:	f040 81cc 	bne.w	8003ada <HAL_PCD_IRQHandler+0x476>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003742:	6820      	ldr	r0, [r4, #0]
 8003744:	f003 fba3 	bl	8006e8e <USB_ReadInterrupts>
 8003748:	2800      	cmp	r0, #0
 800374a:	da13      	bge.n	8003774 <HAL_PCD_IRQHandler+0x110>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800374c:	686b      	ldr	r3, [r5, #4]
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	606b      	str	r3, [r5, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003754:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8003758:	2b01      	cmp	r3, #1
 800375a:	f040 8268 	bne.w	8003c2e <HAL_PCD_IRQHandler+0x5ca>
      {
        hpcd->LPM_State = LPM_L0;
 800375e:	2100      	movs	r1, #0
 8003760:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003764:	4620      	mov	r0, r4
 8003766:	f003 f9c3 	bl	8006af0 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	6953      	ldr	r3, [r2, #20]
 800376e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003772:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003774:	6820      	ldr	r0, [r4, #0]
 8003776:	f003 fb8a 	bl	8006e8e <USB_ReadInterrupts>
 800377a:	0501      	lsls	r1, r0, #20
 800377c:	d50a      	bpl.n	8003794 <HAL_PCD_IRQHandler+0x130>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800377e:	68ab      	ldr	r3, [r5, #8]
 8003780:	07da      	lsls	r2, r3, #31
 8003782:	d502      	bpl.n	800378a <HAL_PCD_IRQHandler+0x126>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003784:	4620      	mov	r0, r4
 8003786:	f7ff f8e9 	bl	800295c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	6953      	ldr	r3, [r2, #20]
 800378e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003792:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	f003 fb7a 	bl	8006e8e <USB_ReadInterrupts>
 800379a:	04c3      	lsls	r3, r0, #19
 800379c:	d533      	bpl.n	8003806 <HAL_PCD_IRQHandler+0x1a2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800379e:	686b      	ldr	r3, [r5, #4]
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037a6:	2110      	movs	r1, #16
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	f000 fb35 	bl	8003e18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ae:	f506 6310 	add.w	r3, r6, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037b2:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b6:	6862      	ldr	r2, [r4, #4]
 80037b8:	9803      	ldr	r0, [sp, #12]
 80037ba:	4282      	cmp	r2, r0
 80037bc:	f200 823b 	bhi.w	8003c36 <HAL_PCD_IRQHandler+0x5d2>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037c0:	69eb      	ldr	r3, [r5, #28]
 80037c2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80037c6:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 8250 	beq.w	8003c70 <HAL_PCD_IRQHandler+0x60c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037d0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80037d4:	f043 030b 	orr.w	r3, r3, #11
 80037d8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80037de:	f043 030b 	orr.w	r3, r3, #11
 80037e2:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037e4:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
 80037e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037ec:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037f0:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80037f4:	7c21      	ldrb	r1, [r4, #16]
 80037f6:	6820      	ldr	r0, [r4, #0]
 80037f8:	f000 fdbe 	bl	8004378 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037fc:	6822      	ldr	r2, [r4, #0]
 80037fe:	6953      	ldr	r3, [r2, #20]
 8003800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003804:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	f003 fb41 	bl	8006e8e <USB_ReadInterrupts>
 800380c:	0487      	lsls	r7, r0, #18
 800380e:	d516      	bpl.n	800383e <HAL_PCD_IRQHandler+0x1da>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003810:	6820      	ldr	r0, [r4, #0]
 8003812:	f003 fb6e 	bl	8006ef2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	f003 f9ee 	bl	8006bf8 <USB_GetDevSpeed>
 800381c:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800381e:	6827      	ldr	r7, [r4, #0]
 8003820:	f7ff ff1a 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003824:	7b22      	ldrb	r2, [r4, #12]
 8003826:	4601      	mov	r1, r0
 8003828:	4638      	mov	r0, r7
 800382a:	f000 fa85 	bl	8003d38 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800382e:	4620      	mov	r0, r4
 8003830:	f7ff f856 	bl	80028e0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003834:	6822      	ldr	r2, [r4, #0]
 8003836:	6953      	ldr	r3, [r2, #20]
 8003838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383c:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800383e:	6820      	ldr	r0, [r4, #0]
 8003840:	f003 fb25 	bl	8006e8e <USB_ReadInterrupts>
 8003844:	0700      	lsls	r0, r0, #28
 8003846:	d507      	bpl.n	8003858 <HAL_PCD_IRQHandler+0x1f4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003848:	4620      	mov	r0, r4
 800384a:	f002 ffe6 	bl	800681a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800384e:	6822      	ldr	r2, [r4, #0]
 8003850:	6953      	ldr	r3, [r2, #20]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	6153      	str	r3, [r2, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	f003 fb18 	bl	8006e8e <USB_ReadInterrupts>
 800385e:	0601      	lsls	r1, r0, #24
 8003860:	f100 8211 	bmi.w	8003c86 <HAL_PCD_IRQHandler+0x622>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	f003 fb12 	bl	8006e8e <USB_ReadInterrupts>
 800386a:	02c2      	lsls	r2, r0, #11
 800386c:	d50c      	bpl.n	8003888 <HAL_PCD_IRQHandler+0x224>
 800386e:	46a0      	mov	r8, r4
 8003870:	f506 6912 	add.w	r9, r6, #2336	; 0x920
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003874:	2701      	movs	r7, #1
 8003876:	6863      	ldr	r3, [r4, #4]
 8003878:	42bb      	cmp	r3, r7
 800387a:	f200 821d 	bhi.w	8003cb8 <HAL_PCD_IRQHandler+0x654>
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	6953      	ldr	r3, [r2, #20]
 8003882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003886:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003888:	6820      	ldr	r0, [r4, #0]
 800388a:	f003 fb00 	bl	8006e8e <USB_ReadInterrupts>
 800388e:	0283      	lsls	r3, r0, #10
 8003890:	d52c      	bpl.n	80038ec <HAL_PCD_IRQHandler+0x288>
 8003892:	4623      	mov	r3, r4
 8003894:	f506 6032 	add.w	r0, r6, #2848	; 0xb20
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003898:	2101      	movs	r1, #1
 800389a:	6862      	ldr	r2, [r4, #4]
 800389c:	428a      	cmp	r2, r1
 800389e:	d920      	bls.n	80038e2 <HAL_PCD_IRQHandler+0x27e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038a0:	f893 c2a4 	ldrb.w	ip, [r3, #676]	; 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038a4:	6802      	ldr	r2, [r0, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038a6:	f1bc 0f01 	cmp.w	ip, #1
 80038aa:	f040 821b 	bne.w	8003ce4 <HAL_PCD_IRQHandler+0x680>
 80038ae:	2a00      	cmp	r2, #0
 80038b0:	f280 8218 	bge.w	8003ce4 <HAL_PCD_IRQHandler+0x680>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038b4:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 80038b8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80038bc:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038c0:	42ba      	cmp	r2, r7
 80038c2:	f040 820f 	bne.w	8003ce4 <HAL_PCD_IRQHandler+0x680>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038c6:	f883 c2a3 	strb.w	ip, [r3, #675]	; 0x2a3

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038ca:	69b2      	ldr	r2, [r6, #24]
 80038cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038d0:	61b2      	str	r2, [r6, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038d2:	6972      	ldr	r2, [r6, #20]
 80038d4:	0617      	lsls	r7, r2, #24
 80038d6:	f100 8205 	bmi.w	8003ce4 <HAL_PCD_IRQHandler+0x680>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038da:	686b      	ldr	r3, [r5, #4]
 80038dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e0:	606b      	str	r3, [r5, #4]
            break;
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038e2:	6822      	ldr	r2, [r4, #0]
 80038e4:	6953      	ldr	r3, [r2, #20]
 80038e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ea:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	f003 face 	bl	8006e8e <USB_ReadInterrupts>
 80038f2:	0041      	lsls	r1, r0, #1
 80038f4:	d507      	bpl.n	8003906 <HAL_PCD_IRQHandler+0x2a2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7ff f81c 	bl	8002934 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038fc:	6822      	ldr	r2, [r4, #0]
 80038fe:	6953      	ldr	r3, [r2, #20]
 8003900:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003904:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	f003 fac1 	bl	8006e8e <USB_ReadInterrupts>
 800390c:	0742      	lsls	r2, r0, #29
 800390e:	d50a      	bpl.n	8003926 <HAL_PCD_IRQHandler+0x2c2>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	685d      	ldr	r5, [r3, #4]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003914:	076b      	lsls	r3, r5, #29
 8003916:	d502      	bpl.n	800391e <HAL_PCD_IRQHandler+0x2ba>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003918:	4620      	mov	r0, r4
 800391a:	f7ff f815 	bl	8002948 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	6853      	ldr	r3, [r2, #4]
 8003922:	432b      	orrs	r3, r5
 8003924:	6053      	str	r3, [r2, #4]
    }
  }
}
 8003926:	b009      	add	sp, #36	; 0x24
 8003928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800392c:	2b06      	cmp	r3, #6
 800392e:	f47f aeea 	bne.w	8003706 <HAL_PCD_IRQHandler+0xa2>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003932:	2208      	movs	r2, #8
 8003934:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 8003938:	4630      	mov	r0, r6
 800393a:	f003 fa08 	bl	8006d4e <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800393e:	2324      	movs	r3, #36	; 0x24
 8003940:	fb03 4707 	mla	r7, r3, r7, r4
 8003944:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8003948:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800394c:	4443      	add	r3, r8
 800394e:	e6d8      	b.n	8003702 <HAL_PCD_IRQHandler+0x9e>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003950:	6820      	ldr	r0, [r4, #0]
 8003952:	f003 faa0 	bl	8006e96 <USB_ReadDevAllOutEpInterrupt>
 8003956:	f506 6830 	add.w	r8, r6, #2816	; 0xb00
 800395a:	9004      	str	r0, [sp, #16]
      while (ep_intr != 0U)
 800395c:	46a2      	mov	sl, r4
      epnum = 0U;
 800395e:	2700      	movs	r7, #0
      while (ep_intr != 0U)
 8003960:	9b04      	ldr	r3, [sp, #16]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003962:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8003964:	2b00      	cmp	r3, #0
 8003966:	f43f aed9 	beq.w	800371c <HAL_PCD_IRQHandler+0xb8>
        if ((ep_intr & 0x1U) != 0U)
 800396a:	9b04      	ldr	r3, [sp, #16]
 800396c:	07db      	lsls	r3, r3, #31
 800396e:	d562      	bpl.n	8003a36 <HAL_PCD_IRQHandler+0x3d2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003970:	fa5f fb87 	uxtb.w	fp, r7
 8003974:	4659      	mov	r1, fp
 8003976:	f003 fa9e 	bl	8006eb6 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800397a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800397e:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003980:	d01b      	beq.n	80039ba <HAL_PCD_IRQHandler+0x356>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003982:	2301      	movs	r3, #1
 8003984:	f8c8 3008 	str.w	r3, [r8, #8]
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003988:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 800398a:	6921      	ldr	r1, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800398c:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003990:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003994:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 8003998:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800399a:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 800399c:	d178      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x42c>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800399e:	0711      	lsls	r1, r2, #28
 80039a0:	d507      	bpl.n	80039b2 <HAL_PCD_IRQHandler+0x34e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039a2:	49b1      	ldr	r1, [pc, #708]	; (8003c68 <HAL_PCD_IRQHandler+0x604>)
 80039a4:	458c      	cmp	ip, r1
 80039a6:	d908      	bls.n	80039ba <HAL_PCD_IRQHandler+0x356>
 80039a8:	0410      	lsls	r0, r2, #16
 80039aa:	d506      	bpl.n	80039ba <HAL_PCD_IRQHandler+0x356>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039b0:	e002      	b.n	80039b8 <HAL_PCD_IRQHandler+0x354>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039b2:	0691      	lsls	r1, r2, #26
 80039b4:	d548      	bpl.n	8003a48 <HAL_PCD_IRQHandler+0x3e4>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b6:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039b8:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039ba:	f019 0f08 	tst.w	r9, #8
 80039be:	d00f      	beq.n	80039e0 <HAL_PCD_IRQHandler+0x37c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039c0:	2308      	movs	r3, #8
 80039c2:	f8c8 3008 	str.w	r3, [r8, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039c6:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039c8:	49a7      	ldr	r1, [pc, #668]	; (8003c68 <HAL_PCD_IRQHandler+0x604>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039ca:	6c18      	ldr	r0, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d4:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039d6:	689a      	ldr	r2, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d8:	d86e      	bhi.n	8003ab8 <HAL_PCD_IRQHandler+0x454>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039da:	4620      	mov	r0, r4
 80039dc:	f7fe ffd2 	bl	8002984 <HAL_PCD_SetupStageCallback>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039e0:	f019 0f10 	tst.w	r9, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80039e4:	bf1c      	itt	ne
 80039e6:	2310      	movne	r3, #16
 80039e8:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80039ec:	f019 0f02 	tst.w	r9, #2
 80039f0:	d014      	beq.n	8003a1c <HAL_PCD_IRQHandler+0x3b8>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80039f2:	6973      	ldr	r3, [r6, #20]
 80039f4:	061a      	lsls	r2, r3, #24
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039f6:	bf42      	ittt	mi
 80039f8:	686b      	ldrmi	r3, [r5, #4]
 80039fa:	f443 6380 	orrmi.w	r3, r3, #1024	; 0x400
 80039fe:	606b      	strmi	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
 8003a00:	f89a 327f 	ldrb.w	r3, [sl, #639]	; 0x27f
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x3b2>
              ep->is_iso_incomplete = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f88a 327f 	strb.w	r3, [sl, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a0e:	4659      	mov	r1, fp
 8003a10:	4620      	mov	r0, r4
 8003a12:	f002 ff03 	bl	800681c <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a16:	2302      	movs	r3, #2
 8003a18:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a1c:	f019 0f20 	tst.w	r9, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a20:	bf1c      	itt	ne
 8003a22:	2320      	movne	r3, #32
 8003a24:	f8c8 3008 	strne.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a28:	f419 5f00 	tst.w	r9, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a2c:	bf1c      	itt	ne
 8003a2e:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8003a32:	f8c8 3008 	strne.w	r3, [r8, #8]
        ep_intr >>= 1U;
 8003a36:	9b04      	ldr	r3, [sp, #16]
 8003a38:	085b      	lsrs	r3, r3, #1
        epnum++;
 8003a3a:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8003a3c:	9304      	str	r3, [sp, #16]
 8003a3e:	f108 0820 	add.w	r8, r8, #32
 8003a42:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 8003a46:	e78b      	b.n	8003960 <HAL_PCD_IRQHandler+0x2fc>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a48:	f012 0f28 	tst.w	r2, #40	; 0x28
 8003a4c:	d1b5      	bne.n	80039ba <HAL_PCD_IRQHandler+0x356>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a4e:	4986      	ldr	r1, [pc, #536]	; (8003c68 <HAL_PCD_IRQHandler+0x604>)
 8003a50:	458c      	cmp	ip, r1
 8003a52:	d901      	bls.n	8003a58 <HAL_PCD_IRQHandler+0x3f4>
 8003a54:	0412      	lsls	r2, r2, #16
 8003a56:	d4a9      	bmi.n	80039ac <HAL_PCD_IRQHandler+0x348>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	f8da 3298 	ldr.w	r3, [sl, #664]	; 0x298
 8003a5e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	f8ca 329c 	str.w	r3, [sl, #668]	; 0x29c
        if (epnum == 0U)
 8003a68:	b96f      	cbnz	r7, 8003a86 <HAL_PCD_IRQHandler+0x422>
          if (ep->xfer_len == 0U)
 8003a6a:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
 8003a6e:	b92a      	cbnz	r2, 8003a7c <HAL_PCD_IRQHandler+0x418>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a70:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003a74:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a76:	f000 fc7f 	bl	8004378 <USB_EP0_OutStart>
 8003a7a:	e004      	b.n	8003a86 <HAL_PCD_IRQHandler+0x422>
            ep->xfer_buff += ep->xfer_count;
 8003a7c:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8003a80:	441a      	add	r2, r3
 8003a82:	f8c4 228c 	str.w	r2, [r4, #652]	; 0x28c
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a86:	4659      	mov	r1, fp
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f002 f927 	bl	8005cdc <HAL_PCD_DataOutStageCallback>
 8003a8e:	e794      	b.n	80039ba <HAL_PCD_IRQHandler+0x356>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a90:	4976      	ldr	r1, [pc, #472]	; (8003c6c <HAL_PCD_IRQHandler+0x608>)
 8003a92:	458c      	cmp	ip, r1
 8003a94:	d106      	bne.n	8003aa4 <HAL_PCD_IRQHandler+0x440>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a96:	0411      	lsls	r1, r2, #16
 8003a98:	d488      	bmi.n	80039ac <HAL_PCD_IRQHandler+0x348>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a9a:	0690      	lsls	r0, r2, #26
 8003a9c:	d5f3      	bpl.n	8003a86 <HAL_PCD_IRQHandler+0x422>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aa2:	e7f0      	b.n	8003a86 <HAL_PCD_IRQHandler+0x422>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003aa4:	2f00      	cmp	r7, #0
 8003aa6:	d1ee      	bne.n	8003a86 <HAL_PCD_IRQHandler+0x422>
 8003aa8:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ea      	bne.n	8003a86 <HAL_PCD_IRQHandler+0x422>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ab0:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003ab4:	4639      	mov	r1, r7
 8003ab6:	e7de      	b.n	8003a76 <HAL_PCD_IRQHandler+0x412>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab8:	0411      	lsls	r1, r2, #16
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aba:	bf44      	itt	mi
 8003abc:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 8003ac0:	609a      	strmi	r2, [r3, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f7fe ff5e 	bl	8002984 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ac8:	6921      	ldr	r1, [r4, #16]
 8003aca:	2901      	cmp	r1, #1
 8003acc:	d188      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x37c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003ad4:	f000 fc50 	bl	8004378 <USB_EP0_OutStart>
 8003ad8:	e782      	b.n	80039e0 <HAL_PCD_IRQHandler+0x37c>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ada:	9b04      	ldr	r3, [sp, #16]
 8003adc:	07db      	lsls	r3, r3, #31
 8003ade:	f140 809d 	bpl.w	8003c1c <HAL_PCD_IRQHandler+0x5b8>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ae2:	fa5f f38a 	uxtb.w	r3, sl
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	9307      	str	r3, [sp, #28]
 8003aea:	f003 f9ed 	bl	8006ec8 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003aee:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003af2:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003af4:	d020      	beq.n	8003b38 <HAL_PCD_IRQHandler+0x4d4>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003af6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003af8:	2101      	movs	r1, #1
 8003afa:	f00a 020f 	and.w	r2, sl, #15
 8003afe:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b02:	ea23 0302 	bic.w	r3, r3, r2
 8003b06:	636b      	str	r3, [r5, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b08:	f8cb 1008 	str.w	r1, [fp, #8]
            if (hpcd->Init.dma_enable == 1U)
 8003b0c:	6921      	ldr	r1, [r4, #16]
 8003b0e:	2901      	cmp	r1, #1
 8003b10:	d10d      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x4ca>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b16:	4413      	add	r3, r2
 8003b18:	64fb      	str	r3, [r7, #76]	; 0x4c
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b1a:	f1ba 0f00 	cmp.w	sl, #0
 8003b1e:	d106      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x4ca>
 8003b20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b22:	b923      	cbnz	r3, 8003b2e <HAL_PCD_IRQHandler+0x4ca>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8003b2a:	f000 fc25 	bl	8004378 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b2e:	fa5f f18a 	uxtb.w	r1, sl
 8003b32:	4620      	mov	r0, r4
 8003b34:	f002 f8e8 	bl	8005d08 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b38:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b3c:	bf1c      	itt	ne
 8003b3e:	2308      	movne	r3, #8
 8003b40:	f8cb 3008 	strne.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b44:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b48:	bf1c      	itt	ne
 8003b4a:	2310      	movne	r3, #16
 8003b4c:	f8cb 3008 	strne.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b50:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b54:	bf1c      	itt	ne
 8003b56:	2340      	movne	r3, #64	; 0x40
 8003b58:	f8cb 3008 	strne.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b5c:	f018 0f02 	tst.w	r8, #2
 8003b60:	d012      	beq.n	8003b88 <HAL_PCD_IRQHandler+0x524>
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b62:	4651      	mov	r1, sl
 8003b64:	4630      	mov	r0, r6
 8003b66:	f000 f957 	bl	8003e18 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8003b6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d107      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x51e>
              ep->is_iso_incomplete = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b78:	fa5f f18a 	uxtb.w	r1, sl
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f002 fe4e 	bl	800681e <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b82:	2302      	movs	r3, #2
 8003b84:	f8cb 3008 	str.w	r3, [fp, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	9305      	str	r3, [sp, #20]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b8c:	f018 0f80 	tst.w	r8, #128	; 0x80
 8003b90:	d044      	beq.n	8003c1c <HAL_PCD_IRQHandler+0x5b8>
  if (ep->xfer_count > ep->xfer_len)
 8003b92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d840      	bhi.n	8003c1c <HAL_PCD_IRQHandler+0x5b8>
  len = ep->xfer_len - ep->xfer_count;
 8003b9a:	eba3 0802 	sub.w	r8, r3, r2
  len32b = (len + 3U) / 4U;
 8003b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba0:	4598      	cmp	r8, r3
 8003ba2:	bf28      	it	cs
 8003ba4:	4698      	movcs	r8, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba6:	9b05      	ldr	r3, [sp, #20]
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003bac:	f108 0803 	add.w	r8, r8, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bb0:	eb03 134a 	add.w	r3, r3, sl, lsl #5
  len32b = (len + 3U) / 4U;
 8003bb4:	ea4f 0898 	mov.w	r8, r8, lsr #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bb8:	9306      	str	r3, [sp, #24]
 8003bba:	9b06      	ldr	r3, [sp, #24]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bbe:	6999      	ldr	r1, [r3, #24]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc2:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bc4:	4541      	cmp	r1, r8
 8003bc6:	d327      	bcc.n	8003c18 <HAL_PCD_IRQHandler+0x5b4>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d30b      	bcc.n	8003be4 <HAL_PCD_IRQHandler+0x580>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bcc:	9b05      	ldr	r3, [sp, #20]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bce:	f00a 000f 	and.w	r0, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bd2:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4081      	lsls	r1, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bda:	ea22 0201 	bic.w	r2, r2, r1
 8003bde:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 8003be2:	e01b      	b.n	8003c1c <HAL_PCD_IRQHandler+0x5b8>
    len = ep->xfer_len - ep->xfer_count;
 8003be4:	eba3 0902 	sub.w	r9, r3, r2
 8003be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bea:	9a07      	ldr	r2, [sp, #28]
 8003bec:	9805      	ldr	r0, [sp, #20]
 8003bee:	4599      	cmp	r9, r3
 8003bf0:	bf28      	it	cs
 8003bf2:	4699      	movcs	r9, r3
 8003bf4:	7c23      	ldrb	r3, [r4, #16]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003bfa:	fa1f f389 	uxth.w	r3, r9
 8003bfe:	f003 f893 	bl	8006d28 <USB_WritePacket>
    ep->xfer_buff  += len;
 8003c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c04:	444b      	add	r3, r9
 8003c06:	64fb      	str	r3, [r7, #76]	; 0x4c
    ep->xfer_count += len;
 8003c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    len32b = (len + 3U) / 4U;
 8003c0a:	f109 0803 	add.w	r8, r9, #3
    ep->xfer_count += len;
 8003c0e:	444b      	add	r3, r9
    len32b = (len + 3U) / 4U;
 8003c10:	ea4f 0898 	mov.w	r8, r8, lsr #2
    ep->xfer_count += len;
 8003c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c16:	e7d0      	b.n	8003bba <HAL_PCD_IRQHandler+0x556>
  if (ep->xfer_len <= ep->xfer_count)
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d2d7      	bcs.n	8003bcc <HAL_PCD_IRQHandler+0x568>
        ep_intr >>= 1U;
 8003c1c:	9b04      	ldr	r3, [sp, #16]
 8003c1e:	085b      	lsrs	r3, r3, #1
        epnum++;
 8003c20:	f10a 0a01 	add.w	sl, sl, #1
        ep_intr >>= 1U;
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	3724      	adds	r7, #36	; 0x24
 8003c28:	f10b 0b20 	add.w	fp, fp, #32
 8003c2c:	e584      	b.n	8003738 <HAL_PCD_IRQHandler+0xd4>
        HAL_PCD_ResumeCallback(hpcd);
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7fe fe9e 	bl	8002970 <HAL_PCD_ResumeCallback>
 8003c34:	e599      	b.n	800376a <HAL_PCD_IRQHandler+0x106>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c36:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003c3e:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c40:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c44:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c48:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003c4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c50:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c54:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003c58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c5c:	9a03      	ldr	r2, [sp, #12]
 8003c5e:	3201      	adds	r2, #1
 8003c60:	9203      	str	r2, [sp, #12]
 8003c62:	3320      	adds	r3, #32
 8003c64:	e5a7      	b.n	80037b6 <HAL_PCD_IRQHandler+0x152>
 8003c66:	bf00      	nop
 8003c68:	4f54300a 	.word	0x4f54300a
 8003c6c:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c70:	696b      	ldr	r3, [r5, #20]
 8003c72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c7a:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c7c:	692b      	ldr	r3, [r5, #16]
 8003c7e:	f043 030b 	orr.w	r3, r3, #11
 8003c82:	612b      	str	r3, [r5, #16]
 8003c84:	e5ae      	b.n	80037e4 <HAL_PCD_IRQHandler+0x180>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c86:	69b3      	ldr	r3, [r6, #24]
 8003c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c8c:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c8e:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c90:	f204 287f 	addw	r8, r4, #639	; 0x27f
 8003c94:	f04f 0924 	mov.w	r9, #36	; 0x24
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c98:	6863      	ldr	r3, [r4, #4]
 8003c9a:	42bb      	cmp	r3, r7
 8003c9c:	f67f ade2 	bls.w	8003864 <HAL_PCD_IRQHandler+0x200>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ca0:	fb09 f307 	mul.w	r3, r9, r7
 8003ca4:	f818 3003 	ldrb.w	r3, [r8, r3]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d103      	bne.n	8003cb4 <HAL_PCD_IRQHandler+0x650>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003cac:	b2f9      	uxtb	r1, r7
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f002 feeb 	bl	8006a8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cb4:	3701      	adds	r7, #1
 8003cb6:	e7ef      	b.n	8003c98 <HAL_PCD_IRQHandler+0x634>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cb8:	f898 3064 	ldrb.w	r3, [r8, #100]	; 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003cbc:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d109      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x674>
 8003cc4:	2a00      	cmp	r2, #0
 8003cc6:	da07      	bge.n	8003cd8 <HAL_PCD_IRQHandler+0x674>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003cc8:	f067 017f 	orn	r1, r7, #127	; 0x7f
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ccc:	f888 3063 	strb.w	r3, [r8, #99]	; 0x63
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003cd0:	b2c9      	uxtb	r1, r1
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f002 fed9 	bl	8006a8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cd8:	3701      	adds	r7, #1
 8003cda:	f108 0824 	add.w	r8, r8, #36	; 0x24
 8003cde:	f109 0920 	add.w	r9, r9, #32
 8003ce2:	e5c8      	b.n	8003876 <HAL_PCD_IRQHandler+0x212>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ce4:	3101      	adds	r1, #1
 8003ce6:	3324      	adds	r3, #36	; 0x24
 8003ce8:	3020      	adds	r0, #32
 8003cea:	e5d6      	b.n	800389a <HAL_PCD_IRQHandler+0x236>

08003cec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003cec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003cee:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8003cf0:	4910      	ldr	r1, [pc, #64]	; (8003d34 <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 8003cf2:	9301      	str	r3, [sp, #4]
{
 8003cf4:	4602      	mov	r2, r0
    count++;
 8003cf6:	9b01      	ldr	r3, [sp, #4]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003cfc:	9b01      	ldr	r3, [sp, #4]
 8003cfe:	428b      	cmp	r3, r1
 8003d00:	d815      	bhi.n	8003d2e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d02:	6913      	ldr	r3, [r2, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	daf6      	bge.n	8003cf6 <USB_CoreReset+0xa>

  /* Core Soft Reset */
  count = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d0c:	6913      	ldr	r3, [r2, #16]

  do
  {
    count++;

    if (count > 200000U)
 8003d0e:	4909      	ldr	r1, [pc, #36]	; (8003d34 <USB_CoreReset+0x48>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6113      	str	r3, [r2, #16]
    count++;
 8003d16:	9b01      	ldr	r3, [sp, #4]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003d1c:	9b01      	ldr	r3, [sp, #4]
 8003d1e:	428b      	cmp	r3, r1
 8003d20:	d805      	bhi.n	8003d2e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d22:	6910      	ldr	r0, [r2, #16]
 8003d24:	f010 0001 	ands.w	r0, r0, #1
 8003d28:	d1f5      	bne.n	8003d16 <USB_CoreReset+0x2a>

  return HAL_OK;
}
 8003d2a:	b002      	add	sp, #8
 8003d2c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003d2e:	2003      	movs	r0, #3
 8003d30:	e7fb      	b.n	8003d2a <USB_CoreReset+0x3e>
 8003d32:	bf00      	nop
 8003d34:	00030d40 	.word	0x00030d40

08003d38 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8003d38:	2a02      	cmp	r2, #2
 8003d3a:	d14a      	bne.n	8003dd2 <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <USB_SetTurnaroundTime+0xa4>)
 8003d3e:	4a28      	ldr	r2, [pc, #160]	; (8003de0 <USB_SetTurnaroundTime+0xa8>)
 8003d40:	440b      	add	r3, r1
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d939      	bls.n	8003dba <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d46:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <USB_SetTurnaroundTime+0xac>)
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <USB_SetTurnaroundTime+0xb0>)
 8003d4a:	440b      	add	r3, r1
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d936      	bls.n	8003dbe <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d50:	4a26      	ldr	r2, [pc, #152]	; (8003dec <USB_SetTurnaroundTime+0xb4>)
 8003d52:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8003d56:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d931      	bls.n	8003dc2 <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d5e:	4a24      	ldr	r2, [pc, #144]	; (8003df0 <USB_SetTurnaroundTime+0xb8>)
 8003d60:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8003d64:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d32c      	bcc.n	8003dc6 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <USB_SetTurnaroundTime+0xbc>)
 8003d6e:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <USB_SetTurnaroundTime+0xc0>)
 8003d70:	440b      	add	r3, r1
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d929      	bls.n	8003dca <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <USB_SetTurnaroundTime+0xc4>)
 8003d78:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <USB_SetTurnaroundTime+0xc8>)
 8003d7a:	440b      	add	r3, r1
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d326      	bcc.n	8003dce <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d80:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <USB_SetTurnaroundTime+0xcc>)
 8003d82:	4a21      	ldr	r2, [pc, #132]	; (8003e08 <USB_SetTurnaroundTime+0xd0>)
 8003d84:	440b      	add	r3, r1
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d323      	bcc.n	8003dd2 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d8a:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <USB_SetTurnaroundTime+0xd4>)
 8003d8c:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8003d90:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d31e      	bcc.n	8003dd6 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x7U;
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d9c:	440b      	add	r3, r1
      UsbTrd = 0x7U;
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	bf2c      	ite	cs
 8003da2:	2306      	movcs	r3, #6
 8003da4:	2307      	movcc	r3, #7
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003da6:	68c2      	ldr	r2, [r0, #12]
 8003da8:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8003dac:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003dae:	68c2      	ldr	r2, [r0, #12]
 8003db0:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8003db4:	60c3      	str	r3, [r0, #12]
}
 8003db6:	2000      	movs	r0, #0
 8003db8:	4770      	bx	lr
      UsbTrd = 0xFU;
 8003dba:	230f      	movs	r3, #15
 8003dbc:	e7f3      	b.n	8003da6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 8003dbe:	230e      	movs	r3, #14
 8003dc0:	e7f1      	b.n	8003da6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 8003dc2:	230d      	movs	r3, #13
 8003dc4:	e7ef      	b.n	8003da6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	e7ed      	b.n	8003da6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 8003dca:	230b      	movs	r3, #11
 8003dcc:	e7eb      	b.n	8003da6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 8003dce:	230a      	movs	r3, #10
 8003dd0:	e7e9      	b.n	8003da6 <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003dd2:	2309      	movs	r3, #9
 8003dd4:	e7e7      	b.n	8003da6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	e7e5      	b.n	8003da6 <USB_SetTurnaroundTime+0x6e>
 8003dda:	bf00      	nop
 8003ddc:	ff275340 	.word	0xff275340
 8003de0:	000c34ff 	.word	0x000c34ff
 8003de4:	ff1b1e40 	.word	0xff1b1e40
 8003de8:	000f423f 	.word	0x000f423f
 8003dec:	00124f7f 	.word	0x00124f7f
 8003df0:	0013d620 	.word	0x0013d620
 8003df4:	fee5b660 	.word	0xfee5b660
 8003df8:	0016e35f 	.word	0x0016e35f
 8003dfc:	feced300 	.word	0xfeced300
 8003e00:	001b7740 	.word	0x001b7740
 8003e04:	feb35bc0 	.word	0xfeb35bc0
 8003e08:	002191c0 	.word	0x002191c0
 8003e0c:	00387520 	.word	0x00387520
 8003e10:	fe5954e0 	.word	0xfe5954e0
 8003e14:	00419ce0 	.word	0x00419ce0

08003e18 <USB_FlushTxFifo>:
{
 8003e18:	b082      	sub	sp, #8
 8003e1a:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8003e1c:	2300      	movs	r3, #0
    if (count > 200000U)
 8003e1e:	4810      	ldr	r0, [pc, #64]	; (8003e60 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8003e20:	9301      	str	r3, [sp, #4]
    count++;
 8003e22:	9b01      	ldr	r3, [sp, #4]
 8003e24:	3301      	adds	r3, #1
 8003e26:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003e28:	9b01      	ldr	r3, [sp, #4]
 8003e2a:	4283      	cmp	r3, r0
 8003e2c:	d815      	bhi.n	8003e5a <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e2e:	6913      	ldr	r3, [r2, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	daf6      	bge.n	8003e22 <USB_FlushTxFifo+0xa>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e34:	0189      	lsls	r1, r1, #6
 8003e36:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e3e:	6111      	str	r1, [r2, #16]
    if (count > 200000U)
 8003e40:	4907      	ldr	r1, [pc, #28]	; (8003e60 <USB_FlushTxFifo+0x48>)
    count++;
 8003e42:	9b01      	ldr	r3, [sp, #4]
 8003e44:	3301      	adds	r3, #1
 8003e46:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003e48:	9b01      	ldr	r3, [sp, #4]
 8003e4a:	428b      	cmp	r3, r1
 8003e4c:	d805      	bhi.n	8003e5a <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e4e:	6910      	ldr	r0, [r2, #16]
 8003e50:	f010 0020 	ands.w	r0, r0, #32
 8003e54:	d1f5      	bne.n	8003e42 <USB_FlushTxFifo+0x2a>
}
 8003e56:	b002      	add	sp, #8
 8003e58:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003e5a:	2003      	movs	r0, #3
 8003e5c:	e7fb      	b.n	8003e56 <USB_FlushTxFifo+0x3e>
 8003e5e:	bf00      	nop
 8003e60:	00030d40 	.word	0x00030d40

08003e64 <USB_FlushRxFifo>:
{
 8003e64:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003e66:	2300      	movs	r3, #0
    if (count > 200000U)
 8003e68:	490f      	ldr	r1, [pc, #60]	; (8003ea8 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 8003e6a:	9301      	str	r3, [sp, #4]
{
 8003e6c:	4602      	mov	r2, r0
    count++;
 8003e6e:	9b01      	ldr	r3, [sp, #4]
 8003e70:	3301      	adds	r3, #1
 8003e72:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003e74:	9b01      	ldr	r3, [sp, #4]
 8003e76:	428b      	cmp	r3, r1
 8003e78:	d813      	bhi.n	8003ea2 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e7a:	6913      	ldr	r3, [r2, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	daf6      	bge.n	8003e6e <USB_FlushRxFifo+0xa>
  count = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003e84:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <USB_FlushRxFifo+0x44>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e86:	2310      	movs	r3, #16
 8003e88:	6113      	str	r3, [r2, #16]
    count++;
 8003e8a:	9b01      	ldr	r3, [sp, #4]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003e90:	9b01      	ldr	r3, [sp, #4]
 8003e92:	428b      	cmp	r3, r1
 8003e94:	d805      	bhi.n	8003ea2 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e96:	6910      	ldr	r0, [r2, #16]
 8003e98:	f010 0010 	ands.w	r0, r0, #16
 8003e9c:	d1f5      	bne.n	8003e8a <USB_FlushRxFifo+0x26>
}
 8003e9e:	b002      	add	sp, #8
 8003ea0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003ea2:	2003      	movs	r0, #3
 8003ea4:	e7fb      	b.n	8003e9e <USB_FlushRxFifo+0x3a>
 8003ea6:	bf00      	nop
 8003ea8:	00030d40 	.word	0x00030d40

08003eac <USB_DevInit>:
{
 8003eac:	b084      	sub	sp, #16
 8003eae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	a809      	add	r0, sp, #36	; 0x24
 8003eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003eba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003ec6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8003eca:	3301      	adds	r3, #1
 8003ecc:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8003ece:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003ed0:	d1f7      	bne.n	8003ec2 <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ed2:	f504 6800 	add.w	r8, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8003ed6:	2e00      	cmp	r6, #0
 8003ed8:	d173      	bne.n	8003fc2 <USB_DevInit+0x116>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003eda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	f8c8 3004 	str.w	r3, [r8, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eec:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ef0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003ef4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ef6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003efc:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f04:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003f08:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d161      	bne.n	8003fd6 <USB_DevInit+0x12a>
    if (cfg.speed == USBD_HS_SPEED)
 8003f12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f14:	2900      	cmp	r1, #0
 8003f16:	d15c      	bne.n	8003fd2 <USB_DevInit+0x126>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f002 fe66 	bl	8006bea <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f1e:	2110      	movs	r1, #16
 8003f20:	4620      	mov	r0, r4
 8003f22:	f7ff ff79 	bl	8003e18 <USB_FlushTxFifo>
 8003f26:	4605      	mov	r5, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff ff9b 	bl	8003e64 <USB_FlushRxFifo>
 8003f2e:	4328      	orrs	r0, r5
 8003f30:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8003f32:	2300      	movs	r3, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f34:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8003f36:	f8c8 3010 	str.w	r3, [r8, #16]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f3a:	bf18      	it	ne
 8003f3c:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 8003f3e:	f8c8 3014 	str.w	r3, [r8, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f42:	f504 6210 	add.w	r2, r4, #2304	; 0x900
 8003f46:	f8c8 301c 	str.w	r3, [r8, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f4a:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f4c:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f50:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f54:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f58:	42bb      	cmp	r3, r7
 8003f5a:	d13e      	bne.n	8003fda <USB_DevInit+0x12e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f62:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f64:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f68:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f6c:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f70:	42ba      	cmp	r2, r7
 8003f72:	d144      	bne.n	8003ffe <USB_DevInit+0x152>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f7c:	f8c8 3010 	str.w	r3, [r8, #16]
  USBx->GINTMSK = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f84:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003f88:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8003f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f8c:	b91b      	cbnz	r3, 8003f96 <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f8e:	69a3      	ldr	r3, [r4, #24]
 8003f90:	f043 0310 	orr.w	r3, r3, #16
 8003f94:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f96:	69a2      	ldr	r2, [r4, #24]
 8003f98:	4b22      	ldr	r3, [pc, #136]	; (8004024 <USB_DevInit+0x178>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003f9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fa0:	b11b      	cbz	r3, 8003faa <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fa2:	69a3      	ldr	r3, [r4, #24]
 8003fa4:	f043 0308 	orr.w	r3, r3, #8
 8003fa8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003faa:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fac:	bf01      	itttt	eq
 8003fae:	69a3      	ldreq	r3, [r4, #24]
 8003fb0:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003fb4:	f043 0304 	orreq.w	r3, r3, #4
 8003fb8:	61a3      	streq	r3, [r4, #24]
}
 8003fba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fbe:	b004      	add	sp, #16
 8003fc0:	4770      	bx	lr
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003fc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fc8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fd0:	e794      	b.n	8003efc <USB_DevInit+0x50>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	e7a0      	b.n	8003f18 <USB_DevInit+0x6c>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fd6:	2103      	movs	r1, #3
 8003fd8:	e79e      	b.n	8003f18 <USB_DevInit+0x6c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fda:	f8d2 9000 	ldr.w	r9, [r2]
 8003fde:	f1b9 0f00 	cmp.w	r9, #0
 8003fe2:	da0a      	bge.n	8003ffa <USB_DevInit+0x14e>
      if (i == 0U)
 8003fe4:	b93b      	cbnz	r3, 8003ff6 <USB_DevInit+0x14a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fe6:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003fea:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fec:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003fee:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ff2:	3220      	adds	r2, #32
 8003ff4:	e7b0      	b.n	8003f58 <USB_DevInit+0xac>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ff6:	6015      	str	r5, [r2, #0]
 8003ff8:	e7f7      	b.n	8003fea <USB_DevInit+0x13e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ffa:	6011      	str	r1, [r2, #0]
 8003ffc:	e7f5      	b.n	8003fea <USB_DevInit+0x13e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ffe:	f8d3 9000 	ldr.w	r9, [r3]
 8004002:	f1b9 0f00 	cmp.w	r9, #0
 8004006:	da0a      	bge.n	800401e <USB_DevInit+0x172>
      if (i == 0U)
 8004008:	b93a      	cbnz	r2, 800401a <USB_DevInit+0x16e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800400a:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800400e:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004010:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004012:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004016:	3320      	adds	r3, #32
 8004018:	e7aa      	b.n	8003f70 <USB_DevInit+0xc4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800401a:	601d      	str	r5, [r3, #0]
 800401c:	e7f7      	b.n	800400e <USB_DevInit+0x162>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800401e:	6019      	str	r1, [r3, #0]
 8004020:	e7f5      	b.n	800400e <USB_DevInit+0x162>
 8004022:	bf00      	nop
 8004024:	803c3800 	.word	0x803c3800

08004028 <USB_DeactivateEndpoint>:
{
 8004028:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 800402a:	784a      	ldrb	r2, [r1, #1]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800402c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800402e:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004030:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8004034:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8004038:	d129      	bne.n	800408e <USB_DeactivateEndpoint+0x66>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800403a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800403e:	2a00      	cmp	r2, #0
 8004040:	da0b      	bge.n	800405a <USB_DeactivateEndpoint+0x32>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004042:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004046:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800404a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800404e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004052:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004056:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800405a:	780a      	ldrb	r2, [r1, #0]
 800405c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800405e:	2401      	movs	r4, #1
 8004060:	f002 020f 	and.w	r2, r2, #15
 8004064:	fa04 f202 	lsl.w	r2, r4, r2
 8004068:	ea25 0202 	bic.w	r2, r5, r2
 800406c:	63c2      	str	r2, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800406e:	7809      	ldrb	r1, [r1, #0]
 8004070:	69c2      	ldr	r2, [r0, #28]
 8004072:	f001 010f 	and.w	r1, r1, #15
 8004076:	408c      	lsls	r4, r1
 8004078:	ea22 0204 	bic.w	r2, r2, r4
 800407c:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800407e:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004082:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <USB_DeactivateEndpoint+0xb8>)
 8004084:	400a      	ands	r2, r1
 8004086:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800408a:	2000      	movs	r0, #0
 800408c:	bd30      	pop	{r4, r5, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800408e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8004092:	2a00      	cmp	r2, #0
 8004094:	da0b      	bge.n	80040ae <USB_DeactivateEndpoint+0x86>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004096:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800409a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800409e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80040a2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80040a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80040aa:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040ae:	780a      	ldrb	r2, [r1, #0]
 80040b0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80040b2:	2401      	movs	r4, #1
 80040b4:	f002 020f 	and.w	r2, r2, #15
 80040b8:	fa04 f202 	lsl.w	r2, r4, r2
 80040bc:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 80040c0:	63c2      	str	r2, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040c2:	7809      	ldrb	r1, [r1, #0]
 80040c4:	69c2      	ldr	r2, [r0, #28]
 80040c6:	f001 010f 	and.w	r1, r1, #15
 80040ca:	408c      	lsls	r4, r1
 80040cc:	ea22 4204 	bic.w	r2, r2, r4, lsl #16
 80040d0:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040d2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 80040d6:	4a03      	ldr	r2, [pc, #12]	; (80040e4 <USB_DeactivateEndpoint+0xbc>)
 80040d8:	400a      	ands	r2, r1
 80040da:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80040de:	e7d4      	b.n	800408a <USB_DeactivateEndpoint+0x62>
 80040e0:	ec337800 	.word	0xec337800
 80040e4:	eff37800 	.word	0xeff37800

080040e8 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 80040e8:	784b      	ldrb	r3, [r1, #1]
{
 80040ea:	b5f0      	push	{r4, r5, r6, r7, lr}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040ec:	780c      	ldrb	r4, [r1, #0]
 80040ee:	4d38      	ldr	r5, [pc, #224]	; (80041d0 <USB_EP0StartXfer+0xe8>)
 80040f0:	4e38      	ldr	r6, [pc, #224]	; (80041d4 <USB_EP0StartXfer+0xec>)
  if (ep->is_in == 1U)
 80040f2:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040f4:	eb00 1444 	add.w	r4, r0, r4, lsl #5
  if (ep->is_in == 1U)
 80040f8:	d143      	bne.n	8004182 <USB_EP0StartXfer+0x9a>
    if (ep->xfer_len == 0U)
 80040fa:	698f      	ldr	r7, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040fc:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8004100:	b9b7      	cbnz	r7, 8004130 <USB_EP0StartXfer+0x48>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004102:	691f      	ldr	r7, [r3, #16]
 8004104:	403d      	ands	r5, r7
 8004106:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004108:	691d      	ldr	r5, [r3, #16]
 800410a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800410e:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004110:	691d      	ldr	r5, [r3, #16]
 8004112:	4035      	ands	r5, r6
    if (dma == 1U)
 8004114:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004116:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004118:	d11f      	bne.n	800415a <USB_EP0StartXfer+0x72>
      if ((uint32_t)ep->dma_addr != 0U)
 800411a:	694a      	ldr	r2, [r1, #20]
 800411c:	b102      	cbz	r2, 8004120 <USB_EP0StartXfer+0x38>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800411e:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004120:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8004124:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004128:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800412c:	2000      	movs	r0, #0
 800412e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004130:	691f      	ldr	r7, [r3, #16]
 8004132:	403e      	ands	r6, r7
 8004134:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004136:	691e      	ldr	r6, [r3, #16]
 8004138:	4035      	ands	r5, r6
 800413a:	611d      	str	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800413c:	68cd      	ldr	r5, [r1, #12]
 800413e:	698e      	ldr	r6, [r1, #24]
 8004140:	42ae      	cmp	r6, r5
        ep->xfer_len = ep->maxpacket;
 8004142:	bf88      	it	hi
 8004144:	618d      	strhi	r5, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004146:	691d      	ldr	r5, [r3, #16]
 8004148:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800414c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800414e:	698d      	ldr	r5, [r1, #24]
 8004150:	691e      	ldr	r6, [r3, #16]
 8004152:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004156:	4335      	orrs	r5, r6
 8004158:	e7dc      	b.n	8004114 <USB_EP0StartXfer+0x2c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800415a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800415e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004162:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8004166:	698b      	ldr	r3, [r1, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0df      	beq.n	800412c <USB_EP0StartXfer+0x44>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800416c:	780a      	ldrb	r2, [r1, #0]
 800416e:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8004172:	f002 020f 	and.w	r2, r2, #15
 8004176:	2301      	movs	r3, #1
 8004178:	4093      	lsls	r3, r2
 800417a:	4323      	orrs	r3, r4
 800417c:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8004180:	e7d4      	b.n	800412c <USB_EP0StartXfer+0x44>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004182:	f8d4 0b10 	ldr.w	r0, [r4, #2832]	; 0xb10
 8004186:	4030      	ands	r0, r6
 8004188:	f8c4 0b10 	str.w	r0, [r4, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800418c:	f8d4 0b10 	ldr.w	r0, [r4, #2832]	; 0xb10
 8004190:	4028      	ands	r0, r5
 8004192:	f8c4 0b10 	str.w	r0, [r4, #2832]	; 0xb10
    if (ep->xfer_len > 0U)
 8004196:	698d      	ldr	r5, [r1, #24]
 8004198:	68c8      	ldr	r0, [r1, #12]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800419a:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    if (ep->xfer_len > 0U)
 800419e:	b105      	cbz	r5, 80041a2 <USB_EP0StartXfer+0xba>
      ep->xfer_len = ep->maxpacket;
 80041a0:	6188      	str	r0, [r1, #24]
    ep->xfer_size = ep->maxpacket;
 80041a2:	61c8      	str	r0, [r1, #28]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041a4:	6918      	ldr	r0, [r3, #16]
 80041a6:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 80041aa:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80041ac:	69c8      	ldr	r0, [r1, #28]
 80041ae:	691d      	ldr	r5, [r3, #16]
 80041b0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80041b4:	4328      	orrs	r0, r5
    if (dma == 1U)
 80041b6:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80041b8:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 80041ba:	d102      	bne.n	80041c2 <USB_EP0StartXfer+0xda>
      if ((uint32_t)ep->xfer_buff != 0U)
 80041bc:	690a      	ldr	r2, [r1, #16]
 80041be:	b102      	cbz	r2, 80041c2 <USB_EP0StartXfer+0xda>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041c0:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041c2:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80041c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041ca:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 80041ce:	e7ad      	b.n	800412c <USB_EP0StartXfer+0x44>
 80041d0:	e007ffff 	.word	0xe007ffff
 80041d4:	fff80000 	.word	0xfff80000

080041d8 <USB_EPStartXfer>:
{
 80041d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80041da:	784c      	ldrb	r4, [r1, #1]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041dc:	780b      	ldrb	r3, [r1, #0]
 80041de:	4e63      	ldr	r6, [pc, #396]	; (800436c <USB_EPStartXfer+0x194>)
 80041e0:	4f63      	ldr	r7, [pc, #396]	; (8004370 <USB_EPStartXfer+0x198>)
  if (ep->is_in == 1U)
 80041e2:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041e4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80041e8:	d179      	bne.n	80042de <USB_EPStartXfer+0x106>
    if (ep->xfer_len == 0U)
 80041ea:	698d      	ldr	r5, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041ec:	f503 6410 	add.w	r4, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 80041f0:	bb3d      	cbnz	r5, 8004242 <USB_EPStartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041f2:	6925      	ldr	r5, [r4, #16]
 80041f4:	4035      	ands	r5, r6
 80041f6:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041f8:	6925      	ldr	r5, [r4, #16]
 80041fa:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80041fe:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004200:	6925      	ldr	r5, [r4, #16]
 8004202:	403d      	ands	r5, r7
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004204:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8004206:	2a01      	cmp	r2, #1
 8004208:	d13e      	bne.n	8004288 <USB_EPStartXfer+0xb0>
      if ((uint32_t)ep->dma_addr != 0U)
 800420a:	694a      	ldr	r2, [r1, #20]
 800420c:	b102      	cbz	r2, 8004210 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800420e:	6162      	str	r2, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8004210:	790a      	ldrb	r2, [r1, #4]
 8004212:	2a01      	cmp	r2, #1
 8004214:	d10c      	bne.n	8004230 <USB_EPStartXfer+0x58>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004216:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800421a:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800421e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004222:	bf0c      	ite	eq
 8004224:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004228:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800422c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004230:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8004234:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004238:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800423c:	2000      	movs	r0, #0
 800423e:	b003      	add	sp, #12
 8004240:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004242:	6925      	ldr	r5, [r4, #16]
 8004244:	403d      	ands	r5, r7
 8004246:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004248:	6925      	ldr	r5, [r4, #16]
 800424a:	4035      	ands	r5, r6
 800424c:	6125      	str	r5, [r4, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800424e:	68ce      	ldr	r6, [r1, #12]
 8004250:	698d      	ldr	r5, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004252:	6927      	ldr	r7, [r4, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004254:	4435      	add	r5, r6
 8004256:	3d01      	subs	r5, #1
 8004258:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800425c:	4e45      	ldr	r6, [pc, #276]	; (8004374 <USB_EPStartXfer+0x19c>)
 800425e:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8004262:	433d      	orrs	r5, r7
 8004264:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004266:	698d      	ldr	r5, [r1, #24]
 8004268:	6926      	ldr	r6, [r4, #16]
 800426a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800426e:	4335      	orrs	r5, r6
 8004270:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8004272:	790d      	ldrb	r5, [r1, #4]
 8004274:	2d01      	cmp	r5, #1
 8004276:	d1c6      	bne.n	8004206 <USB_EPStartXfer+0x2e>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004278:	6925      	ldr	r5, [r4, #16]
 800427a:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800427e:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004280:	6925      	ldr	r5, [r4, #16]
 8004282:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004286:	e7bd      	b.n	8004204 <USB_EPStartXfer+0x2c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004288:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800428c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8004290:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004294:	790c      	ldrb	r4, [r1, #4]
 8004296:	2c01      	cmp	r4, #1
 8004298:	d00d      	beq.n	80042b6 <USB_EPStartXfer+0xde>
        if (ep->xfer_len > 0U)
 800429a:	698b      	ldr	r3, [r1, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0cd      	beq.n	800423c <USB_EPStartXfer+0x64>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042a0:	780a      	ldrb	r2, [r1, #0]
 80042a2:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80042a6:	f002 020f 	and.w	r2, r2, #15
 80042aa:	2301      	movs	r3, #1
 80042ac:	4093      	lsls	r3, r2
 80042ae:	4323      	orrs	r3, r4
 80042b0:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80042b4:	e7c2      	b.n	800423c <USB_EPStartXfer+0x64>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042b6:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80042ba:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042be:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80042c2:	bf0c      	ite	eq
 80042c4:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042c8:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 80042cc:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042d0:	9200      	str	r2, [sp, #0]
 80042d2:	8b0b      	ldrh	r3, [r1, #24]
 80042d4:	780a      	ldrb	r2, [r1, #0]
 80042d6:	6909      	ldr	r1, [r1, #16]
 80042d8:	f002 fd26 	bl	8006d28 <USB_WritePacket>
 80042dc:	e7ae      	b.n	800423c <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042de:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 80042e2:	403d      	ands	r5, r7
 80042e4:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042e8:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 80042ec:	4035      	ands	r5, r6
 80042ee:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    if (ep->xfer_len == 0U)
 80042f2:	698d      	ldr	r5, [r1, #24]
 80042f4:	68ce      	ldr	r6, [r1, #12]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042f6:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
    if (ep->xfer_len == 0U)
 80042fa:	bb25      	cbnz	r5, 8004346 <USB_EPStartXfer+0x16e>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042fc:	6925      	ldr	r5, [r4, #16]
 80042fe:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8004302:	432e      	orrs	r6, r5
 8004304:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004306:	6925      	ldr	r5, [r4, #16]
 8004308:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
    if (dma == 1U)
 800430c:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800430e:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8004310:	d102      	bne.n	8004318 <USB_EPStartXfer+0x140>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004312:	690a      	ldr	r2, [r1, #16]
 8004314:	b102      	cbz	r2, 8004318 <USB_EPStartXfer+0x140>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004316:	6162      	str	r2, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8004318:	790a      	ldrb	r2, [r1, #4]
 800431a:	2a01      	cmp	r2, #1
 800431c:	d10c      	bne.n	8004338 <USB_EPStartXfer+0x160>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800431e:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8004322:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004326:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800432a:	bf0c      	ite	eq
 800432c:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004330:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8004334:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004338:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800433c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8004340:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004344:	e77a      	b.n	800423c <USB_EPStartXfer+0x64>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004346:	4435      	add	r5, r6
 8004348:	3d01      	subs	r5, #1
 800434a:	fbb5 f5f6 	udiv	r5, r5, r6
 800434e:	b2ad      	uxth	r5, r5
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004350:	436e      	muls	r6, r5
 8004352:	61ce      	str	r6, [r1, #28]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004354:	4e07      	ldr	r6, [pc, #28]	; (8004374 <USB_EPStartXfer+0x19c>)
 8004356:	6927      	ldr	r7, [r4, #16]
 8004358:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 800435c:	433d      	orrs	r5, r7
 800435e:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004360:	69cd      	ldr	r5, [r1, #28]
 8004362:	6926      	ldr	r6, [r4, #16]
 8004364:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004368:	4335      	orrs	r5, r6
 800436a:	e7cf      	b.n	800430c <USB_EPStartXfer+0x134>
 800436c:	e007ffff 	.word	0xe007ffff
 8004370:	fff80000 	.word	0xfff80000
 8004374:	1ff80000 	.word	0x1ff80000

08004378 <USB_EP0_OutStart>:
{
 8004378:	b530      	push	{r4, r5, lr}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800437a:	4c11      	ldr	r4, [pc, #68]	; (80043c0 <USB_EP0_OutStart+0x48>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800437c:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800437e:	42a5      	cmp	r5, r4
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004380:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004384:	d903      	bls.n	800438e <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004386:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800438a:	2c00      	cmp	r4, #0
 800438c:	db16      	blt.n	80043bc <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800438e:	2400      	movs	r4, #0
 8004390:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004392:	691c      	ldr	r4, [r3, #16]
 8004394:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8004398:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800439a:	691c      	ldr	r4, [r3, #16]
 800439c:	f044 0418 	orr.w	r4, r4, #24
 80043a0:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80043a2:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 80043a4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80043a6:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80043aa:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80043ac:	bf01      	itttt	eq
 80043ae:	615a      	streq	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80043b0:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	; 0xb00
 80043b4:	f043 2380 	orreq.w	r3, r3, #2147516416	; 0x80008000
 80043b8:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
}
 80043bc:	2000      	movs	r0, #0
 80043be:	bd30      	pop	{r4, r5, pc}
 80043c0:	4f54300a 	.word	0x4f54300a

080043c4 <LL_SetFlashLatency>:
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
  ErrorStatus status = SUCCESS;


  /* Frequency cannot be equal to 0 */
  if(HCLK_Frequency == 0U)
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d041      	beq.n	800444c <LL_SetFlashLatency+0x88>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 80043c8:	4b21      	ldr	r3, [pc, #132]	; (8004450 <LL_SetFlashLatency+0x8c>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
#endif /* UTILS_SCALE1_LATENCY2_FREQ */
    }
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80043d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80043d6:	d125      	bne.n	8004424 <LL_SetFlashLatency+0x60>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /*UTILS_SCALE1_LATENCY3_FREQ */
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80043d8:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <LL_SetFlashLatency+0x90>)
 80043da:	4290      	cmp	r0, r2
 80043dc:	d81d      	bhi.n	800441a <LL_SetFlashLatency+0x56>
      {
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <LL_SetFlashLatency+0x94>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4290      	cmp	r0, r2
 80043e4:	d801      	bhi.n	80043ea <LL_SetFlashLatency+0x26>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80043e6:	2000      	movs	r0, #0
 80043e8:	e005      	b.n	80043f6 <LL_SetFlashLatency+0x32>
 80043ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        {
          latency = LL_FLASH_LATENCY_1;
 80043ee:	2001      	movs	r0, #1
        }
      }
    }
#if defined (LL_PWR_REGU_VOLTAGE_SCALE3)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 80043f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043f4:	d024      	beq.n	8004440 <LL_SetFlashLatency+0x7c>
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80043f6:	4a19      	ldr	r2, [pc, #100]	; (800445c <LL_SetFlashLatency+0x98>)
 80043f8:	6813      	ldr	r3, [r2, #0]
 80043fa:	f023 0307 	bic.w	r3, r3, #7
 80043fe:	4303      	orrs	r3, r0
 8004400:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	f003 0307 	and.w	r3, r3, #7
    do
    {
    /* Wait for Flash latency to be updated */
    getlatency = LL_FLASH_GetLatency();
    timeout--;
    } while ((getlatency != latency) && (timeout > 0));
 8004408:	4283      	cmp	r3, r0
 800440a:	bf1c      	itt	ne
 800440c:	6813      	ldrne	r3, [r2, #0]
 800440e:	f003 0307 	andne.w	r3, r3, #7

    if(getlatency != latency)
 8004412:	1ac0      	subs	r0, r0, r3
 8004414:	bf18      	it	ne
 8004416:	2001      	movne	r0, #1
 8004418:	4770      	bx	lr
 800441a:	681b      	ldr	r3, [r3, #0]
        latency = LL_FLASH_LATENCY_2;
 800441c:	2002      	movs	r0, #2
 800441e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004422:	e7e5      	b.n	80043f0 <LL_SetFlashLatency+0x2c>
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 800442a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800442e:	d1da      	bne.n	80043e6 <LL_SetFlashLatency+0x22>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004430:	4b08      	ldr	r3, [pc, #32]	; (8004454 <LL_SetFlashLatency+0x90>)
 8004432:	4298      	cmp	r0, r3
 8004434:	d808      	bhi.n	8004448 <LL_SetFlashLatency+0x84>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <LL_SetFlashLatency+0x94>)
 8004438:	4298      	cmp	r0, r3
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800443a:	f04f 0000 	mov.w	r0, #0
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800443e:	d9da      	bls.n	80043f6 <LL_SetFlashLatency+0x32>
 8004440:	2801      	cmp	r0, #1
 8004442:	bf38      	it	cc
 8004444:	2001      	movcc	r0, #1
 8004446:	e7d6      	b.n	80043f6 <LL_SetFlashLatency+0x32>
        latency = LL_FLASH_LATENCY_2;
 8004448:	2002      	movs	r0, #2
 800444a:	e7d4      	b.n	80043f6 <LL_SetFlashLatency+0x32>
    status = ERROR;
 800444c:	2001      	movs	r0, #1
    {
      status = SUCCESS;
    }
  }
  return status;
}
 800444e:	4770      	bx	lr
 8004450:	40007000 	.word	0x40007000
 8004454:	03938700 	.word	0x03938700
 8004458:	01c9c380 	.word	0x01c9c380
 800445c:	40023c00 	.word	0x40023c00

08004460 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <z_sys_init_run_level+0x40>)
{
 8004462:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8004464:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004468:	3001      	adds	r0, #1
 800446a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800446e:	42a6      	cmp	r6, r4
 8004470:	d800      	bhi.n	8004474 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 8004472:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 8004474:	e9d4 3500 	ldrd	r3, r5, [r4]
 8004478:	4628      	mov	r0, r5
 800447a:	4798      	blx	r3
		if (dev != NULL) {
 800447c:	b16d      	cbz	r5, 800449a <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 800447e:	b138      	cbz	r0, 8004490 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 8004480:	2800      	cmp	r0, #0
 8004482:	bfb8      	it	lt
 8004484:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8004486:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
 8004488:	28ff      	cmp	r0, #255	; 0xff
 800448a:	bfa8      	it	ge
 800448c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 800448e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 8004490:	68ea      	ldr	r2, [r5, #12]
 8004492:	7853      	ldrb	r3, [r2, #1]
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800449a:	3408      	adds	r4, #8
 800449c:	e7e7      	b.n	800446e <z_sys_init_run_level+0xe>
 800449e:	bf00      	nop
 80044a0:	08007a0c 	.word	0x08007a0c

080044a4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80044a4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <bg_thread_main+0x2c>)
 80044a8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 80044aa:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 80044ac:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 80044ae:	f7ff ffd7 	bl	8004460 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 80044b2:	f001 f855 	bl	8005560 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 80044b6:	2004      	movs	r0, #4
 80044b8:	f7ff ffd2 	bl	8004460 <z_sys_init_run_level>

	z_init_static_threads();
 80044bc:	f000 f91a 	bl	80046f4 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 80044c0:	f7fb ffd2 	bl	8000468 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80044c4:	4a03      	ldr	r2, [pc, #12]	; (80044d4 <bg_thread_main+0x30>)
 80044c6:	7b13      	ldrb	r3, [r2, #12]
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80044ce:	bd08      	pop	{r3, pc}
 80044d0:	20000f6f 	.word	0x20000f6f
 80044d4:	200003a8 	.word	0x200003a8

080044d8 <z_bss_zero>:
{
 80044d8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 80044da:	4803      	ldr	r0, [pc, #12]	; (80044e8 <z_bss_zero+0x10>)
 80044dc:	4a03      	ldr	r2, [pc, #12]	; (80044ec <z_bss_zero+0x14>)
 80044de:	2100      	movs	r1, #0
 80044e0:	1a12      	subs	r2, r2, r0
 80044e2:	f002 fd49 	bl	8006f78 <z_early_memset>
}
 80044e6:	bd08      	pop	{r3, pc}
 80044e8:	20000288 	.word	0x20000288
 80044ec:	20000f70 	.word	0x20000f70

080044f0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 80044f0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
 80044f2:	2300      	movs	r3, #0
{
 80044f4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 80044f6:	2201      	movs	r2, #1
 80044f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
 80044fc:	4e13      	ldr	r6, [pc, #76]	; (800454c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 80044fe:	4d14      	ldr	r5, [pc, #80]	; (8004550 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	220f      	movs	r2, #15
 8004504:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8004508:	4912      	ldr	r1, [pc, #72]	; (8004554 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800450a:	2318      	movs	r3, #24
 800450c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
 8004510:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 8004514:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 8004516:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800451a:	fb00 1104 	mla	r1, r0, r4, r1
 800451e:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <z_init_cpu+0x68>)
 8004520:	9500      	str	r5, [sp, #0]
 8004522:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004526:	4630      	mov	r0, r6
 8004528:	f000 f886 	bl	8004638 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800452c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 800452e:	4a0b      	ldr	r2, [pc, #44]	; (800455c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 8004530:	60ee      	str	r6, [r5, #12]
 8004532:	f023 0304 	bic.w	r3, r3, #4
 8004536:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 8004538:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800453c:	fb04 3303 	mla	r3, r4, r3, r3
 8004540:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
 8004542:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
 8004544:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 8004546:	b006      	add	sp, #24
 8004548:	bd70      	pop	{r4, r5, r6, pc}
 800454a:	bf00      	nop
 800454c:	20000328 	.word	0x20000328
 8004550:	20000f20 	.word	0x20000f20
 8004554:	20001c00 	.word	0x20001c00
 8004558:	08006f97 	.word	0x08006f97
 800455c:	200013c0 	.word	0x200013c0

08004560 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8004560:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8004562:	2000      	movs	r0, #0
{
 8004564:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 8004566:	f7ff ff7b 	bl	8004460 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800456a:	4b2c      	ldr	r3, [pc, #176]	; (800461c <z_cstart+0xbc>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800456c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8004570:	4d2b      	ldr	r5, [pc, #172]	; (8004620 <z_cstart+0xc0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 8004572:	4e2c      	ldr	r6, [pc, #176]	; (8004624 <z_cstart+0xc4>)
 8004574:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8004576:	4f2c      	ldr	r7, [pc, #176]	; (8004628 <z_cstart+0xc8>)
 8004578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800457c:	616b      	str	r3, [r5, #20]
 800457e:	2400      	movs	r4, #0
 8004580:	23f0      	movs	r3, #240	; 0xf0
 8004582:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8004586:	77ec      	strb	r4, [r5, #31]
 8004588:	762c      	strb	r4, [r5, #24]
 800458a:	766c      	strb	r4, [r5, #25]
 800458c:	76ac      	strb	r4, [r5, #26]
 800458e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8004592:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004594:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004598:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800459a:	f7fd fe15 	bl	80021c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800459e:	f7fd fbeb 	bl	8001d78 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045a6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80045a8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 80045aa:	f7fd feef 	bl	800238c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80045ae:	f7fd fe55 	bl	800225c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 80045b2:	f240 1301 	movw	r3, #257	; 0x101
 80045b6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 80045ba:	ab06      	add	r3, sp, #24
 80045bc:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 80045be:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 80045c2:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80045c4:	f002 fca5 	bl	8006f12 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 80045c8:	2001      	movs	r0, #1
 80045ca:	f7ff ff49 	bl	8004460 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 80045ce:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 80045d0:	4d16      	ldr	r5, [pc, #88]	; (800462c <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 80045d2:	f7ff ff45 	bl	8004460 <z_sys_init_run_level>
	z_sched_init();
 80045d6:	f000 fd33 	bl	8005040 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
 80045dc:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 80045de:	9305      	str	r3, [sp, #20]
 80045e0:	2301      	movs	r3, #1
 80045e2:	4914      	ldr	r1, [pc, #80]	; (8004634 <z_cstart+0xd4>)
 80045e4:	9400      	str	r4, [sp, #0]
 80045e6:	e9cd 4303 	strd	r4, r3, [sp, #12]
 80045ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ee:	463b      	mov	r3, r7
 80045f0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 f81f 	bl	8004638 <z_setup_new_thread>
 80045fa:	7b6a      	ldrb	r2, [r5, #13]
 80045fc:	4606      	mov	r6, r0
 80045fe:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
 8004602:	4628      	mov	r0, r5
 8004604:	736a      	strb	r2, [r5, #13]
 8004606:	f002 fd82 	bl	800710e <z_ready_thread>
	z_init_cpu(0);
 800460a:	4620      	mov	r0, r4
 800460c:	f7ff ff70 	bl	80044f0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8004610:	463a      	mov	r2, r7
 8004612:	4631      	mov	r1, r6
 8004614:	4628      	mov	r0, r5
 8004616:	f7fd fcab 	bl	8001f70 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800461a:	bf00      	nop
 800461c:	20001c00 	.word	0x20001c00
 8004620:	e000ed00 	.word	0xe000ed00
 8004624:	20000f20 	.word	0x20000f20
 8004628:	080044a5 	.word	0x080044a5
 800462c:	200003a8 	.word	0x200003a8
 8004630:	08007b72 	.word	0x08007b72
 8004634:	20001d80 	.word	0x20001d80

08004638 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8004638:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 800463c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800463e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8004640:	2604      	movs	r6, #4
 8004642:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 8004644:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004646:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8004648:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 800464c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800464e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 8004650:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8004654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
 8004656:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8004658:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800465c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 800465e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8004662:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 8004666:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 8004668:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800466a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800466c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8004670:	9202      	str	r2, [sp, #8]
 8004672:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004674:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8004676:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8004678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800467a:	9200      	str	r2, [sp, #0]
 800467c:	4642      	mov	r2, r8
{
 800467e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8004680:	f7fd fc44 	bl	8001f0c <arch_new_thread>
	if (!_current) {
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
 8004686:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	b103      	cbz	r3, 800468e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
 800468e:	6723      	str	r3, [r4, #112]	; 0x70
}
 8004690:	4640      	mov	r0, r8
 8004692:	b004      	add	sp, #16
 8004694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004698:	20000f20 	.word	0x20000f20

0800469c <z_impl_k_thread_create>:
{
 800469c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80046a0:	2500      	movs	r5, #0
 80046a2:	9505      	str	r5, [sp, #20]
 80046a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046a6:	9504      	str	r5, [sp, #16]
 80046a8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80046aa:	9503      	str	r5, [sp, #12]
 80046ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80046ae:	9502      	str	r5, [sp, #8]
{
 80046b0:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80046b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80046b6:	9501      	str	r5, [sp, #4]
 80046b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046ba:	9500      	str	r5, [sp, #0]
{
 80046bc:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80046be:	f7ff ffbb 	bl	8004638 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 80046c2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80046c6:	bf08      	it	eq
 80046c8:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 80046cc:	d005      	beq.n	80046da <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80046ce:	ea56 0307 	orrs.w	r3, r6, r7
 80046d2:	d105      	bne.n	80046e0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 80046d4:	4620      	mov	r0, r4
 80046d6:	f000 fc33 	bl	8004f40 <z_sched_start>
}
 80046da:	4620      	mov	r0, r4
 80046dc:	b007      	add	sp, #28
 80046de:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80046e0:	4903      	ldr	r1, [pc, #12]	; (80046f0 <z_impl_k_thread_create+0x54>)
 80046e2:	463a      	mov	r2, r7
 80046e4:	4633      	mov	r3, r6
 80046e6:	f104 0018 	add.w	r0, r4, #24
 80046ea:	f000 fe2f 	bl	800534c <z_add_timeout>
 80046ee:	e7f4      	b.n	80046da <z_impl_k_thread_create+0x3e>
 80046f0:	0800707b 	.word	0x0800707b

080046f4 <z_init_static_threads>:
{
 80046f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f6:	4c22      	ldr	r4, [pc, #136]	; (8004780 <z_init_static_threads+0x8c>)
	_FOREACH_STATIC_THREAD(thread_data) {
 80046f8:	4d22      	ldr	r5, [pc, #136]	; (8004784 <z_init_static_threads+0x90>)
{
 80046fa:	b087      	sub	sp, #28
 80046fc:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 80046fe:	42ae      	cmp	r6, r5
 8004700:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8004704:	d30b      	bcc.n	800471e <z_init_static_threads+0x2a>
	k_sched_lock();
 8004706:	f000 fc6b 	bl	8004fe0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800470a:	4c1d      	ldr	r4, [pc, #116]	; (8004780 <z_init_static_threads+0x8c>)
 800470c:	4f1e      	ldr	r7, [pc, #120]	; (8004788 <z_init_static_threads+0x94>)
 800470e:	260a      	movs	r6, #10
 8004710:	42ac      	cmp	r4, r5
 8004712:	d320      	bcc.n	8004756 <z_init_static_threads+0x62>
}
 8004714:	b007      	add	sp, #28
 8004716:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 800471a:	f000 bc75 	b.w	8005008 <k_sched_unlock>
		z_setup_new_thread(
 800471e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004722:	9305      	str	r3, [sp, #20]
 8004724:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8004728:	9304      	str	r3, [sp, #16]
 800472a:	f854 3c14 	ldr.w	r3, [r4, #-20]
 800472e:	9303      	str	r3, [sp, #12]
 8004730:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8004734:	9302      	str	r3, [sp, #8]
 8004736:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8004746:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800474a:	f7ff ff75 	bl	8004638 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 800474e:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8004752:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8004754:	e7d2      	b.n	80046fc <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8004756:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004758:	1c53      	adds	r3, r2, #1
 800475a:	d009      	beq.n	8004770 <z_init_static_threads+0x7c>
					    K_MSEC(thread_data->init_delay));
 800475c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004760:	fb82 2306 	smull	r2, r3, r2, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8004764:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8004768:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800476a:	d103      	bne.n	8004774 <z_init_static_threads+0x80>
	z_sched_start(thread);
 800476c:	f000 fbe8 	bl	8004f40 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8004770:	3430      	adds	r4, #48	; 0x30
 8004772:	e7cd      	b.n	8004710 <z_init_static_threads+0x1c>
 8004774:	4639      	mov	r1, r7
 8004776:	3018      	adds	r0, #24
 8004778:	f000 fde8 	bl	800534c <z_add_timeout>
 800477c:	e7f8      	b.n	8004770 <z_init_static_threads+0x7c>
 800477e:	bf00      	nop
 8004780:	080076cc 	.word	0x080076cc
 8004784:	080076cc 	.word	0x080076cc
 8004788:	0800707b 	.word	0x0800707b

0800478c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800478c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004790:	4604      	mov	r4, r0
 8004792:	4617      	mov	r7, r2
 8004794:	461e      	mov	r6, r3
	__asm__ volatile(
 8004796:	f04f 0310 	mov.w	r3, #16
 800479a:	f3ef 8811 	mrs	r8, BASEPRI
 800479e:	f383 8812 	msr	BASEPRI_MAX, r3
 80047a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 80047a6:	68c3      	ldr	r3, [r0, #12]
 80047a8:	4a33      	ldr	r2, [pc, #204]	; (8004878 <z_impl_k_mutex_lock+0xec>)
 80047aa:	b17b      	cbz	r3, 80047cc <z_impl_k_mutex_lock+0x40>
 80047ac:	6880      	ldr	r0, [r0, #8]
 80047ae:	6891      	ldr	r1, [r2, #8]
 80047b0:	4288      	cmp	r0, r1
 80047b2:	d019      	beq.n	80047e8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 80047b4:	ea57 0306 	orrs.w	r3, r7, r6
 80047b8:	d118      	bne.n	80047ec <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 80047ba:	f388 8811 	msr	BASEPRI, r8
 80047be:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 80047c2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 80047c6:	b002      	add	sp, #8
 80047c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 80047cc:	6891      	ldr	r1, [r2, #8]
 80047ce:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 80047d2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 80047d4:	3301      	adds	r3, #1
 80047d6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 80047d8:	6893      	ldr	r3, [r2, #8]
 80047da:	60a3      	str	r3, [r4, #8]
 80047dc:	f388 8811 	msr	BASEPRI, r8
 80047e0:	f3bf 8f6f 	isb	sy
		return 0;
 80047e4:	2000      	movs	r0, #0
 80047e6:	e7ee      	b.n	80047c6 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
 80047e8:	6921      	ldr	r1, [r4, #16]
 80047ea:	e7f2      	b.n	80047d2 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 80047ec:	f991 100e 	ldrsb.w	r1, [r1, #14]
 80047f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 80047f4:	4299      	cmp	r1, r3
 80047f6:	bfa8      	it	ge
 80047f8:	4619      	movge	r1, r3
 80047fa:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 80047fe:	4291      	cmp	r1, r2
 8004800:	bfb8      	it	lt
 8004802:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8004804:	428b      	cmp	r3, r1
 8004806:	dd2e      	ble.n	8004866 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 8004808:	f002 fbd1 	bl	8006fae <adjust_owner_prio.isra.0>
 800480c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800480e:	e9cd 7600 	strd	r7, r6, [sp]
 8004812:	481a      	ldr	r0, [pc, #104]	; (800487c <z_impl_k_mutex_lock+0xf0>)
 8004814:	4622      	mov	r2, r4
 8004816:	4641      	mov	r1, r8
 8004818:	f000 fb1c 	bl	8004e54 <z_pend_curr>
	if (got_mutex == 0) {
 800481c:	2800      	cmp	r0, #0
 800481e:	d0e1      	beq.n	80047e4 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
 8004820:	f04f 0310 	mov.w	r3, #16
 8004824:	f3ef 8611 	mrs	r6, BASEPRI
 8004828:	f383 8812 	msr	BASEPRI_MAX, r3
 800482c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
 8004830:	68a0      	ldr	r0, [r4, #8]
 8004832:	b1d0      	cbz	r0, 800486a <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8004834:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8004836:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004838:	429c      	cmp	r4, r3
 800483a:	d00a      	beq.n	8004852 <z_impl_k_mutex_lock+0xc6>
 800483c:	b14b      	cbz	r3, 8004852 <z_impl_k_mutex_lock+0xc6>
 800483e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8004842:	4299      	cmp	r1, r3
 8004844:	bfa8      	it	ge
 8004846:	4619      	movge	r1, r3
 8004848:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800484c:	4299      	cmp	r1, r3
 800484e:	bfb8      	it	lt
 8004850:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 8004852:	f002 fbac 	bl	8006fae <adjust_owner_prio.isra.0>
 8004856:	b140      	cbz	r0, 800486a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 8004858:	4808      	ldr	r0, [pc, #32]	; (800487c <z_impl_k_mutex_lock+0xf0>)
 800485a:	4631      	mov	r1, r6
 800485c:	f000 fb5e 	bl	8004f1c <z_reschedule>
	return -EAGAIN;
 8004860:	f06f 000a 	mvn.w	r0, #10
 8004864:	e7af      	b.n	80047c6 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
 8004866:	2500      	movs	r5, #0
 8004868:	e7d1      	b.n	800480e <z_impl_k_mutex_lock+0x82>
	if (resched) {
 800486a:	2d00      	cmp	r5, #0
 800486c:	d1f4      	bne.n	8004858 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
 800486e:	f386 8811 	msr	BASEPRI, r6
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	e7f3      	b.n	8004860 <z_impl_k_mutex_lock+0xd4>
 8004878:	20000f20 	.word	0x20000f20
 800487c:	20000f70 	.word	0x20000f70

08004880 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 8004880:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8004882:	6883      	ldr	r3, [r0, #8]
{
 8004884:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 8004886:	b36b      	cbz	r3, 80048e4 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8004888:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <z_impl_k_mutex_unlock+0x70>)
 800488a:	6892      	ldr	r2, [r2, #8]
 800488c:	4293      	cmp	r3, r2
 800488e:	d12c      	bne.n	80048ea <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8004890:	68c3      	ldr	r3, [r0, #12]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d903      	bls.n	800489e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
 8004896:	3b01      	subs	r3, #1
 8004898:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 800489a:	2000      	movs	r0, #0
}
 800489c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800489e:	f04f 0310 	mov.w	r3, #16
 80048a2:	f3ef 8511 	mrs	r5, BASEPRI
 80048a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80048aa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 80048ae:	6901      	ldr	r1, [r0, #16]
 80048b0:	6880      	ldr	r0, [r0, #8]
 80048b2:	f002 fb7c 	bl	8006fae <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 80048b6:	4620      	mov	r0, r4
 80048b8:	f002 fc39 	bl	800712e <z_unpend_first_thread>
	mutex->owner = new_owner;
 80048bc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 80048be:	b158      	cbz	r0, 80048d8 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
 80048c0:	f990 200e 	ldrsb.w	r2, [r0, #14]
 80048c4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80048c6:	2200      	movs	r2, #0
 80048c8:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 80048ca:	f002 fc20 	bl	800710e <z_ready_thread>
		z_reschedule(&lock, key);
 80048ce:	4809      	ldr	r0, [pc, #36]	; (80048f4 <z_impl_k_mutex_unlock+0x74>)
 80048d0:	4629      	mov	r1, r5
 80048d2:	f000 fb23 	bl	8004f1c <z_reschedule>
 80048d6:	e7e0      	b.n	800489a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
 80048d8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80048da:	f385 8811 	msr	BASEPRI, r5
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	e7da      	b.n	800489a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
 80048e4:	f06f 0015 	mvn.w	r0, #21
 80048e8:	e7d8      	b.n	800489c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ee:	e7d5      	b.n	800489c <z_impl_k_mutex_unlock+0x1c>
 80048f0:	20000f20 	.word	0x20000f20
 80048f4:	20000f70 	.word	0x20000f70

080048f8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4604      	mov	r4, r0
	__asm__ volatile(
 80048fc:	f04f 0310 	mov.w	r3, #16
 8004900:	f3ef 8511 	mrs	r5, BASEPRI
 8004904:	f383 8812 	msr	BASEPRI_MAX, r3
 8004908:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800490c:	f002 fc0f 	bl	800712e <z_unpend_first_thread>

	if (thread != NULL) {
 8004910:	b148      	cbz	r0, 8004926 <z_impl_k_sem_give+0x2e>
 8004912:	2200      	movs	r2, #0
 8004914:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8004916:	f002 fbfa 	bl	800710e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800491a:	4629      	mov	r1, r5
 800491c:	4805      	ldr	r0, [pc, #20]	; (8004934 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800491e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8004922:	f000 bafb 	b.w	8004f1c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8004926:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	bf18      	it	ne
 800492e:	3301      	addne	r3, #1
 8004930:	60a3      	str	r3, [r4, #8]
}
 8004932:	e7f2      	b.n	800491a <z_impl_k_sem_give+0x22>
 8004934:	20000f70 	.word	0x20000f70

08004938 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8004938:	b513      	push	{r0, r1, r4, lr}
 800493a:	f04f 0410 	mov.w	r4, #16
 800493e:	f3ef 8111 	mrs	r1, BASEPRI
 8004942:	f384 8812 	msr	BASEPRI_MAX, r4
 8004946:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800494a:	6884      	ldr	r4, [r0, #8]
 800494c:	b144      	cbz	r4, 8004960 <z_impl_k_sem_take+0x28>
		sem->count--;
 800494e:	3c01      	subs	r4, #1
 8004950:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8004952:	f381 8811 	msr	BASEPRI, r1
 8004956:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800495a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800495c:	b002      	add	sp, #8
 800495e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8004960:	ea52 0403 	orrs.w	r4, r2, r3
 8004964:	d106      	bne.n	8004974 <z_impl_k_sem_take+0x3c>
 8004966:	f381 8811 	msr	BASEPRI, r1
 800496a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800496e:	f06f 000f 	mvn.w	r0, #15
 8004972:	e7f3      	b.n	800495c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8004974:	e9cd 2300 	strd	r2, r3, [sp]
 8004978:	4602      	mov	r2, r0
 800497a:	4802      	ldr	r0, [pc, #8]	; (8004984 <z_impl_k_sem_take+0x4c>)
 800497c:	f000 fa6a 	bl	8004e54 <z_pend_curr>
	return ret;
 8004980:	e7ec      	b.n	800495c <z_impl_k_sem_take+0x24>
 8004982:	bf00      	nop
 8004984:	20000f70 	.word	0x20000f70

08004988 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8004988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
 800498c:	4e4a      	ldr	r6, [pc, #296]	; (8004ab8 <work_queue_main+0x130>)
 800498e:	b085      	sub	sp, #20
 8004990:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 8004992:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004996:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
 800499a:	f04f 0310 	mov.w	r3, #16
 800499e:	f3ef 8711 	mrs	r7, BASEPRI
 80049a2:	f383 8812 	msr	BASEPRI_MAX, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 80049ae:	b98d      	cbnz	r5, 80049d4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
 80049b0:	2102      	movs	r1, #2
 80049b2:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80049b6:	f002 fb0e 	bl	8006fd6 <flag_test_and_clear>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d143      	bne.n	8004a46 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 80049be:	2300      	movs	r3, #0
 80049c0:	e9cd 8900 	strd	r8, r9, [sp]
 80049c4:	9302      	str	r3, [sp, #8]
 80049c6:	f104 0288 	add.w	r2, r4, #136	; 0x88
 80049ca:	4639      	mov	r1, r7
 80049cc:	483b      	ldr	r0, [pc, #236]	; (8004abc <work_queue_main+0x134>)
 80049ce:	f000 fc43 	bl	8005258 <z_sched_wait>
			continue;
 80049d2:	e7e2      	b.n	800499a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80049d4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
 80049d8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
 80049da:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80049de:	4295      	cmp	r5, r2
	list->tail = node;
 80049e0:	bf08      	it	eq
 80049e2:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
 80049e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80049ea:	f043 0302 	orr.w	r3, r3, #2
 80049ee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
 80049f2:	68eb      	ldr	r3, [r5, #12]
 80049f4:	f023 0304 	bic.w	r3, r3, #4
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
 80049fe:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
 8004a00:	f387 8811 	msr	BASEPRI, r7
 8004a04:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 8004a08:	4628      	mov	r0, r5
 8004a0a:	4798      	blx	r3
	__asm__ volatile(
 8004a0c:	f04f 0310 	mov.w	r3, #16
 8004a10:	f3ef 8b11 	mrs	fp, BASEPRI
 8004a14:	f383 8812 	msr	BASEPRI_MAX, r3
 8004a18:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8004a1c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8004a1e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 8004a20:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8004a24:	d419      	bmi.n	8004a5a <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
 8004a26:	60ea      	str	r2, [r5, #12]
 8004a28:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004a2c:	f023 0302 	bic.w	r3, r3, #2
 8004a30:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
 8004a34:	f38b 8811 	msr	BASEPRI, fp
 8004a38:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 8004a3c:	05db      	lsls	r3, r3, #23
 8004a3e:	d4ac      	bmi.n	800499a <work_queue_main+0x12>
	z_impl_k_yield();
 8004a40:	f000 fb0a 	bl	8005058 <z_impl_k_yield>
}
 8004a44:	e7a9      	b.n	800499a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 8004a46:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f002 fb9f 	bl	8007192 <z_sched_wake>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d1f8      	bne.n	8004a4a <work_queue_main+0xc2>
 8004a58:	e7b1      	b.n	80049be <work_queue_main+0x36>
	return list->head;
 8004a5a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
 8004a5c:	f023 0303 	bic.w	r3, r3, #3
 8004a60:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d0e0      	beq.n	8004a28 <work_queue_main+0xa0>
	return node->next;
 8004a66:	2700      	movs	r7, #0
 8004a68:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
 8004a6c:	463b      	mov	r3, r7
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d0da      	beq.n	8004a28 <work_queue_main+0xa0>
		if (wc->work == work) {
 8004a72:	6842      	ldr	r2, [r0, #4]
 8004a74:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8004a76:	4601      	mov	r1, r0
		if (wc->work == work) {
 8004a78:	d10c      	bne.n	8004a94 <work_queue_main+0x10c>
	return node->next;
 8004a7a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 8004a7c:	b99f      	cbnz	r7, 8004aa6 <work_queue_main+0x11e>
 8004a7e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
 8004a80:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
 8004a82:	4282      	cmp	r2, r0
 8004a84:	d100      	bne.n	8004a88 <work_queue_main+0x100>
	list->tail = node;
 8004a86:	6071      	str	r1, [r6, #4]
	parent->next = child;
 8004a88:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 8004a8c:	f7ff ff34 	bl	80048f8 <z_impl_k_sem_give>
}
 8004a90:	4639      	mov	r1, r7
 8004a92:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8004a94:	f1ba 0f00 	cmp.w	sl, #0
 8004a98:	d00b      	beq.n	8004ab2 <work_queue_main+0x12a>
	return node->next;
 8004a9a:	f8da 2000 	ldr.w	r2, [sl]
 8004a9e:	4650      	mov	r0, sl
 8004aa0:	460f      	mov	r7, r1
 8004aa2:	4692      	mov	sl, r2
 8004aa4:	e7e3      	b.n	8004a6e <work_queue_main+0xe6>
	parent->next = child;
 8004aa6:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 8004aa8:	6872      	ldr	r2, [r6, #4]
 8004aaa:	4282      	cmp	r2, r0
	list->tail = node;
 8004aac:	bf08      	it	eq
 8004aae:	6077      	streq	r7, [r6, #4]
}
 8004ab0:	e7ea      	b.n	8004a88 <work_queue_main+0x100>
 8004ab2:	4652      	mov	r2, sl
 8004ab4:	e7f3      	b.n	8004a9e <work_queue_main+0x116>
 8004ab6:	bf00      	nop
 8004ab8:	20000f44 	.word	0x20000f44
 8004abc:	20000f70 	.word	0x20000f70

08004ac0 <submit_to_queue_locked>:
{
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 8004ac2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8004ac4:	079a      	lsls	r2, r3, #30
{
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8004aca:	f3c3 0640 	ubfx	r6, r3, #1, #1
 8004ace:	d42c      	bmi.n	8004b2a <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 8004ad0:	075b      	lsls	r3, r3, #29
 8004ad2:	d41a      	bmi.n	8004b0a <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
 8004ad4:	680b      	ldr	r3, [r1, #0]
 8004ad6:	b90b      	cbnz	r3, 8004adc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
 8004ad8:	6883      	ldr	r3, [r0, #8]
 8004ada:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
 8004adc:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8004ade:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
 8004ae0:	bf44      	itt	mi
 8004ae2:	68a3      	ldrmi	r3, [r4, #8]
 8004ae4:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
 8004ae6:	683d      	ldr	r5, [r7, #0]
			ret = 2;
 8004ae8:	bf4c      	ite	mi
 8004aea:	2602      	movmi	r6, #2
		ret = 1;
 8004aec:	2601      	movpl	r6, #1
	if (queue == NULL) {
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	d03a      	beq.n	8004b68 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8004af2:	4b1f      	ldr	r3, [pc, #124]	; (8004b70 <submit_to_queue_locked+0xb0>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	42ab      	cmp	r3, r5
 8004af8:	d00a      	beq.n	8004b10 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
 8004afa:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8004afe:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 8004b00:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8004b04:	d414      	bmi.n	8004b30 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
 8004b06:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	603b      	str	r3, [r7, #0]
	return ret;
 8004b0e:	e025      	b.n	8004b5c <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8004b10:	f002 fa36 	bl	8006f80 <k_is_in_isr>
 8004b14:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d1f0      	bne.n	8004afe <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8004b1c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 8004b1e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8004b22:	d5f0      	bpl.n	8004b06 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
 8004b24:	b152      	cbz	r2, 8004b3c <submit_to_queue_locked+0x7c>
 8004b26:	075b      	lsls	r3, r3, #29
 8004b28:	d408      	bmi.n	8004b3c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
 8004b2a:	f06f 060f 	mvn.w	r6, #15
 8004b2e:	e7ec      	b.n	8004b0a <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d1fa      	bne.n	8004b2a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
 8004b34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f6      	bne.n	8004b2a <submit_to_queue_locked+0x6a>
	parent->next = child;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	6023      	str	r3, [r4, #0]
	return list->tail;
 8004b40:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
 8004b44:	b963      	cbnz	r3, 8004b60 <submit_to_queue_locked+0xa0>
	list->head = node;
 8004b46:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f002 fa4e 	bl	8006fec <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
 8004b50:	68e3      	ldr	r3, [r4, #12]
 8004b52:	f043 0304 	orr.w	r3, r3, #4
 8004b56:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	60a3      	str	r3, [r4, #8]
}
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
 8004b60:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8004b62:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
 8004b66:	e7f0      	b.n	8004b4a <submit_to_queue_locked+0x8a>
		return -EINVAL;
 8004b68:	f06f 0615 	mvn.w	r6, #21
 8004b6c:	e7cd      	b.n	8004b0a <submit_to_queue_locked+0x4a>
 8004b6e:	bf00      	nop
 8004b70:	20000f20 	.word	0x20000f20

08004b74 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	b089      	sub	sp, #36	; 0x24
 8004b78:	4604      	mov	r4, r0
	list->head = NULL;
 8004b7a:	2000      	movs	r0, #0
	list->tail = NULL;
 8004b7c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
 8004b80:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004b82:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
 8004b86:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
 8004b8a:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8004b8e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 8004b92:	b31d      	cbz	r5, 8004bdc <k_work_queue_start+0x68>
 8004b94:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 8004b96:	2800      	cmp	r0, #0
 8004b98:	f240 1001 	movw	r0, #257	; 0x101
 8004b9c:	bf08      	it	eq
 8004b9e:	2001      	moveq	r0, #1
	*flagp = flags;
 8004ba0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004baa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bae:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8004bb2:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8004bb6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <k_work_queue_start+0x6c>)
 8004bbc:	9400      	str	r4, [sp, #0]
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7ff fd6c 	bl	800469c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 8004bc4:	b125      	cbz	r5, 8004bd0 <k_work_queue_start+0x5c>
 8004bc6:	6829      	ldr	r1, [r5, #0]
 8004bc8:	b111      	cbz	r1, 8004bd0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f002 f9de 	bl	8006f8c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8004bd0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 8004bd2:	b009      	add	sp, #36	; 0x24
 8004bd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004bd8:	f002 b9db 	b.w	8006f92 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8004bdc:	2001      	movs	r0, #1
 8004bde:	e7df      	b.n	8004ba0 <k_work_queue_start+0x2c>
 8004be0:	08004989 	.word	0x08004989

08004be4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 8004be4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 8004be6:	4d07      	ldr	r5, [pc, #28]	; (8004c04 <z_reset_time_slice+0x20>)
 8004be8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 8004bea:	b154      	cbz	r4, 8004c02 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 8004bec:	f7fe fc94 	bl	8003518 <sys_clock_elapsed>
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <z_reset_time_slice+0x24>)
 8004bf2:	4404      	add	r4, r0
 8004bf4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 8004bf6:	6828      	ldr	r0, [r5, #0]
 8004bf8:	2100      	movs	r1, #0
	}
}
 8004bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 8004bfe:	f002 bb01 	b.w	8007204 <z_set_timeout_expiry>
}
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	20000f54 	.word	0x20000f54
 8004c08:	20000f20 	.word	0x20000f20

08004c0c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 8004c0c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 8004c0e:	4d0d      	ldr	r5, [pc, #52]	; (8004c44 <update_cache+0x38>)
 8004c10:	462b      	mov	r3, r5
 8004c12:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004c16:	429c      	cmp	r4, r3
 8004c18:	d000      	beq.n	8004c1c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8004c1a:	b904      	cbnz	r4, 8004c1e <update_cache+0x12>
 8004c1c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 8004c1e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 8004c20:	b938      	cbnz	r0, 8004c32 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 8004c22:	7b5a      	ldrb	r2, [r3, #13]
 8004c24:	06d2      	lsls	r2, r2, #27
 8004c26:	d104      	bne.n	8004c32 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8004c28:	69a2      	ldr	r2, [r4, #24]
 8004c2a:	b912      	cbnz	r2, 8004c32 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 8004c2c:	89da      	ldrh	r2, [r3, #14]
 8004c2e:	2a7f      	cmp	r2, #127	; 0x7f
 8004c30:	d805      	bhi.n	8004c3e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 8004c32:	429c      	cmp	r4, r3
 8004c34:	d002      	beq.n	8004c3c <update_cache+0x30>
			z_reset_time_slice(thread);
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7ff ffd4 	bl	8004be4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 8004c3c:	4623      	mov	r3, r4
 8004c3e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 8004c40:	bd38      	pop	{r3, r4, r5, pc}
 8004c42:	bf00      	nop
 8004c44:	20000f20 	.word	0x20000f20

08004c48 <move_thread_to_end_of_prio_q>:
{
 8004c48:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8004c4a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8004c4e:	7b43      	ldrb	r3, [r0, #13]
 8004c50:	2a00      	cmp	r2, #0
{
 8004c52:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8004c54:	da04      	bge.n	8004c60 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8004c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c5a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 8004c5c:	f002 f9fb 	bl	8007056 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8004c60:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
 8004c62:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <move_thread_to_end_of_prio_q+0x70>)
 8004c64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c68:	4610      	mov	r0, r2
 8004c6a:	734b      	strb	r3, [r1, #13]
 8004c6c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 8004c70:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004c72:	4283      	cmp	r3, r0
 8004c74:	bf08      	it	eq
 8004c76:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004c78:	b923      	cbnz	r3, 8004c84 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 8004c7a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 8004c7e:	6021      	str	r1, [r4, #0]
	list->tail = node;
 8004c80:	6211      	str	r1, [r2, #32]
}
 8004c82:	e00c      	b.n	8004c9e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 8004c84:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 8004c88:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8004c8c:	42b5      	cmp	r5, r6
 8004c8e:	d00e      	beq.n	8004cae <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8004c90:	42ae      	cmp	r6, r5
 8004c92:	dd0c      	ble.n	8004cae <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8004c94:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 8004c96:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 8004c9a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8004c9c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 8004c9e:	6890      	ldr	r0, [r2, #8]
 8004ca0:	1a43      	subs	r3, r0, r1
 8004ca2:	4258      	negs	r0, r3
}
 8004ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8004ca8:	4158      	adcs	r0, r3
 8004caa:	f7ff bfaf 	b.w	8004c0c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	d0e3      	beq.n	8004c7a <move_thread_to_end_of_prio_q+0x32>
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	e7e0      	b.n	8004c78 <move_thread_to_end_of_prio_q+0x30>
 8004cb6:	bf00      	nop
 8004cb8:	20000f20 	.word	0x20000f20

08004cbc <ready_thread>:
{
 8004cbc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8004cbe:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8004cc2:	7b42      	ldrb	r2, [r0, #13]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	db29      	blt.n	8004d1c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8004cc8:	06d3      	lsls	r3, r2, #27
 8004cca:	d127      	bne.n	8004d1c <ready_thread+0x60>
	return node->next != NULL;
 8004ccc:	6983      	ldr	r3, [r0, #24]
 8004cce:	bb2b      	cbnz	r3, 8004d1c <ready_thread+0x60>
	return list->head == list;
 8004cd0:	4913      	ldr	r1, [pc, #76]	; (8004d20 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 8004cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cd6:	7342      	strb	r2, [r0, #13]
 8004cd8:	460a      	mov	r2, r1
 8004cda:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004cde:	4294      	cmp	r4, r2
 8004ce0:	bf18      	it	ne
 8004ce2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 8004ce4:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004ce6:	b923      	cbnz	r3, 8004cf2 <ready_thread+0x36>
	node->prev = tail;
 8004ce8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 8004cec:	6020      	str	r0, [r4, #0]
	list->tail = node;
 8004cee:	6208      	str	r0, [r1, #32]
}
 8004cf0:	e00c      	b.n	8004d0c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 8004cf2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8004cf6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 8004cfa:	42b5      	cmp	r5, r6
 8004cfc:	d00a      	beq.n	8004d14 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8004cfe:	42ae      	cmp	r6, r5
 8004d00:	dd08      	ble.n	8004d14 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 8004d02:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004d04:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 8004d08:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8004d0a:	6058      	str	r0, [r3, #4]
}
 8004d0c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f7ff bf7c 	b.w	8004c0c <update_cache>
	return (node == list->tail) ? NULL : node->next;
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d0e7      	beq.n	8004ce8 <ready_thread+0x2c>
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	e7e4      	b.n	8004ce6 <ready_thread+0x2a>
}
 8004d1c:	bc70      	pop	{r4, r5, r6}
 8004d1e:	4770      	bx	lr
 8004d20:	20000f20 	.word	0x20000f20

08004d24 <unready_thread>:
{
 8004d24:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8004d26:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 8004d2a:	7b43      	ldrb	r3, [r0, #13]
 8004d2c:	2a00      	cmp	r2, #0
{
 8004d2e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8004d30:	da04      	bge.n	8004d3c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8004d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d36:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004d38:	f002 f98d 	bl	8007056 <sys_dlist_remove>
	update_cache(thread == _current);
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <unready_thread+0x2c>)
 8004d3e:	6898      	ldr	r0, [r3, #8]
 8004d40:	1a43      	subs	r3, r0, r1
 8004d42:	4258      	negs	r0, r3
 8004d44:	4158      	adcs	r0, r3
}
 8004d46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8004d4a:	f7ff bf5f 	b.w	8004c0c <update_cache>
 8004d4e:	bf00      	nop
 8004d50:	20000f20 	.word	0x20000f20

08004d54 <pend_locked>:
{
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	4615      	mov	r5, r2
 8004d58:	461c      	mov	r4, r3
 8004d5a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 8004d5c:	f002 f9af 	bl	80070be <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8004d60:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004d64:	bf08      	it	eq
 8004d66:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 8004d6a:	d008      	beq.n	8004d7e <pend_locked+0x2a>
 8004d6c:	462a      	mov	r2, r5
 8004d6e:	4623      	mov	r3, r4
 8004d70:	f106 0018 	add.w	r0, r6, #24
 8004d74:	4902      	ldr	r1, [pc, #8]	; (8004d80 <pend_locked+0x2c>)
}
 8004d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d7a:	f000 bae7 	b.w	800534c <z_add_timeout>
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
 8004d80:	0800707b 	.word	0x0800707b

08004d84 <k_sched_time_slice_set>:
{
 8004d84:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004d86:	f04f 0310 	mov.w	r3, #16
 8004d8a:	f3ef 8411 	mrs	r4, BASEPRI
 8004d8e:	f383 8812 	msr	BASEPRI_MAX, r3
 8004d92:	f3bf 8f6f 	isb	sy
			return ((uint32_t)t) * (to_hz / from_hz);
 8004d96:	230a      	movs	r3, #10
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	fb00 f303 	mul.w	r3, r0, r3
 8004d9e:	dd02      	ble.n	8004da6 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	bfb8      	it	lt
 8004da4:	2302      	movlt	r3, #2
		_current_cpu->slice_ticks = 0;
 8004da6:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <k_sched_time_slice_set+0x40>)
 8004da8:	2000      	movs	r0, #0
 8004daa:	6110      	str	r0, [r2, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 8004dac:	4806      	ldr	r0, [pc, #24]	; (8004dc8 <k_sched_time_slice_set+0x44>)
 8004dae:	6003      	str	r3, [r0, #0]
		slice_max_prio = prio;
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <k_sched_time_slice_set+0x48>)
		z_reset_time_slice(_current);
 8004db2:	6890      	ldr	r0, [r2, #8]
		slice_max_prio = prio;
 8004db4:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
 8004db6:	f7ff ff15 	bl	8004be4 <z_reset_time_slice>
	__asm__ volatile(
 8004dba:	f384 8811 	msr	BASEPRI, r4
 8004dbe:	f3bf 8f6f 	isb	sy
}
 8004dc2:	bd10      	pop	{r4, pc}
 8004dc4:	20000f20 	.word	0x20000f20
 8004dc8:	20000f54 	.word	0x20000f54
 8004dcc:	20000f50 	.word	0x20000f50

08004dd0 <z_time_slice>:
{
 8004dd0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8004dd2:	f04f 0310 	mov.w	r3, #16
 8004dd6:	f3ef 8511 	mrs	r5, BASEPRI
 8004dda:	f383 8812 	msr	BASEPRI_MAX, r3
 8004dde:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8004de2:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <z_time_slice+0x70>)
 8004de4:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <z_time_slice+0x74>)
 8004de6:	689c      	ldr	r4, [r3, #8]
 8004de8:	6811      	ldr	r1, [r2, #0]
 8004dea:	428c      	cmp	r4, r1
 8004dec:	d107      	bne.n	8004dfe <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff fef8 	bl	8004be4 <z_reset_time_slice>
	__asm__ volatile(
 8004df4:	f385 8811 	msr	BASEPRI, r5
 8004df8:	f3bf 8f6f 	isb	sy
}
 8004dfc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 8004dfe:	2100      	movs	r1, #0
 8004e00:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 8004e02:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	b1c2      	cbz	r2, 8004e3a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8004e08:	89e2      	ldrh	r2, [r4, #14]
 8004e0a:	2a7f      	cmp	r2, #127	; 0x7f
 8004e0c:	d815      	bhi.n	8004e3a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 8004e0e:	7b62      	ldrb	r2, [r4, #13]
 8004e10:	06d2      	lsls	r2, r2, #27
 8004e12:	d112      	bne.n	8004e3a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8004e14:	4a0d      	ldr	r2, [pc, #52]	; (8004e4c <z_time_slice+0x7c>)
 8004e16:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	4291      	cmp	r1, r2
 8004e1e:	db0c      	blt.n	8004e3a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8004e20:	4a0b      	ldr	r2, [pc, #44]	; (8004e50 <z_time_slice+0x80>)
 8004e22:	4294      	cmp	r4, r2
 8004e24:	d009      	beq.n	8004e3a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	4282      	cmp	r2, r0
 8004e2a:	dc03      	bgt.n	8004e34 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7ff ff0b 	bl	8004c48 <move_thread_to_end_of_prio_q>
 8004e32:	e7dc      	b.n	8004dee <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 8004e34:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 8004e36:	611a      	str	r2, [r3, #16]
 8004e38:	e7dc      	b.n	8004df4 <z_time_slice+0x24>
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	e7fb      	b.n	8004e36 <z_time_slice+0x66>
 8004e3e:	bf00      	nop
 8004e40:	20000f20 	.word	0x20000f20
 8004e44:	20000f4c 	.word	0x20000f4c
 8004e48:	20000f54 	.word	0x20000f54
 8004e4c:	20000f50 	.word	0x20000f50
 8004e50:	20000328 	.word	0x20000328

08004e54 <z_pend_curr>:
{
 8004e54:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 8004e56:	480c      	ldr	r0, [pc, #48]	; (8004e88 <z_pend_curr+0x34>)
 8004e58:	4d0c      	ldr	r5, [pc, #48]	; (8004e8c <z_pend_curr+0x38>)
 8004e5a:	6886      	ldr	r6, [r0, #8]
 8004e5c:	602e      	str	r6, [r5, #0]
{
 8004e5e:	460c      	mov	r4, r1
 8004e60:	4611      	mov	r1, r2
 8004e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 8004e66:	f04f 0610 	mov.w	r6, #16
 8004e6a:	f3ef 8511 	mrs	r5, BASEPRI
 8004e6e:	f386 8812 	msr	BASEPRI_MAX, r6
 8004e72:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 8004e76:	6880      	ldr	r0, [r0, #8]
 8004e78:	f7ff ff6c 	bl	8004d54 <pend_locked>
	ret = arch_swap(key);
 8004e7c:	4620      	mov	r0, r4
}
 8004e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e82:	f7fc bfef 	b.w	8001e64 <arch_swap>
 8004e86:	bf00      	nop
 8004e88:	20000f20 	.word	0x20000f20
 8004e8c:	20000f4c 	.word	0x20000f4c

08004e90 <z_set_prio>:
{
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	4604      	mov	r4, r0
 8004e94:	f04f 0310 	mov.w	r3, #16
 8004e98:	f3ef 8611 	mrs	r6, BASEPRI
 8004e9c:	f383 8812 	msr	BASEPRI_MAX, r3
 8004ea0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 8004ea4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8004ea6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 8004ea8:	b249      	sxtb	r1, r1
 8004eaa:	d119      	bne.n	8004ee0 <z_set_prio+0x50>
	return node->next != NULL;
 8004eac:	6985      	ldr	r5, [r0, #24]
 8004eae:	b9bd      	cbnz	r5, 8004ee0 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8004eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004eb6:	f002 f8ce 	bl	8007056 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 8004eba:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 8004ebc:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <z_set_prio+0x88>)
				thread->base.prio = prio;
 8004ebe:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8004ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ec4:	7343      	strb	r3, [r0, #13]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004ecc:	4298      	cmp	r0, r3
 8004ece:	bf18      	it	ne
 8004ed0:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
 8004ed2:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004ed4:	b95d      	cbnz	r5, 8004eee <z_set_prio+0x5e>
	node->prev = tail;
 8004ed6:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
 8004eda:	6004      	str	r4, [r0, #0]
	list->tail = node;
 8004edc:	6214      	str	r4, [r2, #32]
}
 8004ede:	e011      	b.n	8004f04 <z_set_prio+0x74>
			thread->base.prio = prio;
 8004ee0:	73a1      	strb	r1, [r4, #14]
 8004ee2:	2000      	movs	r0, #0
	__asm__ volatile(
 8004ee4:	f386 8811 	msr	BASEPRI, r6
 8004ee8:	f3bf 8f6f 	isb	sy
}
 8004eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
 8004eee:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
 8004ef2:	42b9      	cmp	r1, r7
 8004ef4:	d00b      	beq.n	8004f0e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8004ef6:	428f      	cmp	r7, r1
 8004ef8:	dd09      	ble.n	8004f0e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
 8004efa:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
 8004efc:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
 8004f00:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8004f02:	606c      	str	r4, [r5, #4]
			update_cache(1);
 8004f04:	2001      	movs	r0, #1
 8004f06:	f7ff fe81 	bl	8004c0c <update_cache>
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	e7ea      	b.n	8004ee4 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
 8004f0e:	42a8      	cmp	r0, r5
 8004f10:	d0e1      	beq.n	8004ed6 <z_set_prio+0x46>
 8004f12:	682d      	ldr	r5, [r5, #0]
 8004f14:	e7de      	b.n	8004ed4 <z_set_prio+0x44>
 8004f16:	bf00      	nop
 8004f18:	20000f20 	.word	0x20000f20

08004f1c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8004f1c:	b949      	cbnz	r1, 8004f32 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f1e:	f3ef 8005 	mrs	r0, IPSR
 8004f22:	b930      	cbnz	r0, 8004f32 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d001      	beq.n	8004f32 <z_reschedule+0x16>
 8004f2e:	f7fc bf99 	b.w	8001e64 <arch_swap>
 8004f32:	f381 8811 	msr	BASEPRI, r1
 8004f36:	f3bf 8f6f 	isb	sy
}
 8004f3a:	4770      	bx	lr
 8004f3c:	20000f20 	.word	0x20000f20

08004f40 <z_sched_start>:
{
 8004f40:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004f42:	f04f 0210 	mov.w	r2, #16
 8004f46:	f3ef 8411 	mrs	r4, BASEPRI
 8004f4a:	f382 8812 	msr	BASEPRI_MAX, r2
 8004f4e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8004f52:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 8004f54:	0751      	lsls	r1, r2, #29
 8004f56:	d404      	bmi.n	8004f62 <z_sched_start+0x22>
	__asm__ volatile(
 8004f58:	f384 8811 	msr	BASEPRI, r4
 8004f5c:	f3bf 8f6f 	isb	sy
}
 8004f60:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004f62:	f022 0204 	bic.w	r2, r2, #4
 8004f66:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8004f68:	f7ff fea8 	bl	8004cbc <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4802      	ldr	r0, [pc, #8]	; (8004f78 <z_sched_start+0x38>)
}
 8004f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8004f74:	f7ff bfd2 	b.w	8004f1c <z_reschedule>
 8004f78:	20000f70 	.word	0x20000f70

08004f7c <z_impl_k_thread_suspend>:
{
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8004f80:	3018      	adds	r0, #24
 8004f82:	f002 f929 	bl	80071d8 <z_abort_timeout>
	__asm__ volatile(
 8004f86:	f04f 0310 	mov.w	r3, #16
 8004f8a:	f3ef 8611 	mrs	r6, BASEPRI
 8004f8e:	f383 8812 	msr	BASEPRI_MAX, r3
 8004f92:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8004f96:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 8004f9a:	7b63      	ldrb	r3, [r4, #13]
 8004f9c:	2a00      	cmp	r2, #0
 8004f9e:	da05      	bge.n	8004fac <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8004fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f002 f855 	bl	8007056 <sys_dlist_remove>
		update_cache(thread == _current);
 8004fac:	4d0b      	ldr	r5, [pc, #44]	; (8004fdc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8004fae:	7b63      	ldrb	r3, [r4, #13]
 8004fb0:	68a8      	ldr	r0, [r5, #8]
 8004fb2:	f043 0310 	orr.w	r3, r3, #16
 8004fb6:	7363      	strb	r3, [r4, #13]
 8004fb8:	1b03      	subs	r3, r0, r4
 8004fba:	4258      	negs	r0, r3
 8004fbc:	4158      	adcs	r0, r3
 8004fbe:	f7ff fe25 	bl	8004c0c <update_cache>
	__asm__ volatile(
 8004fc2:	f386 8811 	msr	BASEPRI, r6
 8004fc6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8004fca:	68ab      	ldr	r3, [r5, #8]
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	d103      	bne.n	8004fd8 <z_impl_k_thread_suspend+0x5c>
}
 8004fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8004fd4:	f002 b8d3 	b.w	800717e <z_reschedule_unlocked>
}
 8004fd8:	bd70      	pop	{r4, r5, r6, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000f20 	.word	0x20000f20

08004fe0 <k_sched_lock>:
	__asm__ volatile(
 8004fe0:	f04f 0310 	mov.w	r3, #16
 8004fe4:	f3ef 8111 	mrs	r1, BASEPRI
 8004fe8:	f383 8812 	msr	BASEPRI_MAX, r3
 8004fec:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <k_sched_lock+0x24>)
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	7bd3      	ldrb	r3, [r2, #15]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8004ffa:	f381 8811 	msr	BASEPRI, r1
 8004ffe:	f3bf 8f6f 	isb	sy
}
 8005002:	4770      	bx	lr
 8005004:	20000f20 	.word	0x20000f20

08005008 <k_sched_unlock>:
{
 8005008:	b510      	push	{r4, lr}
	__asm__ volatile(
 800500a:	f04f 0310 	mov.w	r3, #16
 800500e:	f3ef 8411 	mrs	r4, BASEPRI
 8005012:	f383 8812 	msr	BASEPRI_MAX, r3
 8005016:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800501a:	4b08      	ldr	r3, [pc, #32]	; (800503c <k_sched_unlock+0x34>)
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	7bd3      	ldrb	r3, [r2, #15]
 8005020:	3301      	adds	r3, #1
 8005022:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8005024:	2000      	movs	r0, #0
 8005026:	f7ff fdf1 	bl	8004c0c <update_cache>
	__asm__ volatile(
 800502a:	f384 8811 	msr	BASEPRI, r4
 800502e:	f3bf 8f6f 	isb	sy
}
 8005032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8005036:	f002 b8a2 	b.w	800717e <z_reschedule_unlocked>
 800503a:	bf00      	nop
 800503c:	20000f20 	.word	0x20000f20

08005040 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8005040:	4b04      	ldr	r3, [pc, #16]	; (8005054 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8005042:	2100      	movs	r1, #0
 8005044:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 8005048:	e9c3 2207 	strd	r2, r2, [r3, #28]
 800504c:	4608      	mov	r0, r1
 800504e:	f7ff be99 	b.w	8004d84 <k_sched_time_slice_set>
 8005052:	bf00      	nop
 8005054:	20000f20 	.word	0x20000f20

08005058 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800505a:	f04f 0310 	mov.w	r3, #16
 800505e:	f3ef 8511 	mrs	r5, BASEPRI
 8005062:	f383 8812 	msr	BASEPRI_MAX, r3
 8005066:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 800506a:	4919      	ldr	r1, [pc, #100]	; (80050d0 <z_impl_k_yield+0x78>)
 800506c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800506e:	7b43      	ldrb	r3, [r0, #13]
 8005070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005074:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8005076:	f001 ffee 	bl	8007056 <sys_dlist_remove>
	}
	queue_thread(_current);
 800507a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800507c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
 800507e:	4608      	mov	r0, r1
 8005080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005084:	735a      	strb	r2, [r3, #13]
 8005086:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
 800508a:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800508c:	4282      	cmp	r2, r0
 800508e:	bf08      	it	eq
 8005090:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005092:	b922      	cbnz	r2, 800509e <z_impl_k_yield+0x46>
	node->prev = tail;
 8005094:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 8005098:	6023      	str	r3, [r4, #0]
	list->tail = node;
 800509a:	620b      	str	r3, [r1, #32]
}
 800509c:	e00c      	b.n	80050b8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 800509e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 80050a2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 80050a6:	42be      	cmp	r6, r7
 80050a8:	d00e      	beq.n	80050c8 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80050aa:	42b7      	cmp	r7, r6
 80050ac:	dd0c      	ble.n	80050c8 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 80050ae:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80050b0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 80050b4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 80050b6:	6053      	str	r3, [r2, #4]
	update_cache(1);
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7ff fda7 	bl	8004c0c <update_cache>
 80050be:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 80050c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050c4:	f7fc bece 	b.w	8001e64 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 80050c8:	42a2      	cmp	r2, r4
 80050ca:	d0e3      	beq.n	8005094 <z_impl_k_yield+0x3c>
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	e7e0      	b.n	8005092 <z_impl_k_yield+0x3a>
 80050d0:	20000f20 	.word	0x20000f20

080050d4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 80050d4:	ea50 0301 	orrs.w	r3, r0, r1
{
 80050d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050dc:	4605      	mov	r5, r0
 80050de:	460e      	mov	r6, r1
	if (ticks == 0) {
 80050e0:	d103      	bne.n	80050ea <z_tick_sleep+0x16>
	z_impl_k_yield();
 80050e2:	f7ff ffb9 	bl	8005058 <z_impl_k_yield>
		k_yield();
		return 0;
 80050e6:	2000      	movs	r0, #0
 80050e8:	e02c      	b.n	8005144 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 80050ea:	1c83      	adds	r3, r0, #2
 80050ec:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
 80050f0:	db2a      	blt.n	8005148 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 80050f2:	f002 f8a3 	bl	800723c <sys_clock_tick_get_32>
 80050f6:	1944      	adds	r4, r0, r5
 80050f8:	f04f 0310 	mov.w	r3, #16
 80050fc:	f3ef 8811 	mrs	r8, BASEPRI
 8005100:	f383 8812 	msr	BASEPRI_MAX, r3
 8005104:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8005108:	4f11      	ldr	r7, [pc, #68]	; (8005150 <z_tick_sleep+0x7c>)
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <z_tick_sleep+0x80>)
 800510c:	68b8      	ldr	r0, [r7, #8]
 800510e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8005110:	f7ff fe08 	bl	8004d24 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8005114:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8005116:	4910      	ldr	r1, [pc, #64]	; (8005158 <z_tick_sleep+0x84>)
 8005118:	462a      	mov	r2, r5
 800511a:	4633      	mov	r3, r6
 800511c:	3018      	adds	r0, #24
 800511e:	f000 f915 	bl	800534c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8005122:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8005124:	7b53      	ldrb	r3, [r2, #13]
 8005126:	f043 0310 	orr.w	r3, r3, #16
 800512a:	7353      	strb	r3, [r2, #13]
 800512c:	4640      	mov	r0, r8
 800512e:	f7fc fe99 	bl	8001e64 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8005132:	f002 f883 	bl	800723c <sys_clock_tick_get_32>
 8005136:	1a20      	subs	r0, r4, r0
 8005138:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800513c:	2801      	cmp	r0, #1
 800513e:	f173 0300 	sbcs.w	r3, r3, #0
 8005142:	dbd0      	blt.n	80050e6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 8005144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8005148:	f06f 0401 	mvn.w	r4, #1
 800514c:	1a24      	subs	r4, r4, r0
 800514e:	e7d3      	b.n	80050f8 <z_tick_sleep+0x24>
 8005150:	20000f20 	.word	0x20000f20
 8005154:	20000f4c 	.word	0x20000f4c
 8005158:	0800707b 	.word	0x0800707b

0800515c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800515c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8005160:	bf08      	it	eq
 8005162:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8005166:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8005168:	d106      	bne.n	8005178 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <z_impl_k_sleep+0x2c>)
 800516c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800516e:	f7ff ff05 	bl	8004f7c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 8005172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 8005176:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 8005178:	f7ff ffac 	bl	80050d4 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800517c:	220a      	movs	r2, #10
 800517e:	2300      	movs	r3, #0
 8005180:	17c1      	asrs	r1, r0, #31
 8005182:	f7fb f807 	bl	8000194 <__aeabi_uldivmod>
	return ret;
 8005186:	e7f6      	b.n	8005176 <z_impl_k_sleep+0x1a>
 8005188:	20000f20 	.word	0x20000f20

0800518c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 800518c:	4b01      	ldr	r3, [pc, #4]	; (8005194 <z_impl_z_current_get+0x8>)
 800518e:	6898      	ldr	r0, [r3, #8]
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000f20 	.word	0x20000f20

08005198 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 8005198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	4604      	mov	r4, r0
 800519e:	f04f 0310 	mov.w	r3, #16
 80051a2:	f3ef 8611 	mrs	r6, BASEPRI
 80051a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80051aa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 80051ae:	7b03      	ldrb	r3, [r0, #12]
 80051b0:	07d9      	lsls	r1, r3, #31
 80051b2:	d50b      	bpl.n	80051cc <z_thread_abort+0x34>
	__asm__ volatile(
 80051b4:	f386 8811 	msr	BASEPRI, r6
 80051b8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 80051bc:	4040      	eors	r0, r0
 80051be:	f380 8811 	msr	BASEPRI, r0
 80051c2:	f04f 0004 	mov.w	r0, #4
 80051c6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 80051c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 80051cc:	7b43      	ldrb	r3, [r0, #13]
 80051ce:	071a      	lsls	r2, r3, #28
 80051d0:	d504      	bpl.n	80051dc <z_thread_abort+0x44>
 80051d2:	f386 8811 	msr	BASEPRI, r6
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	e7f5      	b.n	80051c8 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80051dc:	f023 0220 	bic.w	r2, r3, #32
 80051e0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 80051e4:	09d2      	lsrs	r2, r2, #7
 80051e6:	d120      	bne.n	800522a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 80051e8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 80051ea:	68a3      	ldr	r3, [r4, #8]
 80051ec:	b113      	cbz	r3, 80051f4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 80051ee:	4620      	mov	r0, r4
 80051f0:	f001 ff39 	bl	8007066 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 80051f4:	f104 0018 	add.w	r0, r4, #24
 80051f8:	f001 ffee 	bl	80071d8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80051fc:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8005200:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
 8005204:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005206:	42bd      	cmp	r5, r7
 8005208:	d000      	beq.n	800520c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800520a:	b9b5      	cbnz	r5, 800523a <z_thread_abort+0xa2>
		update_cache(1);
 800520c:	2001      	movs	r0, #1
 800520e:	f7ff fcfd 	bl	8004c0c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <z_thread_abort+0xbc>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	42a3      	cmp	r3, r4
 8005218:	d1db      	bne.n	80051d2 <z_thread_abort+0x3a>
 800521a:	f3ef 8305 	mrs	r3, IPSR
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1d7      	bne.n	80051d2 <z_thread_abort+0x3a>
 8005222:	4630      	mov	r0, r6
 8005224:	f7fc fe1e 	bl	8001e64 <arch_swap>
	return ret;
 8005228:	e7d3      	b.n	80051d2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800522a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800522e:	f043 0308 	orr.w	r3, r3, #8
 8005232:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 8005234:	f001 ff0f 	bl	8007056 <sys_dlist_remove>
}
 8005238:	e7d7      	b.n	80051ea <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 800523a:	4628      	mov	r0, r5
 800523c:	f001 ff13 	bl	8007066 <unpend_thread_no_timeout>
 8005240:	f105 0018 	add.w	r0, r5, #24
 8005244:	f001 ffc8 	bl	80071d8 <z_abort_timeout>
 8005248:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
 800524c:	4628      	mov	r0, r5
 800524e:	f7ff fd35 	bl	8004cbc <ready_thread>
 8005252:	e7d7      	b.n	8005204 <z_thread_abort+0x6c>
 8005254:	20000f20 	.word	0x20000f20

08005258 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8005258:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800525a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
 800525e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8005260:	e9cd 6700 	strd	r6, r7, [sp]
 8005264:	f7ff fdf6 	bl	8004e54 <z_pend_curr>

	if (data != NULL) {
 8005268:	b11c      	cbz	r4, 8005272 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
 800526a:	4b03      	ldr	r3, [pc, #12]	; (8005278 <z_sched_wait+0x20>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8005272:	b002      	add	sp, #8
 8005274:	bdd0      	pop	{r4, r6, r7, pc}
 8005276:	bf00      	nop
 8005278:	20000f20 	.word	0x20000f20

0800527c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800527c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 800527e:	4806      	ldr	r0, [pc, #24]	; (8005298 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 8005280:	4a06      	ldr	r2, [pc, #24]	; (800529c <z_data_copy+0x20>)
 8005282:	4907      	ldr	r1, [pc, #28]	; (80052a0 <z_data_copy+0x24>)
 8005284:	1a12      	subs	r2, r2, r0
 8005286:	f001 fe79 	bl	8006f7c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800528a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 800528e:	4a05      	ldr	r2, [pc, #20]	; (80052a4 <z_data_copy+0x28>)
 8005290:	4905      	ldr	r1, [pc, #20]	; (80052a8 <z_data_copy+0x2c>)
 8005292:	4806      	ldr	r0, [pc, #24]	; (80052ac <z_data_copy+0x30>)
 8005294:	f001 be72 	b.w	8006f7c <z_early_memcpy>
 8005298:	20000000 	.word	0x20000000
 800529c:	20000288 	.word	0x20000288
 80052a0:	08007bc4 	.word	0x08007bc4
 80052a4:	00000000 	.word	0x00000000
 80052a8:	08007bc4 	.word	0x08007bc4
 80052ac:	20000000 	.word	0x20000000

080052b0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 80052b0:	4b03      	ldr	r3, [pc, #12]	; (80052c0 <elapsed+0x10>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	b90b      	cbnz	r3, 80052ba <elapsed+0xa>
 80052b6:	f7fe b92f 	b.w	8003518 <sys_clock_elapsed>
}
 80052ba:	2000      	movs	r0, #0
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000f58 	.word	0x20000f58

080052c4 <next_timeout>:

static int32_t next_timeout(void)
{
 80052c4:	b510      	push	{r4, lr}
	return list->head == list;
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <next_timeout+0x48>)
 80052c8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d10a      	bne.n	80052e4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 80052ce:	f7ff ffef 	bl	80052b0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 80052d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 80052d6:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <next_timeout+0x4c>)
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	b113      	cbz	r3, 80052e2 <next_timeout+0x1e>
 80052dc:	4298      	cmp	r0, r3
 80052de:	bfa8      	it	ge
 80052e0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 80052e2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 80052e4:	f7ff ffe4 	bl	80052b0 <elapsed>
	if ((to == NULL) ||
 80052e8:	2c00      	cmp	r4, #0
 80052ea:	d0f2      	beq.n	80052d2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 80052ec:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80052f0:	1a1b      	subs	r3, r3, r0
 80052f2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 80052f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052fa:	f172 0100 	sbcs.w	r1, r2, #0
 80052fe:	dae8      	bge.n	80052d2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 8005300:	2a00      	cmp	r2, #0
 8005302:	bfac      	ite	ge
 8005304:	4618      	movge	r0, r3
 8005306:	2000      	movlt	r0, #0
 8005308:	e7e5      	b.n	80052d6 <next_timeout+0x12>
 800530a:	bf00      	nop
 800530c:	20000170 	.word	0x20000170
 8005310:	20000f20 	.word	0x20000f20

08005314 <remove_timeout>:
{
 8005314:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005316:	b170      	cbz	r0, 8005336 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <remove_timeout+0x34>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4298      	cmp	r0, r3
 800531e:	d00a      	beq.n	8005336 <remove_timeout+0x22>
 8005320:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 8005322:	b143      	cbz	r3, 8005336 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8005324:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8005328:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 800532c:	1912      	adds	r2, r2, r4
 800532e:	eb41 0105 	adc.w	r1, r1, r5
 8005332:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 8005336:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 800533a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800533c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800533e:	2300      	movs	r3, #0
	node->prev = NULL;
 8005340:	e9c0 3300 	strd	r3, r3, [r0]
}
 8005344:	bd30      	pop	{r4, r5, pc}
 8005346:	bf00      	nop
 8005348:	20000170 	.word	0x20000170

0800534c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005350:	bf08      	it	eq
 8005352:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8005356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005358:	4604      	mov	r4, r0
 800535a:	461d      	mov	r5, r3
 800535c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800535e:	d061      	beq.n	8005424 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8005360:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 8005362:	f04f 0310 	mov.w	r3, #16
 8005366:	f3ef 8711 	mrs	r7, BASEPRI
 800536a:	f383 8812 	msr	BASEPRI_MAX, r3
 800536e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8005372:	3201      	adds	r2, #1
 8005374:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
 8005378:	da24      	bge.n	80053c4 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800537a:	4930      	ldr	r1, [pc, #192]	; (800543c <z_add_timeout+0xf0>)
 800537c:	e9d1 2000 	ldrd	r2, r0, [r1]
 8005380:	f06f 0301 	mvn.w	r3, #1
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800538a:	eb62 0000 	sbc.w	r0, r2, r0
 800538e:	1b9e      	subs	r6, r3, r6
 8005390:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 8005394:	2e01      	cmp	r6, #1
 8005396:	f170 0300 	sbcs.w	r3, r0, #0
 800539a:	da01      	bge.n	80053a0 <z_add_timeout+0x54>
 800539c:	2601      	movs	r6, #1
 800539e:	2000      	movs	r0, #0
 80053a0:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 80053a4:	4e26      	ldr	r6, [pc, #152]	; (8005440 <z_add_timeout+0xf4>)
 80053a6:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 80053aa:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80053ac:	45b4      	cmp	ip, r6
 80053ae:	bf08      	it	eq
 80053b0:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 80053b4:	f1bc 0f00 	cmp.w	ip, #0
 80053b8:	d10d      	bne.n	80053d6 <z_add_timeout+0x8a>
	node->prev = tail;
 80053ba:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 80053be:	602c      	str	r4, [r5, #0]
	list->tail = node;
 80053c0:	6074      	str	r4, [r6, #4]
}
 80053c2:	e01c      	b.n	80053fe <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 80053c4:	f7ff ff74 	bl	80052b0 <elapsed>
 80053c8:	3601      	adds	r6, #1
 80053ca:	f145 0500 	adc.w	r5, r5, #0
 80053ce:	1836      	adds	r6, r6, r0
 80053d0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 80053d4:	e7e4      	b.n	80053a0 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 80053d6:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 80053da:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 80053de:	4293      	cmp	r3, r2
 80053e0:	eb71 0e00 	sbcs.w	lr, r1, r0
 80053e4:	da1f      	bge.n	8005426 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 80053e6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 80053e8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80053ec:	eb60 0001 	sbc.w	r0, r0, r1
 80053f0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 80053f4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 80053f8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80053fa:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 80053fe:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005400:	42b3      	cmp	r3, r6
 8005402:	d00b      	beq.n	800541c <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8005404:	429c      	cmp	r4, r3
 8005406:	d109      	bne.n	800541c <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8005408:	f7ff ff5c 	bl	80052c4 <next_timeout>

			if (next_time == 0 ||
 800540c:	b118      	cbz	r0, 8005416 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 800540e:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	4283      	cmp	r3, r0
 8005414:	d002      	beq.n	800541c <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 8005416:	2100      	movs	r1, #0
 8005418:	f7fe f80e 	bl	8003438 <sys_clock_set_timeout>
	__asm__ volatile(
 800541c:	f387 8811 	msr	BASEPRI, r7
 8005420:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8005424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 800542c:	45ac      	cmp	ip, r5
 800542e:	e9c4 3104 	strd	r3, r1, [r4, #16]
 8005432:	d0c2      	beq.n	80053ba <z_add_timeout+0x6e>
 8005434:	f8dc c000 	ldr.w	ip, [ip]
 8005438:	e7bc      	b.n	80053b4 <z_add_timeout+0x68>
 800543a:	bf00      	nop
 800543c:	20000428 	.word	0x20000428
 8005440:	20000170 	.word	0x20000170
 8005444:	20000f20 	.word	0x20000f20

08005448 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8005448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800544c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800544e:	f7ff fcbf 	bl	8004dd0 <z_time_slice>
	__asm__ volatile(
 8005452:	f04f 0310 	mov.w	r3, #16
 8005456:	f3ef 8611 	mrs	r6, BASEPRI
 800545a:	f383 8812 	msr	BASEPRI_MAX, r3
 800545e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 8005462:	4f23      	ldr	r7, [pc, #140]	; (80054f0 <sys_clock_announce+0xa8>)
	return list->head == list;
 8005464:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80054f4 <sys_clock_announce+0xac>
 8005468:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800546c:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
 800546e:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005470:	4540      	cmp	r0, r8
		curr_tick += dt;
 8005472:	e9d2 3e00 	ldrd	r3, lr, [r2]
 8005476:	ea4f 71e4 	mov.w	r1, r4, asr #31
 800547a:	d00b      	beq.n	8005494 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800547c:	b150      	cbz	r0, 8005494 <sys_clock_announce+0x4c>
 800547e:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
 8005482:	42ac      	cmp	r4, r5
 8005484:	eb71 090c 	sbcs.w	r9, r1, ip
 8005488:	da16      	bge.n	80054b8 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 800548a:	1b2d      	subs	r5, r5, r4
 800548c:	eb6c 0c01 	sbc.w	ip, ip, r1
 8005490:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 8005494:	18e3      	adds	r3, r4, r3
 8005496:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
 800549a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 800549c:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
 80054a0:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
 80054a2:	f7ff ff0f 	bl	80052c4 <next_timeout>
 80054a6:	4621      	mov	r1, r4
 80054a8:	f7fd ffc6 	bl	8003438 <sys_clock_set_timeout>
	__asm__ volatile(
 80054ac:	f386 8811 	msr	BASEPRI, r6
 80054b0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80054b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 80054b8:	18eb      	adds	r3, r5, r3
 80054ba:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
 80054be:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
 80054c2:	2200      	movs	r2, #0
 80054c4:	2300      	movs	r3, #0
 80054c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
 80054ca:	f7ff ff23 	bl	8005314 <remove_timeout>
 80054ce:	f386 8811 	msr	BASEPRI, r6
 80054d2:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80054d6:	6883      	ldr	r3, [r0, #8]
 80054d8:	4798      	blx	r3
	__asm__ volatile(
 80054da:	f04f 0310 	mov.w	r3, #16
 80054de:	f3ef 8611 	mrs	r6, BASEPRI
 80054e2:	f383 8812 	msr	BASEPRI_MAX, r3
 80054e6:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 80054ea:	683c      	ldr	r4, [r7, #0]
 80054ec:	1b64      	subs	r4, r4, r5
 80054ee:	e7bb      	b.n	8005468 <sys_clock_announce+0x20>
 80054f0:	20000f58 	.word	0x20000f58
 80054f4:	20000170 	.word	0x20000170
 80054f8:	20000428 	.word	0x20000428

080054fc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 80054fc:	b510      	push	{r4, lr}
 80054fe:	f04f 0310 	mov.w	r3, #16
 8005502:	f3ef 8411 	mrs	r4, BASEPRI
 8005506:	f383 8812 	msr	BASEPRI_MAX, r3
 800550a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 800550e:	f7ff fecf 	bl	80052b0 <elapsed>
 8005512:	4a06      	ldr	r2, [pc, #24]	; (800552c <sys_clock_tick_get+0x30>)
 8005514:	4603      	mov	r3, r0
 8005516:	e9d2 0100 	ldrd	r0, r1, [r2]
 800551a:	1818      	adds	r0, r3, r0
 800551c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 8005520:	f384 8811 	msr	BASEPRI, r4
 8005524:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 8005528:	bd10      	pop	{r4, pc}
 800552a:	bf00      	nop
 800552c:	20000428 	.word	0x20000428

08005530 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8005530:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8005532:	4604      	mov	r4, r0
 8005534:	b178      	cbz	r0, 8005556 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8005536:	f7fe f80d 	bl	8003554 <sys_clock_cycle_get_32>
 800553a:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800553c:	4806      	ldr	r0, [pc, #24]	; (8005558 <z_impl_k_busy_wait+0x28>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800553e:	4a07      	ldr	r2, [pc, #28]	; (800555c <z_impl_k_busy_wait+0x2c>)
 8005540:	fba4 0100 	umull	r0, r1, r4, r0
 8005544:	2300      	movs	r3, #0
 8005546:	f7fa fe25 	bl	8000194 <__aeabi_uldivmod>
 800554a:	4604      	mov	r4, r0
 800554c:	f7fe f802 	bl	8003554 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8005550:	1b43      	subs	r3, r0, r5
 8005552:	42a3      	cmp	r3, r4
 8005554:	d3fa      	bcc.n	800554c <z_impl_k_busy_wait+0x1c>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	044aa200 	.word	0x044aa200
 800555c:	000f4240 	.word	0x000f4240

08005560 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <boot_banner+0x8>)
 8005562:	f000 b820 	b.w	80055a6 <printk>
 8005566:	bf00      	nop
 8005568:	08007b77 	.word	0x08007b77

0800556c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800556c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800556e:	4b09      	ldr	r3, [pc, #36]	; (8005594 <k_sys_work_q_init+0x28>)
 8005570:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 8005572:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 8005574:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4907      	ldr	r1, [pc, #28]	; (8005598 <k_sys_work_q_init+0x2c>)
 800557a:	4808      	ldr	r0, [pc, #32]	; (800559c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 800557c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 8005580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005588:	f7ff faf4 	bl	8004b74 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800558c:	4620      	mov	r0, r4
 800558e:	b004      	add	sp, #16
 8005590:	bd10      	pop	{r4, pc}
 8005592:	bf00      	nop
 8005594:	08007bb9 	.word	0x08007bb9
 8005598:	200021c0 	.word	0x200021c0
 800559c:	20000430 	.word	0x20000430

080055a0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 80055a0:	4770      	bx	lr

080055a2 <arch_printk_char_out>:
}
 80055a2:	2000      	movs	r0, #0
 80055a4:	4770      	bx	lr

080055a6 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 80055a6:	b40f      	push	{r0, r1, r2, r3}
 80055a8:	b507      	push	{r0, r1, r2, lr}
 80055aa:	a904      	add	r1, sp, #16
 80055ac:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 80055b0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
 80055b2:	f7fa ff8f 	bl	80004d4 <vprintk>

	va_end(ap);
}
 80055b6:	b003      	add	sp, #12
 80055b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055bc:	b004      	add	sp, #16
 80055be:	4770      	bx	lr

080055c0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80055c0:	4604      	mov	r4, r0
 80055c2:	b508      	push	{r3, lr}
 80055c4:	4608      	mov	r0, r1
 80055c6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80055c8:	461a      	mov	r2, r3
 80055ca:	47a0      	blx	r4
	return z_impl_z_current_get();
 80055cc:	f7ff fdde 	bl	800518c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80055d0:	f7fc fe2e 	bl	8002230 <z_impl_k_thread_abort>

080055d4 <encode_uint>:
{
 80055d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d8:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 80055da:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
 80055dc:	2b6f      	cmp	r3, #111	; 0x6f
{
 80055de:	4680      	mov	r8, r0
 80055e0:	460f      	mov	r7, r1
 80055e2:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80055e4:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 80055e8:	d029      	beq.n	800563e <encode_uint+0x6a>
 80055ea:	d824      	bhi.n	8005636 <encode_uint+0x62>
		return 10;
 80055ec:	2b58      	cmp	r3, #88	; 0x58
 80055ee:	bf0c      	ite	eq
 80055f0:	2610      	moveq	r6, #16
 80055f2:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 80055f4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 80055f8:	4632      	mov	r2, r6
 80055fa:	2300      	movs	r3, #0
 80055fc:	4640      	mov	r0, r8
 80055fe:	4639      	mov	r1, r7
 8005600:	f7fa fdc8 	bl	8000194 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8005604:	2a09      	cmp	r2, #9
 8005606:	b2d4      	uxtb	r4, r2
 8005608:	d81e      	bhi.n	8005648 <encode_uint+0x74>
 800560a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 800560c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800560e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 8005610:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8005614:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 8005618:	d301      	bcc.n	800561e <encode_uint+0x4a>
 800561a:	45d1      	cmp	r9, sl
 800561c:	d811      	bhi.n	8005642 <encode_uint+0x6e>
	if (conv->flag_hash) {
 800561e:	782b      	ldrb	r3, [r5, #0]
 8005620:	069b      	lsls	r3, r3, #26
 8005622:	d505      	bpl.n	8005630 <encode_uint+0x5c>
		if (radix == 8) {
 8005624:	2e08      	cmp	r6, #8
 8005626:	d115      	bne.n	8005654 <encode_uint+0x80>
			conv->altform_0 = true;
 8005628:	78ab      	ldrb	r3, [r5, #2]
 800562a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 800562e:	70ab      	strb	r3, [r5, #2]
}
 8005630:	4648      	mov	r0, r9
 8005632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8005636:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 800563a:	2b70      	cmp	r3, #112	; 0x70
 800563c:	e7d7      	b.n	80055ee <encode_uint+0x1a>
	switch (specifier) {
 800563e:	2608      	movs	r6, #8
 8005640:	e7d8      	b.n	80055f4 <encode_uint+0x20>
		value /= radix;
 8005642:	4680      	mov	r8, r0
 8005644:	460f      	mov	r7, r1
 8005646:	e7d7      	b.n	80055f8 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8005648:	f1bb 0f19 	cmp.w	fp, #25
 800564c:	bf94      	ite	ls
 800564e:	3437      	addls	r4, #55	; 0x37
 8005650:	3457      	addhi	r4, #87	; 0x57
 8005652:	e7db      	b.n	800560c <encode_uint+0x38>
		} else if (radix == 16) {
 8005654:	2e10      	cmp	r6, #16
 8005656:	d1eb      	bne.n	8005630 <encode_uint+0x5c>
			conv->altform_0c = true;
 8005658:	78ab      	ldrb	r3, [r5, #2]
 800565a:	f043 0310 	orr.w	r3, r3, #16
 800565e:	e7e6      	b.n	800562e <encode_uint+0x5a>

08005660 <outs>:
{
 8005660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005664:	4607      	mov	r7, r0
 8005666:	4688      	mov	r8, r1
 8005668:	4615      	mov	r5, r2
 800566a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800566c:	4614      	mov	r4, r2
 800566e:	42b4      	cmp	r4, r6
 8005670:	d305      	bcc.n	800567e <outs+0x1e>
 8005672:	b10e      	cbz	r6, 8005678 <outs+0x18>
	return (int)count;
 8005674:	1b60      	subs	r0, r4, r5
 8005676:	e008      	b.n	800568a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8005678:	7823      	ldrb	r3, [r4, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0fa      	beq.n	8005674 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 800567e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005682:	4641      	mov	r1, r8
 8005684:	47b8      	blx	r7
		if (rc < 0) {
 8005686:	2800      	cmp	r0, #0
 8005688:	daf1      	bge.n	800566e <outs+0xe>
}
 800568a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800568e <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 800568e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
 8005690:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
 8005692:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
 8005694:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
 8005696:	1baf      	subs	r7, r5, r6
{
 8005698:	4604      	mov	r4, r0
 800569a:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
 800569c:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
 800569e:	bf98      	it	ls
 80056a0:	1aff      	subls	r7, r7, r3
 80056a2:	eba5 0000 	sub.w	r0, r5, r0
{
 80056a6:	4694      	mov	ip, r2
		base += buf->size;
 80056a8:	bf98      	it	ls
 80056aa:	18f6      	addls	r6, r6, r3
 80056ac:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
 80056ae:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
 80056b4:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
 80056b6:	442b      	add	r3, r5
	size = MIN(size, free_space);
 80056b8:	bf28      	it	cs
 80056ba:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
 80056bc:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
 80056be:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
 80056c0:	4290      	cmp	r0, r2
 80056c2:	bf28      	it	cs
 80056c4:	4610      	movcs	r0, r2
	buf->put_head += size;
 80056c6:	4403      	add	r3, r0
 80056c8:	6063      	str	r3, [r4, #4]

	return size;
}
 80056ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056cc <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
 80056cc:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 80056d0:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
 80056d2:	428a      	cmp	r2, r1
 80056d4:	d30c      	bcc.n	80056f0 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
 80056d6:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
 80056d8:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
 80056da:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
 80056dc:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
 80056e0:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
 80056e2:	428a      	cmp	r2, r1
 80056e4:	d901      	bls.n	80056ea <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
 80056e6:	2000      	movs	r0, #0
 80056e8:	4770      	bx	lr
		buf->put_base += buf->size;
 80056ea:	4413      	add	r3, r2
 80056ec:	60c3      	str	r3, [r0, #12]
 80056ee:	e7fa      	b.n	80056e6 <ring_buf_put_finish+0x1a>
		return -EINVAL;
 80056f0:	f06f 0015 	mvn.w	r0, #21
}
 80056f4:	4770      	bx	lr

080056f6 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
 80056f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80056fa:	4680      	mov	r8, r0
 80056fc:	460e      	mov	r6, r1
 80056fe:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 8005700:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 8005702:	462a      	mov	r2, r5
 8005704:	a901      	add	r1, sp, #4
 8005706:	4640      	mov	r0, r8
 8005708:	f7ff ffc1 	bl	800568e <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
 800570c:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
 800570e:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
 8005710:	4602      	mov	r2, r0
 8005712:	9801      	ldr	r0, [sp, #4]
 8005714:	f000 fa07 	bl	8005b26 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 8005718:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
 800571a:	4427      	add	r7, r4
		data += partial_size;
 800571c:	4426      	add	r6, r4
	} while (size && partial_size);
 800571e:	d001      	beq.n	8005724 <ring_buf_put+0x2e>
 8005720:	2c00      	cmp	r4, #0
 8005722:	d1ee      	bne.n	8005702 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 8005724:	4639      	mov	r1, r7
 8005726:	4640      	mov	r0, r8
 8005728:	f7ff ffd0 	bl	80056cc <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
 800572c:	4638      	mov	r0, r7
 800572e:	b002      	add	sp, #8
 8005730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005734 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 8005734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005736:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
 8005738:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
 800573a:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
 800573c:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
 800573e:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
 8005740:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
 8005742:	42b8      	cmp	r0, r7
{
 8005744:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
 8005746:	bf98      	it	ls
 8005748:	1836      	addls	r6, r6, r0
 800574a:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
 8005754:	bf98      	it	ls
 8005756:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
 8005758:	442b      	add	r3, r5
	size = MIN(size, available_size);
 800575a:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
 800575c:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
 8005760:	bf28      	it	cs
 8005762:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
 8005764:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
 8005766:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
 8005768:	4290      	cmp	r0, r2
 800576a:	bf28      	it	cs
 800576c:	4610      	movcs	r0, r2
	buf->get_head += size;
 800576e:	4403      	add	r3, r0
 8005770:	6123      	str	r3, [r4, #16]

	return size;
}
 8005772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005774 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
 8005774:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8005778:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
 800577a:	428a      	cmp	r2, r1
 800577c:	d30c      	bcc.n	8005798 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
 800577e:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
 8005780:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
 8005784:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
 8005788:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
 800578a:	428a      	cmp	r2, r1
 800578c:	d901      	bls.n	8005792 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
 800578e:	2000      	movs	r0, #0
 8005790:	4770      	bx	lr
		buf->get_base += buf->size;
 8005792:	4413      	add	r3, r2
 8005794:	6183      	str	r3, [r0, #24]
 8005796:	e7fa      	b.n	800578e <ring_buf_get_finish+0x1a>
		return -EINVAL;
 8005798:	f06f 0015 	mvn.w	r0, #21
}
 800579c:	4770      	bx	lr

0800579e <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
 800579e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80057a2:	4680      	mov	r8, r0
 80057a4:	460d      	mov	r5, r1
 80057a6:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 80057a8:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 80057aa:	4632      	mov	r2, r6
 80057ac:	a901      	add	r1, sp, #4
 80057ae:	4640      	mov	r0, r8
 80057b0:	f7ff ffc0 	bl	8005734 <ring_buf_get_claim>
 80057b4:	4604      	mov	r4, r0
		if (data) {
 80057b6:	b12d      	cbz	r5, 80057c4 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
 80057b8:	4602      	mov	r2, r0
 80057ba:	9901      	ldr	r1, [sp, #4]
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 f9b2 	bl	8005b26 <memcpy>
			data += partial_size;
 80057c2:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
 80057c4:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
 80057c6:	4427      	add	r7, r4
	} while (size && partial_size);
 80057c8:	d001      	beq.n	80057ce <ring_buf_get+0x30>
 80057ca:	2c00      	cmp	r4, #0
 80057cc:	d1ed      	bne.n	80057aa <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 80057ce:	4639      	mov	r1, r7
 80057d0:	4640      	mov	r0, r8
 80057d2:	f7ff ffcf 	bl	8005774 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
 80057d6:	4638      	mov	r0, r7
 80057d8:	b002      	add	sp, #8
 80057da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057de <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80057de:	4770      	bx	lr

080057e0 <HAL_Delay>:
 *	  on variable incremented.
 * @param Delay: specifies the delay time length, in milliseconds.
 * @return None
 */
void HAL_Delay(__IO uint32_t Delay)
{
 80057e0:	b082      	sub	sp, #8
			return t * ((uint64_t)to_hz / from_hz);
 80057e2:	210a      	movs	r1, #10
 80057e4:	9001      	str	r0, [sp, #4]
	k_msleep(Delay);
 80057e6:	9801      	ldr	r0, [sp, #4]
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 80057e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80057ec:	fb80 0101 	smull	r0, r1, r0, r1
}
 80057f0:	b002      	add	sp, #8
	return z_impl_k_sleep(timeout);
 80057f2:	f7ff bcb3 	b.w	800515c <z_impl_k_sleep>

080057f6 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 80057f6:	2000      	movs	r0, #0
 80057f8:	4770      	bx	lr

080057fa <usb_write>:
{
 80057fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057fe:	4606      	mov	r6, r0
 8005800:	460f      	mov	r7, r1
 8005802:	4690      	mov	r8, r2
 8005804:	4699      	mov	r9, r3
 8005806:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
 8005808:	464b      	mov	r3, r9
 800580a:	4642      	mov	r2, r8
 800580c:	4639      	mov	r1, r7
 800580e:	4630      	mov	r0, r6
 8005810:	f7fc ffc8 	bl	80027a4 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
 8005814:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
 8005818:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
 800581a:	d103      	bne.n	8005824 <usb_write+0x2a>
	z_impl_k_yield();
 800581c:	f7ff fc1c 	bl	8005058 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
 8005820:	3d01      	subs	r5, #1
 8005822:	d1f1      	bne.n	8005808 <usb_write+0xe>
}
 8005824:	4620      	mov	r0, r4
 8005826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800582a <usb_get_dev_data_by_cfg>:
	return list->head;
 800582a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 800582c:	b140      	cbz	r0, 8005840 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
 800582e:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8005836:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
 800583a:	d001      	beq.n	8005840 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
 800583c:	6840      	ldr	r0, [r0, #4]
 800583e:	e7f5      	b.n	800582c <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
 8005840:	4770      	bx	lr

08005842 <usb_get_dev_data_by_iface>:
	return list->head;
 8005842:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8005844:	b150      	cbz	r0, 800585c <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
 8005846:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
 800584a:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	789b      	ldrb	r3, [r3, #2]
 8005850:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8005852:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
 8005856:	d001      	beq.n	800585c <usb_get_dev_data_by_iface+0x1a>
	return node->next;
 8005858:	6840      	ldr	r0, [r0, #4]
 800585a:	e7f3      	b.n	8005844 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
 800585c:	4770      	bx	lr

0800585e <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
 800585e:	b530      	push	{r4, r5, lr}
	return list->head;
 8005860:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 8005862:	b188      	cbz	r0, 8005888 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
 8005864:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005868:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
 800586a:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
 800586c:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
 800586e:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
 8005870:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
 8005872:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
 8005874:	b2dc      	uxtb	r4, r3
 8005876:	42a5      	cmp	r5, r4
 8005878:	d801      	bhi.n	800587e <usb_get_dev_data_by_ep+0x20>
	return node->next;
 800587a:	6840      	ldr	r0, [r0, #4]
 800587c:	e7f1      	b.n	8005862 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
 800587e:	3301      	adds	r3, #1
 8005880:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
 8005884:	428c      	cmp	r4, r1
 8005886:	d1f5      	bne.n	8005874 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
 8005888:	bd30      	pop	{r4, r5, pc}

0800588a <usb_transfer_is_busy>:
{
 800588a:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
 800588c:	f7fb fef2 	bl	8001674 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
 8005890:	b128      	cbz	r0, 800589e <usb_transfer_is_busy+0x14>
 8005892:	6840      	ldr	r0, [r0, #4]
 8005894:	f110 0f10 	cmn.w	r0, #16
 8005898:	bf14      	ite	ne
 800589a:	2000      	movne	r0, #0
 800589c:	2001      	moveq	r0, #1
}
 800589e:	bd08      	pop	{r3, pc}

080058a0 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
 80058a0:	1c4b      	adds	r3, r1, #1
 80058a2:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
 80058a4:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
 80058a6:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
 80058a8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
 80058ac:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
 80058ae:	f800 1c06 	strb.w	r1, [r0, #-6]
}
 80058b2:	4770      	bx	lr

080058b4 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
 80058b4:	e950 3102 	ldrd	r3, r1, [r0, #-8]
 80058b8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80058ba:	4718      	bx	r3

080058bc <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 80058bc:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 80058c4:	4770      	bx	lr

080058c6 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 80058c6:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
 80058c8:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 80058cc:	b108      	cbz	r0, 80058d2 <cdc_acm_irq_tx_ready+0xc>
 80058ce:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
 80058d2:	4770      	bx	lr

080058d4 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 80058d4:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 80058dc:	4770      	bx	lr

080058de <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
 80058de:	6903      	ldr	r3, [r0, #16]
}
 80058e0:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 80058e4:	4770      	bx	lr

080058e6 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 80058e6:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
 80058e8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80058ec:	b112      	cbz	r2, 80058f4 <cdc_acm_irq_is_pending+0xe>
 80058ee:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80058f2:	b92a      	cbnz	r2, 8005900 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
 80058f4:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
 80058f8:	b118      	cbz	r0, 8005902 <cdc_acm_irq_is_pending+0x1c>
 80058fa:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
 80058fe:	4770      	bx	lr
		return 1;
 8005900:	2001      	movs	r0, #1
}
 8005902:	4770      	bx	lr

08005904 <cdc_acm_irq_update>:
}
 8005904:	2001      	movs	r0, #1
 8005906:	4770      	bx	lr

08005908 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8005908:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
 800590a:	e9c3 1200 	strd	r1, r2, [r3]
}
 800590e:	4770      	bx	lr

08005910 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
 8005910:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8005912:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
 8005914:	d007      	beq.n	8005926 <cdc_acm_line_ctrl_get+0x16>
 8005916:	2904      	cmp	r1, #4
 8005918:	d00a      	beq.n	8005930 <cdc_acm_line_ctrl_get+0x20>
 800591a:	2901      	cmp	r1, #1
 800591c:	d10d      	bne.n	800593a <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
 800591e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
 8005920:	6013      	str	r3, [r2, #0]
		return 0;
 8005922:	2000      	movs	r0, #0
 8005924:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
 8005926:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800592a:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
 800592e:	e7f7      	b.n	8005920 <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
 8005930:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8005934:	f003 0301 	and.w	r3, r3, #1
		return 0;
 8005938:	e7f2      	b.n	8005920 <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
 800593a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800593e:	4770      	bx	lr

08005940 <cdc_acm_configure>:
}
 8005940:	2000      	movs	r0, #0
 8005942:	4770      	bx	lr

08005944 <cdc_acm_config_get>:
{
 8005944:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8005946:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
 8005948:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800594a:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
 800594c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8005950:	b16a      	cbz	r2, 800596e <cdc_acm_config_get+0x2a>
 8005952:	2a01      	cmp	r2, #1
 8005954:	bf0c      	ite	eq
 8005956:	2202      	moveq	r2, #2
 8005958:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
 800595a:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
 800595c:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
 8005960:	1e50      	subs	r0, r2, #1
 8005962:	2803      	cmp	r0, #3
 8005964:	d805      	bhi.n	8005972 <cdc_acm_config_get+0x2e>
 8005966:	e8df f000 	tbb	[pc, r0]
 800596a:	0505      	.short	0x0505
 800596c:	0505      	.short	0x0505
	switch (dev_data->line_coding.bCharFormat) {
 800596e:	2201      	movs	r2, #1
 8005970:	e7f3      	b.n	800595a <cdc_acm_config_get+0x16>
	switch (dev_data->line_coding.bParityType) {
 8005972:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
 8005974:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
 8005976:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800597a:	2b06      	cmp	r3, #6
 800597c:	d009      	beq.n	8005992 <cdc_acm_config_get+0x4e>
 800597e:	2b07      	cmp	r3, #7
 8005980:	d009      	beq.n	8005996 <cdc_acm_config_get+0x52>
 8005982:	2b05      	cmp	r3, #5
 8005984:	bf0c      	ite	eq
 8005986:	2300      	moveq	r3, #0
 8005988:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
 800598a:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
 800598c:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
 800598e:	71c8      	strb	r0, [r1, #7]
}
 8005990:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
 8005992:	2301      	movs	r3, #1
 8005994:	e7f9      	b.n	800598a <cdc_acm_config_get+0x46>
 8005996:	2302      	movs	r3, #2
 8005998:	e7f7      	b.n	800598a <cdc_acm_config_get+0x46>

0800599a <cdc_acm_line_ctrl_set>:
{
 800599a:	b508      	push	{r3, lr}
	switch (ctrl) {
 800599c:	2940      	cmp	r1, #64	; 0x40
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 800599e:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
 80059a0:	d03e      	beq.n	8005a20 <cdc_acm_line_ctrl_set+0x86>
 80059a2:	d813      	bhi.n	80059cc <cdc_acm_line_ctrl_set+0x32>
 80059a4:	2910      	cmp	r1, #16
 80059a6:	d031      	beq.n	8005a0c <cdc_acm_line_ctrl_set+0x72>
 80059a8:	d806      	bhi.n	80059b8 <cdc_acm_line_ctrl_set+0x1e>
 80059aa:	2901      	cmp	r1, #1
 80059ac:	d01e      	beq.n	80059ec <cdc_acm_line_ctrl_set+0x52>
 80059ae:	2908      	cmp	r1, #8
 80059b0:	d01f      	beq.n	80059f2 <cdc_acm_line_ctrl_set+0x58>
 80059b2:	f06f 0012 	mvn.w	r0, #18
}
 80059b6:	bd08      	pop	{r3, pc}
	switch (ctrl) {
 80059b8:	2920      	cmp	r1, #32
 80059ba:	d1fa      	bne.n	80059b2 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
 80059bc:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 80059c0:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
 80059c4:	b34a      	cbz	r2, 8005a1a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
 80059c6:	f041 0104 	orr.w	r1, r1, #4
 80059ca:	e026      	b.n	8005a1a <cdc_acm_line_ctrl_set+0x80>
	switch (ctrl) {
 80059cc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80059d0:	d02f      	beq.n	8005a32 <cdc_acm_line_ctrl_set+0x98>
 80059d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80059d6:	d035      	beq.n	8005a44 <cdc_acm_line_ctrl_set+0xaa>
 80059d8:	2980      	cmp	r1, #128	; 0x80
 80059da:	d1ea      	bne.n	80059b2 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
 80059dc:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 80059e0:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
 80059e4:	b1ca      	cbz	r2, 8005a1a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
 80059e6:	f041 0110 	orr.w	r1, r1, #16
 80059ea:	e016      	b.n	8005a1a <cdc_acm_line_ctrl_set+0x80>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
 80059ec:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
 80059ee:	2000      	movs	r0, #0
 80059f0:	e7e1      	b.n	80059b6 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
 80059f2:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 80059f6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
 80059fa:	b10a      	cbz	r2, 8005a00 <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
 80059fc:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
 8005a00:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
 8005a04:	2101      	movs	r1, #1
 8005a06:	f7fc f8f7 	bl	8001bf8 <cdc_acm_send_notification.isra.0>
		return 0;
 8005a0a:	e7f0      	b.n	80059ee <cdc_acm_line_ctrl_set+0x54>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
 8005a0c:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 8005a10:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
 8005a14:	b10a      	cbz	r2, 8005a1a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
 8005a16:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
 8005a1a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
 8005a1e:	e7f2      	b.n	8005a06 <cdc_acm_line_ctrl_set+0x6c>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
 8005a20:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 8005a24:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	d0f6      	beq.n	8005a1a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
 8005a2c:	f041 0108 	orr.w	r1, r1, #8
 8005a30:	e7f3      	b.n	8005a1a <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
 8005a32:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 8005a36:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
 8005a3a:	2a00      	cmp	r2, #0
 8005a3c:	d0ed      	beq.n	8005a1a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
 8005a3e:	f041 0120 	orr.w	r1, r1, #32
 8005a42:	e7ea      	b.n	8005a1a <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
 8005a44:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 8005a48:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
 8005a4c:	2a00      	cmp	r2, #0
 8005a4e:	d0e4      	beq.n	8005a1a <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
 8005a50:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005a54:	e7e1      	b.n	8005a1a <cdc_acm_line_ctrl_set+0x80>

08005a56 <cdc_acm_fifo_read>:
{
 8005a56:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
 8005a58:	6904      	ldr	r4, [r0, #16]
{
 8005a5a:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
 8005a5c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005a5e:	f7ff fe9e 	bl	800579e <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
 8005a62:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	6899      	ldr	r1, [r3, #8]
 8005a68:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
 8005a6a:	bf04      	itt	eq
 8005a6c:	2200      	moveq	r2, #0
 8005a6e:	f884 2029 	strbeq.w	r2, [r4, #41]	; 0x29
	if (dev_data->rx_paused == true) {
 8005a72:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
 8005a76:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
 8005a78:	b1aa      	cbz	r2, 8005aa6 <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	6959      	ldr	r1, [r3, #20]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	1a52      	subs	r2, r2, r1
 8005a82:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
 8005a84:	2b3f      	cmp	r3, #63	; 0x3f
 8005a86:	d90e      	bls.n	8005aa6 <cdc_acm_fifo_read+0x50>
			if (dev_data->configured && !dev_data->suspended) {
 8005a88:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
 8005a8c:	b143      	cbz	r3, 8005aa0 <cdc_acm_fifo_read+0x4a>
 8005a8e:	f894 107f 	ldrb.w	r1, [r4, #127]	; 0x7f
 8005a92:	b929      	cbnz	r1, 8005aa0 <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
 8005a94:	686b      	ldr	r3, [r5, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	4622      	mov	r2, r4
 8005a9a:	7b18      	ldrb	r0, [r3, #12]
 8005a9c:	f7fc f8ce 	bl	8001c3c <cdc_acm_read_cb>
			dev_data->rx_paused = false;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	bd70      	pop	{r4, r5, r6, pc}

08005aaa <cdc_acm_poll_in>:
{
 8005aaa:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
 8005aac:	2201      	movs	r2, #1
 8005aae:	f7ff ffd2 	bl	8005a56 <cdc_acm_fifo_read>
}
 8005ab2:	3801      	subs	r0, #1
 8005ab4:	bf18      	it	ne
 8005ab6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005aba:	bd08      	pop	{r3, pc}

08005abc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8005abc:	f001 ba41 	b.w	8006f42 <z_fatal_error>

08005ac0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 8005ac0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8005ac2:	6800      	ldr	r0, [r0, #0]
 8005ac4:	f001 ba3d 	b.w	8006f42 <z_fatal_error>

08005ac8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	2001      	movs	r0, #1
 8005acc:	f7ff bff6 	b.w	8005abc <z_arm_fatal_error>

08005ad0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8005ad0:	b508      	push	{r3, lr}
	handler();
 8005ad2:	f7fc f99f 	bl	8001e14 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8005ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8005ada:	f7fc ba73 	b.w	8001fc4 <z_arm_exc_exit>

08005ade <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8005ade:	4603      	mov	r3, r0
	size_t n = 0;
 8005ae0:	2000      	movs	r0, #0

	while (*s != '\0') {
 8005ae2:	5c1a      	ldrb	r2, [r3, r0]
 8005ae4:	b902      	cbnz	r2, 8005ae8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8005ae6:	4770      	bx	lr
		n++;
 8005ae8:	3001      	adds	r0, #1
 8005aea:	e7fa      	b.n	8005ae2 <strlen+0x4>

08005aec <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 8005aec:	4603      	mov	r3, r0
	size_t n = 0;
 8005aee:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 8005af0:	5c1a      	ldrb	r2, [r3, r0]
 8005af2:	b10a      	cbz	r2, 8005af8 <strnlen+0xc>
 8005af4:	4288      	cmp	r0, r1
 8005af6:	d100      	bne.n	8005afa <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 8005af8:	4770      	bx	lr
		n++;
 8005afa:	3001      	adds	r0, #1
 8005afc:	e7f8      	b.n	8005af0 <strnlen+0x4>

08005afe <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
 8005afe:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8005b00:	460b      	mov	r3, r1
 8005b02:	4605      	mov	r5, r0
 8005b04:	b16a      	cbz	r2, 8005b22 <strncmp+0x24>
 8005b06:	f810 6b01 	ldrb.w	r6, [r0], #1
 8005b0a:	781c      	ldrb	r4, [r3, #0]
 8005b0c:	42b4      	cmp	r4, r6
 8005b0e:	f101 0101 	add.w	r1, r1, #1
 8005b12:	d100      	bne.n	8005b16 <strncmp+0x18>
 8005b14:	b91c      	cbnz	r4, 8005b1e <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
 8005b16:	782a      	ldrb	r2, [r5, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	1ad0      	subs	r0, r2, r3
 8005b1c:	e002      	b.n	8005b24 <strncmp+0x26>
		n--;
 8005b1e:	3a01      	subs	r2, #1
 8005b20:	e7ee      	b.n	8005b00 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
 8005b22:	4610      	mov	r0, r2
}
 8005b24:	bd70      	pop	{r4, r5, r6, pc}

08005b26 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 8005b26:	b510      	push	{r4, lr}
 8005b28:	1e43      	subs	r3, r0, #1
 8005b2a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 8005b2c:	4291      	cmp	r1, r2
 8005b2e:	d100      	bne.n	8005b32 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8005b30:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 8005b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b36:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8005b3a:	e7f7      	b.n	8005b2c <memcpy+0x6>

08005b3c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8005b3c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 8005b3e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
 8005b40:	4603      	mov	r3, r0
	while (n > 0) {
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d100      	bne.n	8005b48 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8005b46:	4770      	bx	lr
		*(d_byte++) = c_byte;
 8005b48:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8005b4c:	e7f9      	b.n	8005b42 <memset+0x6>

08005b4e <_stdout_hook_default>:
}
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b52:	4770      	bx	lr

08005b54 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8005b54:	2200      	movs	r2, #0
{
 8005b56:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8005b58:	4611      	mov	r1, r2
 8005b5a:	2006      	movs	r0, #6
 8005b5c:	f7fc f942 	bl	8001de4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8005b60:	2200      	movs	r2, #0
 8005b62:	4611      	mov	r1, r2
 8005b64:	2007      	movs	r0, #7
 8005b66:	f7fc f93d 	bl	8001de4 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	2008      	movs	r0, #8
 8005b70:	f7fc f938 	bl	8001de4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8005b74:	2200      	movs	r2, #0
 8005b76:	4611      	mov	r1, r2
 8005b78:	2009      	movs	r0, #9
 8005b7a:	f7fc f933 	bl	8001de4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8005b7e:	2200      	movs	r2, #0
 8005b80:	4611      	mov	r1, r2
 8005b82:	200a      	movs	r0, #10
 8005b84:	f7fc f92e 	bl	8001de4 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	2017      	movs	r0, #23
 8005b8e:	f7fc f929 	bl	8001de4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8005b92:	2200      	movs	r2, #0
 8005b94:	4611      	mov	r1, r2
 8005b96:	2028      	movs	r0, #40	; 0x28
 8005b98:	f7fc f924 	bl	8001de4 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	f7fc f91f 	bl	8001de4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4611      	mov	r1, r2
 8005baa:	202a      	movs	r0, #42	; 0x2a
 8005bac:	f7fc f91a 	bl	8001de4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	2002      	movs	r0, #2
 8005bb6:	f7fc f915 	bl	8001de4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8005bba:	2200      	movs	r2, #0
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	2003      	movs	r0, #3
 8005bc0:	f7fc f910 	bl	8001de4 <z_arm_irq_priority_set>
}
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	bd08      	pop	{r3, pc}

08005bc8 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, dev);
 8005bc8:	6902      	ldr	r2, [r0, #16]
 8005bca:	2117      	movs	r1, #23
 8005bcc:	2016      	movs	r0, #22
 8005bce:	f7fc bc13 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005bd2 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, dev);
 8005bd2:	6902      	ldr	r2, [r0, #16]
 8005bd4:	2116      	movs	r1, #22
 8005bd6:	2015      	movs	r0, #21
 8005bd8:	f7fc bc0e 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005bdc <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, dev);
 8005bdc:	6902      	ldr	r2, [r0, #16]
 8005bde:	2113      	movs	r1, #19
 8005be0:	2012      	movs	r0, #18
 8005be2:	f7fc bc09 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005be6 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, dev);
 8005be6:	6902      	ldr	r2, [r0, #16]
 8005be8:	2111      	movs	r1, #17
 8005bea:	2010      	movs	r0, #16
 8005bec:	f7fc bc04 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005bf0 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, dev);
 8005bf0:	6902      	ldr	r2, [r0, #16]
 8005bf2:	2110      	movs	r1, #16
 8005bf4:	200a      	movs	r0, #10
 8005bf6:	f7fc bbff 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005bfa <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, dev);
 8005bfa:	6902      	ldr	r2, [r0, #16]
 8005bfc:	210a      	movs	r1, #10
 8005bfe:	2005      	movs	r0, #5
 8005c00:	f7fc bbfa 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005c04 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, dev);
 8005c04:	6902      	ldr	r2, [r0, #16]
 8005c06:	2105      	movs	r1, #5
 8005c08:	2004      	movs	r0, #4
 8005c0a:	f7fc bbf5 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005c0e <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, dev);
 8005c0e:	6902      	ldr	r2, [r0, #16]
 8005c10:	2104      	movs	r1, #4
 8005c12:	2003      	movs	r0, #3
 8005c14:	f7fc bbf0 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005c18 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, dev);
 8005c18:	6902      	ldr	r2, [r0, #16]
 8005c1a:	2103      	movs	r1, #3
 8005c1c:	2002      	movs	r0, #2
 8005c1e:	f7fc bbeb 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005c22 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, dev);
 8005c22:	6902      	ldr	r2, [r0, #16]
 8005c24:	2102      	movs	r1, #2
 8005c26:	2001      	movs	r0, #1
 8005c28:	f7fc bbe6 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005c2c <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, dev);
 8005c2c:	6902      	ldr	r2, [r0, #16]
 8005c2e:	2101      	movs	r1, #1
 8005c30:	2000      	movs	r0, #0
 8005c32:	f7fc bbe1 	b.w	80023f8 <__stm32_exti_isr.isra.0>

08005c36 <usb_dc_ep_set_callback>:
{
 8005c36:	b510      	push	{r4, lr}
 8005c38:	460c      	mov	r4, r1
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005c3a:	f7fc fc63 	bl	8002504 <usb_dc_stm32_get_ep_state>
	if (!ep_state) {
 8005c3e:	b110      	cbz	r0, 8005c46 <usb_dc_ep_set_callback+0x10>
	ep_state->cb = cb;
 8005c40:	6084      	str	r4, [r0, #8]
	return 0;
 8005c42:	2000      	movs	r0, #0
}
 8005c44:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8005c46:	f06f 0015 	mvn.w	r0, #21
 8005c4a:	e7fb      	b.n	8005c44 <usb_dc_ep_set_callback+0xe>

08005c4c <usb_dc_ep_check_cap>:
	if ((cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
 8005c4c:	7902      	ldrb	r2, [r0, #4]
	uint8_t ep_idx = USB_EP_GET_IDX(cfg->ep_addr);
 8005c4e:	7803      	ldrb	r3, [r0, #0]
	if ((cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
 8005c50:	b90a      	cbnz	r2, 8005c56 <usb_dc_ep_check_cap+0xa>
 8005c52:	065a      	lsls	r2, r3, #25
 8005c54:	d106      	bne.n	8005c64 <usb_dc_ep_check_cap+0x18>
	if (ep_idx > (USB_NUM_BIDIR_ENDPOINTS - 1)) {
 8005c56:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 8005c5a:	bf14      	ite	ne
 8005c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005c60:	2000      	moveq	r0, #0
 8005c62:	4770      	bx	lr
		return -1;
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005c68:	4770      	bx	lr

08005c6a <usb_dc_ep_configure>:
{
 8005c6a:	b510      	push	{r4, lr}
 8005c6c:	4604      	mov	r4, r0
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005c6e:	7800      	ldrb	r0, [r0, #0]
 8005c70:	f7fc fc48 	bl	8002504 <usb_dc_stm32_get_ep_state>
	if (!ep_state) {
 8005c74:	b158      	cbz	r0, 8005c8e <usb_dc_ep_configure+0x24>
	ep_state->ep_mps = ep_cfg->ep_mps;
 8005c76:	8863      	ldrh	r3, [r4, #2]
 8005c78:	8003      	strh	r3, [r0, #0]
	switch (ep_cfg->ep_type) {
 8005c7a:	7923      	ldrb	r3, [r4, #4]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d806      	bhi.n	8005c8e <usb_dc_ep_configure+0x24>
 8005c80:	e8df f003 	tbb	[pc, r3]
 8005c84:	02020202 	.word	0x02020202
		ep_state->ep_type = EP_TYPE_CTRL;
 8005c88:	7103      	strb	r3, [r0, #4]
	return 0;
 8005c8a:	2000      	movs	r0, #0
}
 8005c8c:	bd10      	pop	{r4, pc}
{
 8005c8e:	f06f 0015 	mvn.w	r0, #21
 8005c92:	e7fb      	b.n	8005c8c <usb_dc_ep_configure+0x22>

08005c94 <usb_dc_ep_is_stalled>:
{
 8005c94:	b510      	push	{r4, lr}
 8005c96:	460c      	mov	r4, r1
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005c98:	f7fc fc34 	bl	8002504 <usb_dc_stm32_get_ep_state>
	if (!ep_state || !stalled) {
 8005c9c:	b120      	cbz	r0, 8005ca8 <usb_dc_ep_is_stalled+0x14>
 8005c9e:	b11c      	cbz	r4, 8005ca8 <usb_dc_ep_is_stalled+0x14>
	*stalled = ep_state->ep_stalled;
 8005ca0:	7943      	ldrb	r3, [r0, #5]
 8005ca2:	7023      	strb	r3, [r4, #0]
	return 0;
 8005ca4:	2000      	movs	r0, #0
}
 8005ca6:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8005ca8:	f06f 0015 	mvn.w	r0, #21
 8005cac:	e7fb      	b.n	8005ca6 <usb_dc_ep_is_stalled+0x12>

08005cae <usb_dc_ep_read>:
{
 8005cae:	b510      	push	{r4, lr}
 8005cb0:	4604      	mov	r4, r0
	if (usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes) != 0) {
 8005cb2:	f7fc fdc9 	bl	8002848 <usb_dc_ep_read_wait>
 8005cb6:	b110      	cbz	r0, 8005cbe <usb_dc_ep_read+0x10>
		return -EINVAL;
 8005cb8:	f06f 0015 	mvn.w	r0, #21
}
 8005cbc:	bd10      	pop	{r4, pc}
	if (usb_dc_ep_read_continue(ep) != 0) {
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f7fc fdf2 	bl	80028a8 <usb_dc_ep_read_continue>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	d0f9      	beq.n	8005cbc <usb_dc_ep_read+0xe>
 8005cc8:	e7f6      	b.n	8005cb8 <usb_dc_ep_read+0xa>

08005cca <usb_dc_ep_mps>:
{
 8005cca:	b508      	push	{r3, lr}
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005ccc:	f7fc fc1a 	bl	8002504 <usb_dc_stm32_get_ep_state>
	if (!ep_state) {
 8005cd0:	b108      	cbz	r0, 8005cd6 <usb_dc_ep_mps+0xc>
	return ep_state->ep_mps;
 8005cd2:	8800      	ldrh	r0, [r0, #0]
}
 8005cd4:	bd08      	pop	{r3, pc}
		return -EINVAL;
 8005cd6:	f06f 0015 	mvn.w	r0, #21
 8005cda:	e7fb      	b.n	8005cd4 <usb_dc_ep_mps+0xa>

08005cdc <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005cdc:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_idx = USB_EP_GET_IDX(epnum);
 8005cde:	f001 047f 	and.w	r4, r1, #127	; 0x7f
	uint8_t ep = ep_idx | USB_EP_DIR_OUT;
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f7fc fc0e 	bl	8002504 <usb_dc_stm32_get_ep_state>
 8005ce8:	4605      	mov	r5, r0
		HAL_PCD_EP_GetRxCount(&usb_dc_stm32_state.pcd, epnum));

	/* Transaction complete, data is now stored in the buffer and ready
	 * for the upper stack (usb_dc_ep_read to retrieve).
	 */
	usb_dc_ep_get_read_count(ep, &ep_state->read_count);
 8005cea:	f100 010c 	add.w	r1, r0, #12
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f7fc fce4 	bl	80026bc <usb_dc_ep_get_read_count>
	ep_state->read_offset = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	612b      	str	r3, [r5, #16]

	if (ep_state->cb) {
 8005cf8:	68ab      	ldr	r3, [r5, #8]
 8005cfa:	b123      	cbz	r3, 8005d06 <HAL_PCD_DataOutStageCallback+0x2a>
		ep_state->cb(ep, USB_DC_EP_DATA_OUT);
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	2101      	movs	r1, #1
	}
}
 8005d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ep_state->cb(ep, USB_DC_EP_DATA_OUT);
 8005d04:	4718      	bx	r3
}
 8005d06:	bd70      	pop	{r4, r5, r6, pc}

08005d08 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005d08:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_idx = USB_EP_GET_IDX(epnum);
	uint8_t ep = ep_idx | USB_EP_DIR_IN;
 8005d0a:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	struct usb_dc_stm32_ep_state *ep_state = usb_dc_stm32_get_ep_state(ep);
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f7fc fbf8 	bl	8002504 <usb_dc_stm32_get_ep_state>
 8005d14:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 8005d16:	3014      	adds	r0, #20
 8005d18:	f7fe fdee 	bl	80048f8 <z_impl_k_sem_give>

	__ASSERT(ep_state, "No corresponding ep_state for ep");

	k_sem_give(&ep_state->write_sem);

	if (ep_state->cb) {
 8005d1c:	68ab      	ldr	r3, [r5, #8]
 8005d1e:	b123      	cbz	r3, 8005d2a <HAL_PCD_DataInStageCallback+0x22>
		ep_state->cb(ep, USB_DC_EP_DATA_IN);
 8005d20:	4620      	mov	r0, r4
 8005d22:	2102      	movs	r1, #2
	}
}
 8005d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ep_state->cb(ep, USB_DC_EP_DATA_IN);
 8005d28:	4718      	bx	r3
}
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}

08005d2c <stm32_clock_control_on>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8005d2c:	680b      	ldr	r3, [r1, #0]
 8005d2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005d32:	2a78      	cmp	r2, #120	; 0x78
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 8005d34:	bf9f      	itttt	ls
 8005d36:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8005d3a:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800
	reg_val |= pclken->enr;
 8005d3e:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 8005d40:	681a      	ldrls	r2, [r3, #0]
	reg_val |= pclken->enr;
 8005d42:	bf9d      	ittte	ls
 8005d44:	430a      	orrls	r2, r1
	return 0;
 8005d46:	2000      	movls	r0, #0
	*reg = reg_val;
 8005d48:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8005d4a:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8005d4e:	4770      	bx	lr

08005d50 <stm32_clock_control_off>:
	if (IN_RANGE(pclken->bus, STM32_PERIPH_BUS_MIN, STM32_PERIPH_BUS_MAX) == 0) {
 8005d50:	680b      	ldr	r3, [r1, #0]
 8005d52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005d56:	2a78      	cmp	r2, #120	; 0x78
	reg = (uint32_t *)(DT_REG_ADDR(DT_NODELABEL(rcc)) + pclken->bus);
 8005d58:	bf9f      	itttt	ls
 8005d5a:	f103 4380 	addls.w	r3, r3, #1073741824	; 0x40000000
 8005d5e:	f503 330e 	addls.w	r3, r3, #145408	; 0x23800
	reg_val &= ~pclken->enr;
 8005d62:	6849      	ldrls	r1, [r1, #4]
	reg_val = *reg;
 8005d64:	681a      	ldrls	r2, [r3, #0]
	reg_val &= ~pclken->enr;
 8005d66:	bf9d      	ittte	ls
 8005d68:	438a      	bicls	r2, r1
	return 0;
 8005d6a:	2000      	movls	r0, #0
	*reg = reg_val;
 8005d6c:	601a      	strls	r2, [r3, #0]
		return -ENOTSUP;
 8005d6e:	f06f 0085 	mvnhi.w	r0, #133	; 0x85
}
 8005d72:	4770      	bx	lr

08005d74 <stm32_clock_control_configure>:
}
 8005d74:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005d78:	4770      	bx	lr

08005d7a <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005d7a:	6843      	ldr	r3, [r0, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8005d7e:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8005d80:	600b      	str	r3, [r1, #0]
}
 8005d82:	2000      	movs	r0, #0
 8005d84:	4770      	bx	lr

08005d86 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005d86:	6843      	ldr	r3, [r0, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8005d8a:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8005d8c:	4042      	eors	r2, r0
 8005d8e:	400a      	ands	r2, r1
 8005d90:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8005d92:	615a      	str	r2, [r3, #20]
}
 8005d94:	2000      	movs	r0, #0
 8005d96:	4770      	bx	lr

08005d98 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005d98:	6843      	ldr	r3, [r0, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
}
 8005d9c:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8005d9e:	6199      	str	r1, [r3, #24]
}
 8005da0:	4770      	bx	lr

08005da2 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005da2:	6843      	ldr	r3, [r0, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005da6:	0409      	lsls	r1, r1, #16
 8005da8:	6199      	str	r1, [r3, #24]
}
 8005daa:	2000      	movs	r0, #0
 8005dac:	4770      	bx	lr

08005dae <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005dae:	6843      	ldr	r3, [r0, #4]
 8005db0:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8005db2:	6953      	ldr	r3, [r2, #20]
 8005db4:	404b      	eors	r3, r1
 8005db6:	6153      	str	r3, [r2, #20]
}
 8005db8:	2000      	movs	r0, #0
 8005dba:	4770      	bx	lr

08005dbc <gpio_stm32_manage_callback>:
{
 8005dbc:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->data;
 8005dbe:	6903      	ldr	r3, [r0, #16]
	return list->head;
 8005dc0:	6898      	ldr	r0, [r3, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8005dc2:	b1f8      	cbz	r0, 8005e04 <gpio_stm32_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005dc4:	4288      	cmp	r0, r1
 8005dc6:	d119      	bne.n	8005dfc <gpio_stm32_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 8005dc8:	68dc      	ldr	r4, [r3, #12]
	return node->next;
 8005dca:	6808      	ldr	r0, [r1, #0]
	list->head = node;
 8005dcc:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8005dce:	42a1      	cmp	r1, r4
 8005dd0:	d100      	bne.n	8005dd4 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8005dd2:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
 8005dd8:	b12a      	cbz	r2, 8005de6 <gpio_stm32_manage_callback+0x2a>
	return list->head;
 8005dda:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8005ddc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8005dde:	68da      	ldr	r2, [r3, #12]
	list->head = node;
 8005de0:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8005de2:	b902      	cbnz	r2, 8005de6 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 8005de4:	60d9      	str	r1, [r3, #12]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8005de6:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->cb, callback, set);
 8005de8:	e010      	b.n	8005e0c <gpio_stm32_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005dea:	4281      	cmp	r1, r0
 8005dec:	d106      	bne.n	8005dfc <gpio_stm32_manage_callback+0x40>
	return node->next;
 8005dee:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 8005df0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8005df2:	68d8      	ldr	r0, [r3, #12]
 8005df4:	4281      	cmp	r1, r0
 8005df6:	d1ed      	bne.n	8005dd4 <gpio_stm32_manage_callback+0x18>
	list->tail = node;
 8005df8:	60dc      	str	r4, [r3, #12]
}
 8005dfa:	e7eb      	b.n	8005dd4 <gpio_stm32_manage_callback+0x18>
	return node->next;
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d1f2      	bne.n	8005dea <gpio_stm32_manage_callback+0x2e>
			if (!set) {
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	d1e8      	bne.n	8005dda <gpio_stm32_manage_callback+0x1e>
				return -EINVAL;
 8005e08:	f06f 0015 	mvn.w	r0, #21
}
 8005e0c:	bd10      	pop	{r4, pc}

08005e0e <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8005e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005e10:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8005e12:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005e14:	6867      	ldr	r7, [r4, #4]
 8005e16:	4088      	lsls	r0, r1
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8005e18:	461e      	mov	r6, r3
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8005e1a:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8005e1e:	ea27 0700 	bic.w	r7, r7, r0
 8005e22:	408b      	lsls	r3, r1
 8005e24:	433b      	orrs	r3, r7
 8005e26:	6063      	str	r3, [r4, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e28:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8005e2c:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005e30:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8005e34:	f04f 0e03 	mov.w	lr, #3
 8005e38:	007f      	lsls	r7, r7, #1
 8005e3a:	fa0e f707 	lsl.w	r7, lr, r7
 8005e3e:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e42:	fa90 f7a0 	rbit	r7, r0
  return __builtin_clz(value);
 8005e46:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8005e4a:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 8005e4e:	007f      	lsls	r7, r7, #1
 8005e50:	40bb      	lsls	r3, r7
 8005e52:	ea43 030c 	orr.w	r3, r3, ip
 8005e56:	60a3      	str	r3, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e58:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8005e5c:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005e60:	68e7      	ldr	r7, [r4, #12]
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	fa0e f303 	lsl.w	r3, lr, r3
 8005e68:	ea27 0703 	bic.w	r7, r7, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6c:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8005e70:	fab3 f383 	clz	r3, r3
 8005e74:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8005e78:	005b      	lsls	r3, r3, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8005e7a:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8005e82:	2d20      	cmp	r5, #32
 8005e84:	60e2      	str	r2, [r4, #12]
 8005e86:	d116      	bne.n	8005eb6 <gpio_stm32_configure_raw.isra.0+0xa8>
		if (pin < 8) {
 8005e88:	2907      	cmp	r1, #7
 8005e8a:	dc2b      	bgt.n	8005ee4 <gpio_stm32_configure_raw.isra.0+0xd6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8c:	fa90 f3a0 	rbit	r3, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005e90:	6a22      	ldr	r2, [r4, #32]
  if (value == 0U)
 8005e92:	b32b      	cbz	r3, 8005ee0 <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 8005e94:	fab3 f383 	clz	r3, r3
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	210f      	movs	r1, #15
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	ea22 0203 	bic.w	r2, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea4:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8005ea8:	fab3 f383 	clz	r3, r3
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	fa06 f303 	lsl.w	r3, r6, r3
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	6223      	str	r3, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb6:	fa90 f3a0 	rbit	r3, r0
  return __builtin_clz(value);
 8005eba:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005ebe:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec0:	fa90 f0a0 	rbit	r0, r0
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	2103      	movs	r1, #3
  return __builtin_clz(value);
 8005ec8:	fab0 f080 	clz	r0, r0
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8005ecc:	092d      	lsrs	r5, r5, #4
 8005ece:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed2:	0040      	lsls	r0, r0, #1
 8005ed4:	ea22 0303 	bic.w	r3, r2, r3
 8005ed8:	4085      	lsls	r5, r0
 8005eda:	431d      	orrs	r5, r3
 8005edc:	6025      	str	r5, [r4, #0]
}
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8005ee0:	462b      	mov	r3, r5
 8005ee2:	e7d9      	b.n	8005e98 <gpio_stm32_configure_raw.isra.0+0x8a>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005ee4:	0a03      	lsrs	r3, r0, #8
 8005ee6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee8:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8005eec:	b182      	cbz	r2, 8005f10 <gpio_stm32_configure_raw.isra.0+0x102>
  return __builtin_clz(value);
 8005eee:	fab2 f282 	clz	r2, r2
 8005ef2:	0092      	lsls	r2, r2, #2
 8005ef4:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef6:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8005efa:	fab3 f383 	clz	r3, r3
 8005efe:	fa07 f202 	lsl.w	r2, r7, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	ea21 0202 	bic.w	r2, r1, r2
 8005f08:	409e      	lsls	r6, r3
 8005f0a:	4316      	orrs	r6, r2
 8005f0c:	6266      	str	r6, [r4, #36]	; 0x24
}
 8005f0e:	e7d2      	b.n	8005eb6 <gpio_stm32_configure_raw.isra.0+0xa8>
    return 32U;
 8005f10:	462a      	mov	r2, r5
 8005f12:	e7ee      	b.n	8005ef2 <gpio_stm32_configure_raw.isra.0+0xe4>

08005f14 <gpio_stm32_config>:
{
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4604      	mov	r4, r0
	if ((flags & GPIO_OUTPUT) != 0) {
 8005f18:	0390      	lsls	r0, r2, #14
{
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8005f1e:	d517      	bpl.n	8005f50 <gpio_stm32_config+0x3c>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8005f20:	0791      	lsls	r1, r2, #30
 8005f22:	d50e      	bpl.n	8005f42 <gpio_stm32_config+0x2e>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8005f24:	075a      	lsls	r2, r3, #29
 8005f26:	d52e      	bpl.n	8005f86 <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8005f28:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8005f2a:	06d8      	lsls	r0, r3, #27
 8005f2c:	d50b      	bpl.n	8005f46 <gpio_stm32_config+0x32>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8005f32:	0319      	lsls	r1, r3, #12
 8005f34:	d51a      	bpl.n	8005f6c <gpio_stm32_config+0x58>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005f36:	6861      	ldr	r1, [r4, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8005f38:	2301      	movs	r3, #1
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005f3a:	6849      	ldr	r1, [r1, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8005f3c:	40ab      	lsls	r3, r5
	WRITE_REG(gpio->BSRR, pins);
 8005f3e:	618b      	str	r3, [r1, #24]
	return 0;
 8005f40:	e00d      	b.n	8005f5e <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8005f42:	2210      	movs	r2, #16
 8005f44:	e7f1      	b.n	8005f2a <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8005f46:	0699      	lsls	r1, r3, #26
 8005f48:	d5f3      	bpl.n	8005f32 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8005f4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8005f4e:	e7f0      	b.n	8005f32 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8005f50:	03da      	lsls	r2, r3, #15
 8005f52:	d513      	bpl.n	8005f7c <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 8005f54:	06d8      	lsls	r0, r3, #27
 8005f56:	d413      	bmi.n	8005f80 <gpio_stm32_config+0x6c>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8005f58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f5c:	029a      	lsls	r2, r3, #10
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8005f5e:	6860      	ldr	r0, [r4, #4]
 8005f60:	2300      	movs	r3, #0
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7ff ff53 	bl	8005e0e <gpio_stm32_configure_raw.isra.0>
	return 0;
 8005f68:	2000      	movs	r0, #0
}
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8005f6c:	035b      	lsls	r3, r3, #13
 8005f6e:	d5f6      	bpl.n	8005f5e <gpio_stm32_config+0x4a>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8005f70:	2101      	movs	r1, #1
 8005f72:	40a9      	lsls	r1, r5
 8005f74:	4620      	mov	r0, r4
 8005f76:	f7ff ff14 	bl	8005da2 <gpio_stm32_port_clear_bits_raw>
 8005f7a:	e7f0      	b.n	8005f5e <gpio_stm32_config+0x4a>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8005f7c:	2230      	movs	r2, #48	; 0x30
 8005f7e:	e7ee      	b.n	8005f5e <gpio_stm32_config+0x4a>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8005f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f84:	e7eb      	b.n	8005f5e <gpio_stm32_config+0x4a>
				return -ENOTSUP;
 8005f86:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005f8a:	e7ee      	b.n	8005f6a <gpio_stm32_config+0x56>

08005f8c <gpio_stm32_isr>:
{
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	460b      	mov	r3, r1
 8005f90:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8005f92:	b121      	cbz	r1, 8005f9e <gpio_stm32_isr+0x12>
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8005f94:	2501      	movs	r5, #1
 8005f96:	685e      	ldr	r6, [r3, #4]
	return node->next;
 8005f98:	680c      	ldr	r4, [r1, #0]
 8005f9a:	4085      	lsls	r5, r0
 8005f9c:	b901      	cbnz	r1, 8005fa0 <gpio_stm32_isr+0x14>
}
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
 8005fa0:	688a      	ldr	r2, [r1, #8]
 8005fa2:	402a      	ands	r2, r5
 8005fa4:	d002      	beq.n	8005fac <gpio_stm32_isr+0x20>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8005fa6:	684b      	ldr	r3, [r1, #4]
 8005fa8:	4630      	mov	r0, r6
 8005faa:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8005fac:	b11c      	cbz	r4, 8005fb6 <gpio_stm32_isr+0x2a>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	e7f2      	b.n	8005f9c <gpio_stm32_isr+0x10>
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	e7fa      	b.n	8005fb0 <gpio_stm32_isr+0x24>

08005fba <gpio_stm32_configure>:
{
 8005fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbc:	461f      	mov	r7, r3
 8005fbe:	4604      	mov	r4, r0
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8005fc0:	6840      	ldr	r0, [r0, #4]
{
 8005fc2:	460e      	mov	r6, r1
 8005fc4:	4615      	mov	r5, r2
	gpio_stm32_configure_raw(dev, pin, conf, func);
 8005fc6:	f7ff ff22 	bl	8005e0e <gpio_stm32_configure_raw.isra.0>
	if (func == IS_GPIO_OUT) {
 8005fca:	2f11      	cmp	r7, #17
 8005fcc:	d107      	bne.n	8005fde <gpio_stm32_configure+0x24>
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8005fce:	2101      	movs	r1, #1
		if (gpio_out == STM32_ODR_1) {
 8005fd0:	052b      	lsls	r3, r5, #20
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8005fd2:	fa01 f106 	lsl.w	r1, r1, r6
		if (gpio_out == STM32_ODR_1) {
 8005fd6:	d504      	bpl.n	8005fe2 <gpio_stm32_configure+0x28>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8005fdc:	6199      	str	r1, [r3, #24]
}
 8005fde:	2000      	movs	r0, #0
 8005fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7ff fedd 	bl	8005da2 <gpio_stm32_port_clear_bits_raw>
 8005fe8:	e7f9      	b.n	8005fde <gpio_stm32_configure+0x24>

08005fea <spi_context_get_next_buf>:
{
 8005fea:	b530      	push	{r4, r5, lr}
 8005fec:	4604      	mov	r4, r0
	while (*count) {
 8005fee:	6808      	ldr	r0, [r1, #0]
 8005ff0:	b908      	cbnz	r0, 8005ff6 <spi_context_get_next_buf+0xc>
	*buf_len = 0;
 8005ff2:	6010      	str	r0, [r2, #0]
	return NULL;
 8005ff4:	e008      	b.n	8006008 <spi_context_get_next_buf+0x1e>
		if (((*current)->len / dfs) != 0) {
 8005ff6:	6820      	ldr	r0, [r4, #0]
 8005ff8:	6845      	ldr	r5, [r0, #4]
 8005ffa:	429d      	cmp	r5, r3
 8005ffc:	d305      	bcc.n	800600a <spi_context_get_next_buf+0x20>
			*buf_len = (*current)->len / dfs;
 8005ffe:	fbb5 f5f3 	udiv	r5, r5, r3
 8006002:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	6818      	ldr	r0, [r3, #0]
}
 8006008:	bd30      	pop	{r4, r5, pc}
		++(*current);
 800600a:	3008      	adds	r0, #8
 800600c:	6020      	str	r0, [r4, #0]
		--(*count);
 800600e:	6808      	ldr	r0, [r1, #0]
 8006010:	3801      	subs	r0, #1
 8006012:	6008      	str	r0, [r1, #0]
 8006014:	e7eb      	b.n	8005fee <spi_context_get_next_buf+0x4>

08006016 <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 8006016:	b508      	push	{r3, lr}
 8006018:	2023      	movs	r0, #35	; 0x23
 800601a:	2200      	movs	r2, #0
 800601c:	2105      	movs	r1, #5
 800601e:	f7fb fee1 	bl	8001de4 <z_arm_irq_priority_set>
 8006022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006026:	2023      	movs	r0, #35	; 0x23
 8006028:	f7fb beba 	b.w	8001da0 <arch_irq_enable>

0800602c <spi_stm32_get_err>:
{
 800602c:	4602      	mov	r2, r0
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 800602e:	6880      	ldr	r0, [r0, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8006030:	f410 70b8 	ands.w	r0, r0, #368	; 0x170
{
 8006034:	b082      	sub	sp, #8
	if (sr & SPI_STM32_ERR_MSK) {
 8006036:	d00a      	beq.n	800604e <spi_stm32_get_err+0x22>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8006038:	6893      	ldr	r3, [r2, #8]
 800603a:	065b      	lsls	r3, r3, #25
 800603c:	d505      	bpl.n	800604a <spi_stm32_get_err+0x1e>
  tmpreg = SPIx->DR;
 800603e:	68d3      	ldr	r3, [r2, #12]
 8006040:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8006042:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 8006044:	6893      	ldr	r3, [r2, #8]
 8006046:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8006048:	9b01      	ldr	r3, [sp, #4]
{
 800604a:	f06f 0004 	mvn.w	r0, #4
}
 800604e:	b002      	add	sp, #8
 8006050:	4770      	bx	lr

08006052 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
 8006052:	4603      	mov	r3, r0
 8006054:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8006056:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8006058:	7919      	ldrb	r1, [r3, #4]
 800605a:	2301      	movs	r3, #1
 800605c:	fa03 f101 	lsl.w	r1, r3, r1
 8006060:	6903      	ldr	r3, [r0, #16]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8006066:	bf18      	it	ne
 8006068:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 800606c:	b112      	cbz	r2, 8006074 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
 800606e:	6883      	ldr	r3, [r0, #8]
 8006070:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8006072:	4718      	bx	r3
 8006074:	6883      	ldr	r3, [r0, #8]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	e7fb      	b.n	8006072 <gpio_pin_set_dt.isra.0+0x20>

0800607a <_spi_context_cs_control>:
{
 800607a:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800607c:	6803      	ldr	r3, [r0, #0]
{
 800607e:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8006080:	b1e3      	cbz	r3, 80060bc <_spi_context_cs_control+0x42>
 8006082:	6898      	ldr	r0, [r3, #8]
 8006084:	b1d0      	cbz	r0, 80060bc <_spi_context_cs_control+0x42>
 8006086:	6805      	ldr	r5, [r0, #0]
 8006088:	b1c5      	cbz	r5, 80060bc <_spi_context_cs_control+0x42>
		if (on) {
 800608a:	b149      	cbz	r1, 80060a0 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
 800608c:	2101      	movs	r1, #1
 800608e:	f7ff ffe0 	bl	8006052 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	6898      	ldr	r0, [r3, #8]
}
 8006098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 800609c:	f7ff ba48 	b.w	8005530 <z_impl_k_busy_wait>
			if (!force_off &&
 80060a0:	b912      	cbnz	r2, 80060a8 <_spi_context_cs_control+0x2e>
 80060a2:	889b      	ldrh	r3, [r3, #4]
 80060a4:	04db      	lsls	r3, r3, #19
 80060a6:	d409      	bmi.n	80060bc <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
 80060a8:	6880      	ldr	r0, [r0, #8]
 80060aa:	f7ff fa41 	bl	8005530 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	2100      	movs	r1, #0
 80060b2:	6898      	ldr	r0, [r3, #8]
}
 80060b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80060b8:	f7ff bfcb 	b.w	8006052 <gpio_pin_set_dt.isra.0>
}
 80060bc:	bd38      	pop	{r3, r4, r5, pc}

080060be <spi_context_unlock_unconditionally>:
{
 80060be:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 80060c0:	2201      	movs	r2, #1
 80060c2:	2100      	movs	r1, #0
{
 80060c4:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 80060c6:	f7ff ffd8 	bl	800607a <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
 80060ca:	69a3      	ldr	r3, [r4, #24]
 80060cc:	b933      	cbnz	r3, 80060dc <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 80060ce:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 80060d0:	f104 0010 	add.w	r0, r4, #16
}
 80060d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d8:	f7fe bc0e 	b.w	80048f8 <z_impl_k_sem_give>
 80060dc:	bd10      	pop	{r4, pc}

080060de <spi_stm32_release>:
{
 80060de:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 80060e0:	6900      	ldr	r0, [r0, #16]
 80060e2:	f7ff ffec 	bl	80060be <spi_context_unlock_unconditionally>
}
 80060e6:	2000      	movs	r0, #0
 80060e8:	bd08      	pop	{r3, pc}

080060ea <spi_stm32_complete>:
{
 80060ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SPI_TypeDef *spi = cfg->spi;
 80060ec:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 80060ee:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 80060f0:	681c      	ldr	r4, [r3, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80060f2:	6863      	ldr	r3, [r4, #4]
 80060f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f8:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006100:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8006102:	6863      	ldr	r3, [r4, #4]
 8006104:	f023 0320 	bic.w	r3, r3, #32
 8006108:	6063      	str	r3, [r4, #4]
	_spi_context_cs_control(ctx, on, false);
 800610a:	2200      	movs	r2, #0
 800610c:	6900      	ldr	r0, [r0, #16]
{
 800610e:	460d      	mov	r5, r1
 8006110:	4611      	mov	r1, r2
 8006112:	f7ff ffb2 	bl	800607a <_spi_context_cs_control>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800611c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006120:	d102      	bne.n	8006128 <spi_stm32_complete+0x3e>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8006122:	68a3      	ldr	r3, [r4, #8]
 8006124:	061a      	lsls	r2, r3, #24
 8006126:	d4fc      	bmi.n	8006122 <spi_stm32_complete+0x38>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8006128:	68a3      	ldr	r3, [r4, #8]
 800612a:	069b      	lsls	r3, r3, #26
 800612c:	d506      	bpl.n	800613c <spi_stm32_complete+0x52>
  tmpreg_sr = SPIx->SR;
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 8006132:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613a:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006142:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 8006144:	6335      	str	r5, [r6, #48]	; 0x30
 8006146:	f106 0020 	add.w	r0, r6, #32
}
 800614a:	b002      	add	sp, #8
 800614c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006150:	f7fe bbd2 	b.w	80048f8 <z_impl_k_sem_give>

08006154 <spi_stm32_isr>:
{
 8006154:	b570      	push	{r4, r5, r6, lr}
	SPI_TypeDef *spi = cfg->spi;
 8006156:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8006158:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800615a:	681d      	ldr	r5, [r3, #0]
{
 800615c:	4606      	mov	r6, r0
	err = spi_stm32_get_err(spi);
 800615e:	4628      	mov	r0, r5
 8006160:	f7ff ff64 	bl	800602c <spi_stm32_get_err>
	if (err) {
 8006164:	4601      	mov	r1, r0
 8006166:	b120      	cbz	r0, 8006172 <spi_stm32_isr+0x1e>
		spi_stm32_complete(dev, err);
 8006168:	4630      	mov	r0, r6
}
 800616a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		spi_stm32_complete(dev, err);
 800616e:	f7ff bfbc 	b.w	80060ea <spi_stm32_complete>
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 8006172:	6ca1      	ldr	r1, [r4, #72]	; 0x48
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8006174:	b919      	cbnz	r1, 800617e <spi_stm32_isr+0x2a>
 8006176:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006178:	b90b      	cbnz	r3, 800617e <spi_stm32_isr+0x2a>
{
 800617a:	2100      	movs	r1, #0
 800617c:	e7f4      	b.n	8006168 <spi_stm32_isr+0x14>
	uint16_t operation = data->ctx.config->operation;
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8006182:	f013 0201 	ands.w	r2, r3, #1
 8006186:	f040 8086 	bne.w	8006296 <spi_stm32_isr+0x142>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800618a:	68a8      	ldr	r0, [r5, #8]
 800618c:	0780      	lsls	r0, r0, #30
 800618e:	d5fc      	bpl.n	800618a <spi_stm32_isr+0x36>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8006190:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8006194:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8006196:	6c60      	ldr	r0, [r4, #68]	; 0x44
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8006198:	d153      	bne.n	8006242 <spi_stm32_isr+0xee>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 800619a:	b108      	cbz	r0, 80061a0 <spi_stm32_isr+0x4c>
 800619c:	b101      	cbz	r1, 80061a0 <spi_stm32_isr+0x4c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800619e:	7802      	ldrb	r2, [r0, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 80061a0:	b2d2      	uxtb	r2, r2
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 80061a2:	732a      	strb	r2, [r5, #12]
	if (!ctx->tx_len) {
 80061a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80061a6:	b19b      	cbz	r3, 80061d0 <spi_stm32_isr+0x7c>
	ctx->tx_len -= len;
 80061a8:	3b01      	subs	r3, #1
 80061aa:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d142      	bne.n	8006236 <spi_stm32_isr+0xe2>
		++ctx->current_tx;
 80061b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061b2:	3308      	adds	r3, #8
 80061b4:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 80061b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061b8:	3b01      	subs	r3, #1
 80061ba:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 80061bc:	2301      	movs	r3, #1
 80061be:	f104 0248 	add.w	r2, r4, #72	; 0x48
 80061c2:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80061c6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80061ca:	f7ff ff0e 	bl	8005fea <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 80061ce:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80061d0:	68ab      	ldr	r3, [r5, #8]
 80061d2:	07d9      	lsls	r1, r3, #31
 80061d4:	d5fc      	bpl.n	80061d0 <spi_stm32_isr+0x7c>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80061d6:	6822      	ldr	r2, [r4, #0]
 80061d8:	8892      	ldrh	r2, [r2, #4]
 80061da:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80061de:	2a08      	cmp	r2, #8
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 80061e0:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
 80061e4:	d144      	bne.n	8006270 <spi_stm32_isr+0x11c>
  return (*((__IO uint8_t *)&SPIx->DR));
 80061e6:	7b2a      	ldrb	r2, [r5, #12]
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	b10b      	cbz	r3, 80061f0 <spi_stm32_isr+0x9c>
 80061ec:	b101      	cbz	r1, 80061f0 <spi_stm32_isr+0x9c>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 80061ee:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 80061f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80061f2:	b1a3      	cbz	r3, 800621e <spi_stm32_isr+0xca>
	ctx->rx_len -= len;
 80061f4:	3b01      	subs	r3, #1
 80061f6:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f040 809e 	bne.w	800633a <spi_stm32_isr+0x1e6>
		++ctx->current_rx;
 80061fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006200:	3308      	adds	r3, #8
 8006202:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 8006204:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006206:	3b01      	subs	r3, #1
 8006208:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 800620a:	2301      	movs	r3, #1
 800620c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006210:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8006214:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8006218:	f7ff fee7 	bl	8005fea <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
 800621c:	64e0      	str	r0, [r4, #76]	; 0x4c
	return spi_stm32_get_err(spi);
 800621e:	4628      	mov	r0, r5
 8006220:	f7ff ff04 	bl	800602c <spi_stm32_get_err>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 8006224:	4601      	mov	r1, r0
 8006226:	2800      	cmp	r0, #0
 8006228:	d19e      	bne.n	8006168 <spi_stm32_isr+0x14>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800622a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800622c:	b913      	cbnz	r3, 8006234 <spi_stm32_isr+0xe0>
 800622e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0a2      	beq.n	800617a <spi_stm32_isr+0x26>
}
 8006234:	bd70      	pop	{r4, r5, r6, pc}
	} else if (ctx->tx_buf) {
 8006236:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0c9      	beq.n	80061d0 <spi_stm32_isr+0x7c>
		ctx->tx_buf += dfs * len;
 800623c:	3301      	adds	r3, #1
 800623e:	6463      	str	r3, [r4, #68]	; 0x44
 8006240:	e7c6      	b.n	80061d0 <spi_stm32_isr+0x7c>
	return !!(ctx->tx_buf && ctx->tx_len);
 8006242:	b108      	cbz	r0, 8006248 <spi_stm32_isr+0xf4>
 8006244:	b101      	cbz	r1, 8006248 <spi_stm32_isr+0xf4>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8006246:	8802      	ldrh	r2, [r0, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8006248:	81aa      	strh	r2, [r5, #12]
	if (!ctx->tx_len) {
 800624a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0bf      	beq.n	80061d0 <spi_stm32_isr+0x7c>
	ctx->tx_len -= len;
 8006250:	3b01      	subs	r3, #1
 8006252:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8006254:	b93b      	cbnz	r3, 8006266 <spi_stm32_isr+0x112>
		++ctx->current_tx;
 8006256:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006258:	3308      	adds	r3, #8
 800625a:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 800625c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800625e:	3b01      	subs	r3, #1
 8006260:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8006262:	2302      	movs	r3, #2
 8006264:	e7ab      	b.n	80061be <spi_stm32_isr+0x6a>
	} else if (ctx->tx_buf) {
 8006266:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0b1      	beq.n	80061d0 <spi_stm32_isr+0x7c>
		ctx->tx_buf += dfs * len;
 800626c:	3302      	adds	r3, #2
 800626e:	e7e6      	b.n	800623e <spi_stm32_isr+0xea>
  return (uint16_t)(READ_REG(SPIx->DR));
 8006270:	68ea      	ldr	r2, [r5, #12]
	return !!(ctx->rx_buf && ctx->rx_len);
 8006272:	b10b      	cbz	r3, 8006278 <spi_stm32_isr+0x124>
 8006274:	b101      	cbz	r1, 8006278 <spi_stm32_isr+0x124>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8006276:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8006278:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0cf      	beq.n	800621e <spi_stm32_isr+0xca>
	ctx->rx_len -= len;
 800627e:	3b01      	subs	r3, #1
 8006280:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
 8006282:	2b00      	cmp	r3, #0
 8006284:	d162      	bne.n	800634c <spi_stm32_isr+0x1f8>
		++ctx->current_rx;
 8006286:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006288:	3308      	adds	r3, #8
 800628a:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
 800628c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800628e:	3b01      	subs	r3, #1
 8006290:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
 8006292:	2302      	movs	r3, #2
 8006294:	e7ba      	b.n	800620c <spi_stm32_isr+0xb8>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8006296:	68aa      	ldr	r2, [r5, #8]
 8006298:	0792      	lsls	r2, r2, #30
 800629a:	d549      	bpl.n	8006330 <spi_stm32_isr+0x1dc>
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800629c:	2900      	cmp	r1, #0
 800629e:	d047      	beq.n	8006330 <spi_stm32_isr+0x1dc>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80062a0:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80062a4:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80062a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80062a8:	d12d      	bne.n	8006306 <spi_stm32_isr+0x1b2>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80062aa:	7813      	ldrb	r3, [r2, #0]
  *spidr = TxData;
 80062ac:	732b      	strb	r3, [r5, #12]
	if (!ctx->tx_len) {
 80062ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80062b0:	b193      	cbz	r3, 80062d8 <spi_stm32_isr+0x184>
	ctx->tx_len -= len;
 80062b2:	3b01      	subs	r3, #1
 80062b4:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 80062b6:	bb03      	cbnz	r3, 80062fa <spi_stm32_isr+0x1a6>
		++ctx->current_tx;
 80062b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062ba:	3308      	adds	r3, #8
 80062bc:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 80062be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062c0:	3b01      	subs	r3, #1
 80062c2:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 80062c4:	2301      	movs	r3, #1
 80062c6:	f104 0248 	add.w	r2, r4, #72	; 0x48
 80062ca:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80062ce:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80062d2:	f7ff fe8a 	bl	8005fea <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
 80062d6:	6460      	str	r0, [r4, #68]	; 0x44
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80062d8:	68ab      	ldr	r3, [r5, #8]
 80062da:	07db      	lsls	r3, r3, #31
 80062dc:	d59f      	bpl.n	800621e <spi_stm32_isr+0xca>
	return !!(ctx->rx_buf && ctx->rx_len);
 80062de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d09c      	beq.n	800621e <spi_stm32_isr+0xca>
 80062e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80062e6:	2a00      	cmp	r2, #0
 80062e8:	d099      	beq.n	800621e <spi_stm32_isr+0xca>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	8892      	ldrh	r2, [r2, #4]
 80062ee:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80062f2:	2a08      	cmp	r2, #8
 80062f4:	d128      	bne.n	8006348 <spi_stm32_isr+0x1f4>
  return (*((__IO uint8_t *)&SPIx->DR));
 80062f6:	7b2a      	ldrb	r2, [r5, #12]
 80062f8:	e779      	b.n	80061ee <spi_stm32_isr+0x9a>
	} else if (ctx->tx_buf) {
 80062fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0eb      	beq.n	80062d8 <spi_stm32_isr+0x184>
		ctx->tx_buf += dfs * len;
 8006300:	3301      	adds	r3, #1
 8006302:	6463      	str	r3, [r4, #68]	; 0x44
 8006304:	e7e8      	b.n	80062d8 <spi_stm32_isr+0x184>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8006306:	8813      	ldrh	r3, [r2, #0]
  *spidr = TxData;
 8006308:	81ab      	strh	r3, [r5, #12]
	if (!ctx->tx_len) {
 800630a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0e3      	beq.n	80062d8 <spi_stm32_isr+0x184>
	ctx->tx_len -= len;
 8006310:	3b01      	subs	r3, #1
 8006312:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
 8006314:	b93b      	cbnz	r3, 8006326 <spi_stm32_isr+0x1d2>
		++ctx->current_tx;
 8006316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006318:	3308      	adds	r3, #8
 800631a:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
 800631c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800631e:	3b01      	subs	r3, #1
 8006320:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
 8006322:	2302      	movs	r3, #2
 8006324:	e7cf      	b.n	80062c6 <spi_stm32_isr+0x172>
	} else if (ctx->tx_buf) {
 8006326:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0d5      	beq.n	80062d8 <spi_stm32_isr+0x184>
		ctx->tx_buf += dfs * len;
 800632c:	3302      	adds	r3, #2
 800632e:	e7e8      	b.n	8006302 <spi_stm32_isr+0x1ae>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8006330:	686b      	ldr	r3, [r5, #4]
 8006332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006336:	606b      	str	r3, [r5, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32h7_spi)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif /* st_stm32h7_spi */
}
 8006338:	e7ce      	b.n	80062d8 <spi_stm32_isr+0x184>
	} else if (ctx->rx_buf) {
 800633a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800633c:	2b00      	cmp	r3, #0
 800633e:	f43f af6e 	beq.w	800621e <spi_stm32_isr+0xca>
		ctx->rx_buf += dfs * len;
 8006342:	3301      	adds	r3, #1
 8006344:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006346:	e76a      	b.n	800621e <spi_stm32_isr+0xca>
  return (uint16_t)(READ_REG(SPIx->DR));
 8006348:	68ea      	ldr	r2, [r5, #12]
 800634a:	e794      	b.n	8006276 <spi_stm32_isr+0x122>
	} else if (ctx->rx_buf) {
 800634c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800634e:	2b00      	cmp	r3, #0
 8006350:	f43f af65 	beq.w	800621e <spi_stm32_isr+0xca>
		ctx->rx_buf += dfs * len;
 8006354:	3302      	adds	r3, #2
 8006356:	e7f5      	b.n	8006344 <spi_stm32_isr+0x1f0>

08006358 <LL_USART_ClearFlag_FE>:
{
 8006358:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 800635a:	6803      	ldr	r3, [r0, #0]
 800635c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800635e:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8006360:	6843      	ldr	r3, [r0, #4]
 8006362:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8006364:	9b01      	ldr	r3, [sp, #4]
}
 8006366:	b002      	add	sp, #8
 8006368:	4770      	bx	lr

0800636a <uart_stm32_poll_in>:
{
 800636a:	b508      	push	{r3, lr}
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800636c:	6843      	ldr	r3, [r0, #4]
 800636e:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8006370:	6803      	ldr	r3, [r0, #0]
 8006372:	071a      	lsls	r2, r3, #28
 8006374:	d501      	bpl.n	800637a <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(config->usart);
 8006376:	f7ff ffef 	bl	8006358 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800637a:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(config->usart)) {
 800637c:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800637e:	bf43      	ittte	mi
 8006380:	6843      	ldrmi	r3, [r0, #4]
 8006382:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8006384:	2000      	movmi	r0, #0
		return -1;
 8006386:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 800638a:	bd08      	pop	{r3, pc}

0800638c <uart_stm32_poll_out>:
{
 800638c:	b510      	push	{r4, lr}
	const struct uart_stm32_config *config = dev->config;
 800638e:	6840      	ldr	r0, [r0, #4]
		if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 8006390:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8006392:	6813      	ldr	r3, [r2, #0]
 8006394:	061b      	lsls	r3, r3, #24
 8006396:	d5fc      	bpl.n	8006392 <uart_stm32_poll_out+0x6>
	__asm__ volatile(
 8006398:	f04f 0210 	mov.w	r2, #16
 800639c:	f3ef 8311 	mrs	r3, BASEPRI
 80063a0:	f382 8812 	msr	BASEPRI_MAX, r2
 80063a4:	f3bf 8f6f 	isb	sy
			if (LL_USART_IsActiveFlag_TXE(config->usart)) {
 80063a8:	6802      	ldr	r2, [r0, #0]
 80063aa:	6814      	ldr	r4, [r2, #0]
 80063ac:	0624      	lsls	r4, r4, #24
 80063ae:	d404      	bmi.n	80063ba <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80063b8:	e7ea      	b.n	8006390 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80063ba:	6051      	str	r1, [r2, #4]
	__asm__ volatile(
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
}
 80063c4:	bd10      	pop	{r4, pc}

080063c6 <uart_stm32_err_check>:
{
 80063c6:	b508      	push	{r3, lr}
	const struct uart_stm32_config *config = dev->config;
 80063c8:	6841      	ldr	r1, [r0, #4]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80063ca:	680b      	ldr	r3, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80063cc:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 80063ce:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_PE(config->usart)) {
 80063d0:	07c0      	lsls	r0, r0, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80063d2:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 80063d4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 80063d8:	bf48      	it	mi
 80063da:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(config->usart)) {
 80063de:	0780      	lsls	r0, r0, #30
  return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
 80063e0:	6818      	ldr	r0, [r3, #0]
		err |= UART_ERROR_FRAMING;
 80063e2:	bf48      	it	mi
 80063e4:	f042 0204 	orrmi.w	r2, r2, #4
	if (LL_USART_IsActiveFlag_LBD(config->usart)) {
 80063e8:	05c0      	lsls	r0, r0, #23
  WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
 80063ea:	bf42      	ittt	mi
 80063ec:	f46f 7080 	mvnmi.w	r0, #256	; 0x100
		err |= UART_BREAK;
 80063f0:	f042 0208 	orrmi.w	r2, r2, #8
 80063f4:	6018      	strmi	r0, [r3, #0]
	if (err & UART_ERROR_OVERRUN) {
 80063f6:	07d3      	lsls	r3, r2, #31
		LL_USART_ClearFlag_ORE(config->usart);
 80063f8:	6808      	ldr	r0, [r1, #0]
	if (err & UART_ERROR_OVERRUN) {
 80063fa:	d501      	bpl.n	8006400 <uart_stm32_err_check+0x3a>
		LL_USART_ClearFlag_ORE(config->usart);
 80063fc:	f7ff ffac 	bl	8006358 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8006400:	0791      	lsls	r1, r2, #30
 8006402:	d501      	bpl.n	8006408 <uart_stm32_err_check+0x42>
		LL_USART_ClearFlag_PE(config->usart);
 8006404:	f7ff ffa8 	bl	8006358 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8006408:	0753      	lsls	r3, r2, #29
 800640a:	d501      	bpl.n	8006410 <uart_stm32_err_check+0x4a>
		LL_USART_ClearFlag_FE(config->usart);
 800640c:	f7ff ffa4 	bl	8006358 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(config->usart);
 8006410:	f7ff ffa2 	bl	8006358 <LL_USART_ClearFlag_FE>
}
 8006414:	4610      	mov	r0, r2
 8006416:	bd08      	pop	{r3, pc}

08006418 <uart_stm32_fifo_fill>:
{
 8006418:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_stm32_config *config = dev->config;
 800641a:	6846      	ldr	r6, [r0, #4]
	if (!LL_USART_IsActiveFlag_TXE(config->usart)) {
 800641c:	6833      	ldr	r3, [r6, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006424:	d010      	beq.n	8006448 <uart_stm32_fifo_fill+0x30>
	__asm__ volatile(
 8006426:	f04f 0310 	mov.w	r3, #16
 800642a:	f3ef 8711 	mrs	r7, BASEPRI
 800642e:	f383 8812 	msr	BASEPRI_MAX, r3
 8006432:	f3bf 8f6f 	isb	sy
	while ((size - num_tx > 0) &&
 8006436:	2300      	movs	r3, #0
 8006438:	b2dc      	uxtb	r4, r3
 800643a:	42a2      	cmp	r2, r4
 800643c:	4620      	mov	r0, r4
 800643e:	dc04      	bgt.n	800644a <uart_stm32_fifo_fill+0x32>
	__asm__ volatile(
 8006440:	f387 8811 	msr	BASEPRI, r7
 8006444:	f3bf 8f6f 	isb	sy
}
 8006448:	bdf0      	pop	{r4, r5, r6, r7, pc}
	       LL_USART_IsActiveFlag_TXE(config->usart)) {
 800644a:	6835      	ldr	r5, [r6, #0]
 800644c:	f8d5 c000 	ldr.w	ip, [r5]
	while ((size - num_tx > 0) &&
 8006450:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006454:	f103 0301 	add.w	r3, r3, #1
 8006458:	d0f2      	beq.n	8006440 <uart_stm32_fifo_fill+0x28>
  USARTx->DR = Value;
 800645a:	5d08      	ldrb	r0, [r1, r4]
 800645c:	6068      	str	r0, [r5, #4]
}
 800645e:	e7eb      	b.n	8006438 <uart_stm32_fifo_fill+0x20>

08006460 <uart_stm32_fifo_read>:
{
 8006460:	b570      	push	{r4, r5, r6, lr}
	const struct uart_stm32_config *config = dev->config;
 8006462:	6845      	ldr	r5, [r0, #4]
	while ((size - num_rx > 0) &&
 8006464:	2400      	movs	r4, #0
 8006466:	b2e0      	uxtb	r0, r4
 8006468:	4282      	cmp	r2, r0
 800646a:	dd03      	ble.n	8006474 <uart_stm32_fifo_read+0x14>
	       LL_USART_IsActiveFlag_RXNE(config->usart)) {
 800646c:	682b      	ldr	r3, [r5, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800646e:	681e      	ldr	r6, [r3, #0]
	while ((size - num_rx > 0) &&
 8006470:	06b6      	lsls	r6, r6, #26
 8006472:	d400      	bmi.n	8006476 <uart_stm32_fifo_read+0x16>
}
 8006474:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	540b      	strb	r3, [r1, r0]
		if (LL_USART_IsActiveFlag_ORE(config->usart)) {
 800647a:	6828      	ldr	r0, [r5, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800647c:	6803      	ldr	r3, [r0, #0]
 800647e:	071b      	lsls	r3, r3, #28
 8006480:	d501      	bpl.n	8006486 <uart_stm32_fifo_read+0x26>
			LL_USART_ClearFlag_ORE(config->usart);
 8006482:	f7ff ff69 	bl	8006358 <LL_USART_ClearFlag_FE>
 8006486:	3401      	adds	r4, #1
 8006488:	e7ed      	b.n	8006466 <uart_stm32_fifo_read+0x6>

0800648a <uart_stm32_irq_tx_enable>:
	LL_USART_EnableIT_TC(config->usart);
 800648a:	6843      	ldr	r3, [r0, #4]
 800648c:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	f102 030c 	add.w	r3, r2, #12
 8006492:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8006496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	f102 000c 	add.w	r0, r2, #12
 800649e:	e840 3100 	strex	r1, r3, [r0]
 80064a2:	2900      	cmp	r1, #0
 80064a4:	d1f3      	bne.n	800648e <uart_stm32_irq_tx_enable+0x4>
}
 80064a6:	4770      	bx	lr

080064a8 <uart_stm32_irq_tx_disable>:
	LL_USART_DisableIT_TC(config->usart);
 80064a8:	6843      	ldr	r3, [r0, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	f102 030c 	add.w	r3, r2, #12
 80064b0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80064b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	f102 000c 	add.w	r0, r2, #12
 80064bc:	e840 3100 	strex	r1, r3, [r0]
 80064c0:	2900      	cmp	r1, #0
 80064c2:	d1f3      	bne.n	80064ac <uart_stm32_irq_tx_disable+0x4>
}
 80064c4:	4770      	bx	lr

080064c6 <uart_stm32_irq_tx_ready>:
	return LL_USART_IsActiveFlag_TXE(config->usart) &&
 80064c6:	6843      	ldr	r3, [r0, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80064d0:	bf1c      	itt	ne
 80064d2:	68d8      	ldrne	r0, [r3, #12]
 80064d4:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 80064d8:	4770      	bx	lr

080064da <uart_stm32_irq_tx_complete>:
	return LL_USART_IsActiveFlag_TC(config->usart);
 80064da:	6843      	ldr	r3, [r0, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80064de:	6818      	ldr	r0, [r3, #0]
}
 80064e0:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80064e4:	4770      	bx	lr

080064e6 <uart_stm32_irq_rx_enable>:
	LL_USART_EnableIT_RXNE(config->usart);
 80064e6:	6843      	ldr	r3, [r0, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	f102 030c 	add.w	r3, r2, #12
 80064ee:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80064f2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	f102 000c 	add.w	r0, r2, #12
 80064fa:	e840 3100 	strex	r1, r3, [r0]
 80064fe:	2900      	cmp	r1, #0
 8006500:	d1f3      	bne.n	80064ea <uart_stm32_irq_rx_enable+0x4>
}
 8006502:	4770      	bx	lr

08006504 <uart_stm32_irq_rx_disable>:
	LL_USART_DisableIT_RXNE(config->usart);
 8006504:	6843      	ldr	r3, [r0, #4]
 8006506:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	f102 030c 	add.w	r3, r2, #12
 800650c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006510:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	f102 000c 	add.w	r0, r2, #12
 8006518:	e840 3100 	strex	r1, r3, [r0]
 800651c:	2900      	cmp	r1, #0
 800651e:	d1f3      	bne.n	8006508 <uart_stm32_irq_rx_disable+0x4>
}
 8006520:	4770      	bx	lr

08006522 <uart_stm32_irq_rx_ready>:
	return LL_USART_IsActiveFlag_RXNE(config->usart);
 8006522:	6843      	ldr	r3, [r0, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006526:	6818      	ldr	r0, [r3, #0]
}
 8006528:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800652c:	4770      	bx	lr

0800652e <uart_stm32_irq_is_pending>:
	return ((LL_USART_IsActiveFlag_RXNE(config->usart) &&
 800652e:	6843      	ldr	r3, [r0, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 8006534:	0691      	lsls	r1, r2, #26
 8006536:	d502      	bpl.n	800653e <uart_stm32_irq_is_pending+0x10>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8006538:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(config->usart) &&
 800653a:	0692      	lsls	r2, r2, #26
 800653c:	d407      	bmi.n	800654e <uart_stm32_irq_is_pending+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800653e:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 8006540:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8006544:	d004      	beq.n	8006550 <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8006546:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(config->usart) &&
 8006548:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800654c:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(config->usart)) ||
 800654e:	2001      	movs	r0, #1
}
 8006550:	4770      	bx	lr

08006552 <uart_stm32_irq_update>:
}
 8006552:	2001      	movs	r0, #1
 8006554:	4770      	bx	lr

08006556 <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = dev->data;
 8006556:	6903      	ldr	r3, [r0, #16]
	data->user_data = cb_data;
 8006558:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 800655c:	4770      	bx	lr

0800655e <uart_stm32_isr>:
	struct uart_stm32_data *data = dev->data;
 800655e:	6902      	ldr	r2, [r0, #16]
	if (data->user_cb) {
 8006560:	6893      	ldr	r3, [r2, #8]
 8006562:	b10b      	cbz	r3, 8006568 <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 8006564:	68d1      	ldr	r1, [r2, #12]
 8006566:	4718      	bx	r3
}
 8006568:	4770      	bx	lr

0800656a <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_SERIAL_INIT_PRIORITY,		\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 800656a:	b508      	push	{r3, lr}
 800656c:	2200      	movs	r2, #0
 800656e:	2025      	movs	r0, #37	; 0x25
 8006570:	4611      	mov	r1, r2
 8006572:	f7fb fc37 	bl	8001de4 <z_arm_irq_priority_set>
 8006576:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800657a:	2025      	movs	r0, #37	; 0x25
 800657c:	f7fb bc10 	b.w	8001da0 <arch_irq_enable>

08006580 <uart_stm32_set_baudrate>:
{
 8006580:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (clock_control_get_rate(data->clock,
 8006582:	6903      	ldr	r3, [r0, #16]
	const struct uart_stm32_config *config = dev->config;
 8006584:	6844      	ldr	r4, [r0, #4]
		if (clock_control_get_rate(data->clock,
 8006586:	6858      	ldr	r0, [r3, #4]
	if (api->get_rate == NULL) {
 8006588:	6883      	ldr	r3, [r0, #8]
 800658a:	68db      	ldr	r3, [r3, #12]
{
 800658c:	460d      	mov	r5, r1
					   (clock_control_subsys_t)&config->pclken[0],
 800658e:	6861      	ldr	r1, [r4, #4]
 8006590:	b1f3      	cbz	r3, 80065d0 <uart_stm32_set_baudrate+0x50>
	return api->get_rate(dev, sys, rate);
 8006592:	aa01      	add	r2, sp, #4
 8006594:	4798      	blx	r3
		if (clock_control_get_rate(data->clock,
 8006596:	2800      	cmp	r0, #0
 8006598:	db1a      	blt.n	80065d0 <uart_stm32_set_baudrate+0x50>
		LL_USART_SetOverSampling(config->usart,
 800659a:	6822      	ldr	r2, [r4, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800659c:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800659e:	68d3      	ldr	r3, [r2, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80065a0:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80065a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065a6:	60d3      	str	r3, [r2, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80065a8:	fba0 0101 	umull	r0, r1, r0, r1
 80065ac:	00aa      	lsls	r2, r5, #2
 80065ae:	0fab      	lsrs	r3, r5, #30
 80065b0:	f7f9 fdf0 	bl	8000194 <__aeabi_uldivmod>
 80065b4:	2264      	movs	r2, #100	; 0x64
 80065b6:	fbb0 f1f2 	udiv	r1, r0, r2
 80065ba:	fb02 0311 	mls	r3, r2, r1, r0
 80065be:	011b      	lsls	r3, r3, #4
		LL_USART_SetBaudRate(config->usart,
 80065c0:	6824      	ldr	r4, [r4, #0]
 80065c2:	3332      	adds	r3, #50	; 0x32
 80065c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	60a3      	str	r3, [r4, #8]
}
 80065d0:	b003      	add	sp, #12
 80065d2:	bd30      	pop	{r4, r5, pc}

080065d4 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 80065d4:	6903      	ldr	r3, [r0, #16]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	600b      	str	r3, [r1, #0]
	return LL_USART_GetParity(config->usart);
 80065da:	6843      	ldr	r3, [r0, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80065e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e8:	d02f      	beq.n	800664a <uart_stm32_config_get+0x76>
 80065ea:	f5a3 6cc0 	sub.w	ip, r3, #1536	; 0x600
 80065ee:	f1dc 0300 	rsbs	r3, ip, #0
 80065f2:	eb43 030c 	adc.w	r3, r3, ip
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 80065f6:	710b      	strb	r3, [r1, #4]
	return LL_USART_GetStopBitsLength(config->usart);
 80065f8:	6843      	ldr	r3, [r0, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006606:	d022      	beq.n	800664e <uart_stm32_config_get+0x7a>
 8006608:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800660c:	d021      	beq.n	8006652 <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 800660e:	2b00      	cmp	r3, #0
 8006610:	bf0c      	ite	eq
 8006612:	2301      	moveq	r3, #1
 8006614:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8006616:	714b      	strb	r3, [r1, #5]
	return LL_USART_GetDataWidth(config->usart);
 8006618:	6843      	ldr	r3, [r0, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800661c:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800661e:	68db      	ldr	r3, [r3, #12]
	switch (db) {
 8006620:	04d2      	lsls	r2, r2, #19
 8006622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006626:	d516      	bpl.n	8006656 <uart_stm32_config_get+0x82>
			return UART_CFG_DATA_BITS_9;
 8006628:	2b00      	cmp	r3, #0
 800662a:	bf14      	ite	ne
 800662c:	2303      	movne	r3, #3
 800662e:	2304      	moveq	r3, #4
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8006630:	718b      	strb	r3, [r1, #6]
	return LL_USART_GetHWFlowCtrl(config->usart);
 8006632:	6843      	ldr	r3, [r0, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800663c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8006640:	4253      	negs	r3, r2
 8006642:	4153      	adcs	r3, r2
 8006644:	71cb      	strb	r3, [r1, #7]
}
 8006646:	2000      	movs	r0, #0
 8006648:	4770      	bx	lr
	switch (parity) {
 800664a:	2302      	movs	r3, #2
 800664c:	e7d3      	b.n	80065f6 <uart_stm32_config_get+0x22>
		return UART_CFG_STOP_BITS_0_5;
 800664e:	2300      	movs	r3, #0
 8006650:	e7e1      	b.n	8006616 <uart_stm32_config_get+0x42>
		return UART_CFG_STOP_BITS_1_5;
 8006652:	2302      	movs	r3, #2
 8006654:	e7df      	b.n	8006616 <uart_stm32_config_get+0x42>
			return UART_CFG_DATA_BITS_8;
 8006656:	2b00      	cmp	r3, #0
 8006658:	bf14      	ite	ne
 800665a:	2302      	movne	r3, #2
 800665c:	2303      	moveq	r3, #3
 800665e:	e7e7      	b.n	8006630 <uart_stm32_config_get+0x5c>

08006660 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8006660:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
 8006662:	6803      	ldr	r3, [r0, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8006664:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
 8006668:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800666a:	7905      	ldrb	r5, [r0, #4]
 800666c:	6804      	ldr	r4, [r0, #0]
 800666e:	4435      	add	r5, r6
 8006670:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006674:	42a3      	cmp	r3, r4
 8006676:	d902      	bls.n	800667e <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
 8006678:	f06f 0001 	mvn.w	r0, #1
}
 800667c:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
 800667e:	795c      	ldrb	r4, [r3, #5]
 8006680:	428c      	cmp	r4, r1
 8006682:	d001      	beq.n	8006688 <pinctrl_lookup_state+0x28>
		(*state)++;
 8006684:	3308      	adds	r3, #8
 8006686:	e7ef      	b.n	8006668 <pinctrl_lookup_state+0x8>
			return 0;
 8006688:	2000      	movs	r0, #0
 800668a:	e7f7      	b.n	800667c <pinctrl_lookup_state+0x1c>

0800668c <HAL_PCD_MspInit>:
}
 800668c:	4770      	bx	lr

0800668e <HAL_PCD_Init>:
{
 800668e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hpcd == NULL)
 8006690:	4604      	mov	r4, r0
{
 8006692:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8006694:	b360      	cbz	r0, 80066f0 <HAL_PCD_Init+0x62>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006696:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 800669a:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800669c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80066a0:	b91b      	cbnz	r3, 80066aa <HAL_PCD_Init+0x1c>
    hpcd->Lock = HAL_UNLOCKED;
 80066a2:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 80066a6:	f7ff fff1 	bl	800668c <HAL_PCD_MspInit>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80066aa:	2303      	movs	r3, #3
 80066ac:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80066b0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 80066b2:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80066b4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 80066b8:	bf08      	it	eq
 80066ba:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80066bc:	f855 0b10 	ldr.w	r0, [r5], #16
 80066c0:	f000 fa5d 	bl	8006b7e <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066c6:	466e      	mov	r6, sp
 80066c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80066ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80066ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80066d2:	e886 0003 	stmia.w	r6, {r0, r1}
 80066d6:	4625      	mov	r5, r4
 80066d8:	1d27      	adds	r7, r4, #4
 80066da:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80066de:	f855 0b10 	ldr.w	r0, [r5], #16
 80066e2:	f000 fa06 	bl	8006af2 <USB_CoreInit>
 80066e6:	4606      	mov	r6, r0
 80066e8:	b130      	cbz	r0, 80066f8 <HAL_PCD_Init+0x6a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066ea:	2302      	movs	r3, #2
 80066ec:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 80066f0:	2501      	movs	r5, #1
}
 80066f2:	4628      	mov	r0, r5
 80066f4:	b00b      	add	sp, #44	; 0x2c
 80066f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80066f8:	4601      	mov	r1, r0
 80066fa:	6820      	ldr	r0, [r4, #0]
 80066fc:	f000 fa45 	bl	8006b8a <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006700:	4631      	mov	r1, r6
 8006702:	f8d4 c004 	ldr.w	ip, [r4, #4]
    hpcd->IN_ep[i].is_in = 1U;
 8006706:	2624      	movs	r6, #36	; 0x24
 8006708:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800670c:	4608      	mov	r0, r1
 800670e:	b2ca      	uxtb	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006710:	4594      	cmp	ip, r2
 8006712:	f101 0101 	add.w	r1, r1, #1
 8006716:	d821      	bhi.n	800675c <HAL_PCD_Init+0xce>
 8006718:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 800671a:	2624      	movs	r6, #36	; 0x24
 800671c:	460a      	mov	r2, r1
 800671e:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006720:	4584      	cmp	ip, r0
 8006722:	f101 0101 	add.w	r1, r1, #1
 8006726:	d827      	bhi.n	8006778 <HAL_PCD_Init+0xea>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800672a:	466e      	mov	r6, sp
 800672c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800672e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006730:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006732:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006736:	e886 0003 	stmia.w	r6, {r0, r1}
 800673a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800673e:	6820      	ldr	r0, [r4, #0]
 8006740:	f7fd fbb4 	bl	8003eac <USB_DevInit>
 8006744:	4605      	mov	r5, r0
 8006746:	2800      	cmp	r0, #0
 8006748:	d1cf      	bne.n	80066ea <HAL_PCD_Init+0x5c>
  hpcd->State = HAL_PCD_STATE_READY;
 800674a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800674c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 8006750:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8006752:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8006756:	f000 fb8c 	bl	8006e72 <USB_DevDisconnect>
  return HAL_OK;
 800675a:	e7ca      	b.n	80066f2 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].is_in = 1U;
 800675c:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006760:	e9c3 0012 	strd	r0, r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].is_in = 1U;
 8006764:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800676c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006770:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8006774:	6558      	str	r0, [r3, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006776:	e7ca      	b.n	800670e <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8006778:	fb06 4300 	mla	r3, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800677c:	e9c3 22a2 	strd	r2, r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].is_in = 0U;
 8006780:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8006784:	f883 027c 	strb.w	r0, [r3, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006788:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 800678c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006790:	e7c5      	b.n	800671e <HAL_PCD_Init+0x90>

08006792 <HAL_PCD_Start>:
{
 8006792:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8006794:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006798:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 800679a:	2b01      	cmp	r3, #1
{
 800679c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800679e:	d016      	beq.n	80067ce <HAL_PCD_Start+0x3c>
 80067a0:	2301      	movs	r3, #1
 80067a2:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80067a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d106      	bne.n	80067ba <HAL_PCD_Start+0x28>
 80067ac:	6983      	ldr	r3, [r0, #24]
 80067ae:	2b01      	cmp	r3, #1
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067b0:	bf1e      	ittt	ne
 80067b2:	6b93      	ldrne	r3, [r2, #56]	; 0x38
 80067b4:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 80067b8:	6393      	strne	r3, [r2, #56]	; 0x38
  __HAL_PCD_ENABLE(hpcd);
 80067ba:	6820      	ldr	r0, [r4, #0]
 80067bc:	f000 f9d9 	bl	8006b72 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	f000 fb48 	bl	8006e56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80067c6:	2000      	movs	r0, #0
 80067c8:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 80067cc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80067ce:	2002      	movs	r0, #2
 80067d0:	e7fc      	b.n	80067cc <HAL_PCD_Start+0x3a>

080067d2 <HAL_PCD_Stop>:
{
 80067d2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80067d4:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
 80067d8:	2b01      	cmp	r3, #1
{
 80067da:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80067dc:	d01b      	beq.n	8006816 <HAL_PCD_Stop+0x44>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067de:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hpcd);
 80067e0:	2301      	movs	r3, #1
 80067e2:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 80067e6:	4628      	mov	r0, r5
 80067e8:	f000 f9c9 	bl	8006b7e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	f000 fb40 	bl	8006e72 <USB_DevDisconnect>
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80067f2:	6820      	ldr	r0, [r4, #0]
 80067f4:	2110      	movs	r1, #16
 80067f6:	f7fd fb0f 	bl	8003e18 <USB_FlushTxFifo>
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80067fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d106      	bne.n	800680e <HAL_PCD_Stop+0x3c>
 8006800:	69a3      	ldr	r3, [r4, #24]
 8006802:	2b01      	cmp	r3, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006804:	bf1e      	ittt	ne
 8006806:	6bab      	ldrne	r3, [r5, #56]	; 0x38
 8006808:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
 800680c:	63ab      	strne	r3, [r5, #56]	; 0x38
  __HAL_UNLOCK(hpcd);
 800680e:	2000      	movs	r0, #0
 8006810:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8006814:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8006816:	2002      	movs	r0, #2
 8006818:	e7fc      	b.n	8006814 <HAL_PCD_Stop+0x42>

0800681a <HAL_PCD_SOFCallback>:
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
 800681a:	4770      	bx	lr

0800681c <HAL_PCD_ISOOUTIncompleteCallback>:
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 800681c:	4770      	bx	lr

0800681e <HAL_PCD_ISOINIncompleteCallback>:
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 800681e:	4770      	bx	lr

08006820 <HAL_PCD_SetAddress>:
{
 8006820:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8006822:	f890 24bc 	ldrb.w	r2, [r0, #1212]	; 0x4bc
 8006826:	2a01      	cmp	r2, #1
{
 8006828:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800682a:	d00b      	beq.n	8006844 <HAL_PCD_SetAddress+0x24>
 800682c:	2201      	movs	r2, #1
 800682e:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006832:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006836:	6800      	ldr	r0, [r0, #0]
 8006838:	f000 fafd 	bl	8006e36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800683c:	2000      	movs	r0, #0
 800683e:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8006842:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006844:	2002      	movs	r0, #2
 8006846:	e7fc      	b.n	8006842 <HAL_PCD_SetAddress+0x22>

08006848 <HAL_PCD_EP_Open>:
{
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	f001 060f 	and.w	r6, r1, #15
 800684e:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8006852:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8006856:	4605      	mov	r5, r0
 8006858:	ea4f 0484 	mov.w	r4, r4, lsl #2
 800685c:	f04f 0024 	mov.w	r0, #36	; 0x24
  if ((ep_addr & 0x80U) == 0x80U)
 8006860:	d01f      	beq.n	80068a2 <HAL_PCD_EP_Open+0x5a>
    ep->is_in = 1U;
 8006862:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006866:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 800686a:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800686c:	4429      	add	r1, r5
    ep->is_in = 1U;
 800686e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 8006872:	60ca      	str	r2, [r1, #12]
  if (ep->is_in != 0U)
 8006874:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006876:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 8006878:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 800687a:	b102      	cbz	r2, 800687e <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800687c:	810e      	strh	r6, [r1, #8]
  if (ep_type == EP_TYPE_BULK)
 800687e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8006880:	bf04      	itt	eq
 8006882:	2300      	moveq	r3, #0
 8006884:	714b      	strbeq	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 8006886:	f895 34bc 	ldrb.w	r3, [r5, #1212]	; 0x4bc
 800688a:	2b01      	cmp	r3, #1
 800688c:	d012      	beq.n	80068b4 <HAL_PCD_EP_Open+0x6c>
 800688e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006890:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8006892:	f885 34bc 	strb.w	r3, [r5, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006896:	f000 f9ba 	bl	8006c0e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800689a:	2000      	movs	r0, #0
 800689c:	f885 04bc 	strb.w	r0, [r5, #1212]	; 0x4bc
}
 80068a0:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80068a2:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068a6:	f504 711f 	add.w	r1, r4, #636	; 0x27c
    ep->is_in = 0U;
 80068aa:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068ac:	4429      	add	r1, r5
    ep->is_in = 0U;
 80068ae:	f880 427d 	strb.w	r4, [r0, #637]	; 0x27d
 80068b2:	e7de      	b.n	8006872 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 80068b4:	2002      	movs	r0, #2
 80068b6:	e7f3      	b.n	80068a0 <HAL_PCD_EP_Open+0x58>

080068b8 <HAL_PCD_EP_Close>:
{
 80068b8:	b510      	push	{r4, lr}
 80068ba:	4604      	mov	r4, r0
 80068bc:	f001 000f 	and.w	r0, r1, #15
 80068c0:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80068c4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80068c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80068cc:	f04f 0224 	mov.w	r2, #36	; 0x24
 80068d0:	d016      	beq.n	8006900 <HAL_PCD_EP_Close+0x48>
    ep->is_in = 1U;
 80068d2:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068d6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 80068da:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068dc:	4421      	add	r1, r4
    ep->is_in = 1U;
 80068de:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80068e2:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 80068e4:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d012      	beq.n	8006912 <HAL_PCD_EP_Close+0x5a>
 80068ec:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80068ee:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80068f0:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80068f4:	f7fd fb98 	bl	8004028 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068f8:	2000      	movs	r0, #0
 80068fa:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 80068fe:	bd10      	pop	{r4, pc}
    ep->is_in = 0U;
 8006900:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006904:	f503 711f 	add.w	r1, r3, #636	; 0x27c
    ep->is_in = 0U;
 8006908:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800690a:	4421      	add	r1, r4
    ep->is_in = 0U;
 800690c:	f882 327d 	strb.w	r3, [r2, #637]	; 0x27d
 8006910:	e7e7      	b.n	80068e2 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8006912:	2002      	movs	r0, #2
 8006914:	e7f3      	b.n	80068fe <HAL_PCD_EP_Close+0x46>

08006916 <HAL_PCD_EP_Receive>:
{
 8006916:	b538      	push	{r3, r4, r5, lr}
 8006918:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800691c:	2424      	movs	r4, #36	; 0x24
 800691e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8006922:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006926:	f501 711f 	add.w	r1, r1, #636	; 0x27c
  ep->xfer_len = len;
 800692a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  ep->xfer_count = 0U;
 800692e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8006930:	f8c4 228c 	str.w	r2, [r4, #652]	; 0x28c
  ep->xfer_count = 0U;
 8006934:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c
  ep->is_in = 0U;
 8006938:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 800693c:	f884 527c 	strb.w	r5, [r4, #636]	; 0x27c
  if (hpcd->Init.dma_enable == 1U)
 8006940:	6903      	ldr	r3, [r0, #16]
 8006942:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8006944:	bf08      	it	eq
 8006946:	f8c4 2290 	streq.w	r2, [r4, #656]	; 0x290
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800694a:	6800      	ldr	r0, [r0, #0]
 800694c:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800694e:	b91d      	cbnz	r5, 8006958 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006950:	f7fd fbca 	bl	80040e8 <USB_EP0StartXfer>
}
 8006954:	2000      	movs	r0, #0
 8006956:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006958:	f7fd fc3e 	bl	80041d8 <USB_EPStartXfer>
 800695c:	e7fa      	b.n	8006954 <HAL_PCD_EP_Receive+0x3e>

0800695e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800695e:	f001 010f 	and.w	r1, r1, #15
 8006962:	2324      	movs	r3, #36	; 0x24
 8006964:	fb03 0001 	mla	r0, r3, r1, r0
}
 8006968:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
 800696c:	4770      	bx	lr

0800696e <HAL_PCD_EP_Transmit>:
{
 800696e:	b538      	push	{r3, r4, r5, lr}
 8006970:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006974:	2424      	movs	r4, #36	; 0x24
 8006976:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800697a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800697e:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8006980:	6563      	str	r3, [r4, #84]	; 0x54
  ep->xfer_count = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	65e3      	str	r3, [r4, #92]	; 0x5c
  ep->is_in = 1U;
 8006986:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8006988:	64e2      	str	r2, [r4, #76]	; 0x4c
  ep->is_in = 1U;
 800698a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800698e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8006992:	6903      	ldr	r3, [r0, #16]
 8006994:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8006996:	bf08      	it	eq
 8006998:	6522      	streq	r2, [r4, #80]	; 0x50
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800699e:	b91d      	cbnz	r5, 80069a8 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069a0:	f7fd fba2 	bl	80040e8 <USB_EP0StartXfer>
}
 80069a4:	2000      	movs	r0, #0
 80069a6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069a8:	f7fd fc16 	bl	80041d8 <USB_EPStartXfer>
 80069ac:	e7fa      	b.n	80069a4 <HAL_PCD_EP_Transmit+0x36>

080069ae <HAL_PCD_EP_SetStall>:
{
 80069ae:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069b0:	6843      	ldr	r3, [r0, #4]
 80069b2:	f001 050f 	and.w	r5, r1, #15
 80069b6:	429d      	cmp	r5, r3
{
 80069b8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069ba:	d82c      	bhi.n	8006a16 <HAL_PCD_EP_SetStall+0x68>
  if ((0x80U & ep_addr) == 0x80U)
 80069bc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80069c0:	f04f 0024 	mov.w	r0, #36	; 0x24
 80069c4:	d01e      	beq.n	8006a04 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069c6:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 80069ca:	fb00 4005 	mla	r0, r0, r5, r4
 80069ce:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069d0:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80069d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 1U;
 80069d6:	2301      	movs	r3, #1
 80069d8:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069da:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80069dc:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d01a      	beq.n	8006a1a <HAL_PCD_EP_SetStall+0x6c>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80069e4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80069e6:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80069ea:	f000 f9d0 	bl	8006d8e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069ee:	b92d      	cbnz	r5, 80069fc <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80069f0:	7c21      	ldrb	r1, [r4, #16]
 80069f2:	6820      	ldr	r0, [r4, #0]
 80069f4:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80069f8:	f7fd fcbe 	bl	8004378 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80069fc:	2000      	movs	r0, #0
 80069fe:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8006a04:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 8006a08:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8006a0a:	f503 711f 	add.w	r1, r3, #636	; 0x27c
    ep->is_in = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f882 327d 	strb.w	r3, [r2, #637]	; 0x27d
 8006a14:	e7df      	b.n	80069d6 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8006a16:	2001      	movs	r0, #1
 8006a18:	e7f3      	b.n	8006a02 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8006a1a:	2002      	movs	r0, #2
 8006a1c:	e7f1      	b.n	8006a02 <HAL_PCD_EP_SetStall+0x54>

08006a1e <HAL_PCD_EP_ClrStall>:
{
 8006a1e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006a20:	6843      	ldr	r3, [r0, #4]
 8006a22:	f001 020f 	and.w	r2, r1, #15
 8006a26:	429a      	cmp	r2, r3
{
 8006a28:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006a2a:	d82a      	bhi.n	8006a82 <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8006a2c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8006a30:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006a34:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006a38:	f04f 0024 	mov.w	r0, #36	; 0x24
 8006a3c:	d018      	beq.n	8006a70 <HAL_PCD_EP_ClrStall+0x52>
    ep->is_in = 1U;
 8006a3e:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a42:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8006a46:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a48:	4421      	add	r1, r4
    ep->is_in = 1U;
 8006a4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 8006a4e:	2500      	movs	r5, #0
 8006a50:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a52:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8006a54:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d014      	beq.n	8006a86 <HAL_PCD_EP_ClrStall+0x68>
 8006a5c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a5e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006a60:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a64:	f000 f9be 	bl	8006de4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a68:	f884 54bc 	strb.w	r5, [r4, #1212]	; 0x4bc
  return HAL_OK;
 8006a6c:	4628      	mov	r0, r5
}
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8006a70:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a74:	f503 711f 	add.w	r1, r3, #636	; 0x27c
    ep->is_in = 0U;
 8006a78:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a7a:	4421      	add	r1, r4
    ep->is_in = 0U;
 8006a7c:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
 8006a80:	e7e5      	b.n	8006a4e <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8006a82:	2001      	movs	r0, #1
 8006a84:	e7f3      	b.n	8006a6e <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 8006a86:	2002      	movs	r0, #2
 8006a88:	e7f1      	b.n	8006a6e <HAL_PCD_EP_ClrStall+0x50>

08006a8a <HAL_PCD_EP_Abort>:
  if ((0x80U & ep_addr) == 0x80U)
 8006a8a:	f001 030f 	and.w	r3, r1, #15
 8006a8e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8006a92:	060a      	lsls	r2, r1, #24
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a94:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006a98:	bf4c      	ite	mi
 8006a9a:	f103 013c 	addmi.w	r1, r3, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a9e:	f503 711f 	addpl.w	r1, r3, #636	; 0x27c
 8006aa2:	4401      	add	r1, r0
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006aa4:	6800      	ldr	r0, [r0, #0]
 8006aa6:	f000 b8f1 	b.w	8006c8c <USB_EPStopXfer>

08006aaa <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006aaa:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006aac:	6803      	ldr	r3, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006aae:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ab0:	6a58      	ldr	r0, [r3, #36]	; 0x24
  if (fifo == 0U)
 8006ab2:	b919      	cbnz	r1, 8006abc <HAL_PCDEx_SetTxFiFo+0x12>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006ab4:	4302      	orrs	r2, r0
 8006ab6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8006ab8:	2000      	movs	r0, #0
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006abc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8006abe:	1e4e      	subs	r6, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ac0:	eb00 4014 	add.w	r0, r0, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006ac4:	2400      	movs	r4, #0
 8006ac6:	42b4      	cmp	r4, r6
 8006ac8:	d305      	bcc.n	8006ad6 <HAL_PCDEx_SetTxFiFo+0x2c>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006aca:	313f      	adds	r1, #63	; 0x3f
 8006acc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006ad0:	4302      	orrs	r2, r0
 8006ad2:	605a      	str	r2, [r3, #4]
 8006ad4:	e7f0      	b.n	8006ab8 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006ad6:	f104 0540 	add.w	r5, r4, #64	; 0x40
 8006ada:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006ade:	3401      	adds	r4, #1
 8006ae0:	686d      	ldr	r5, [r5, #4]
 8006ae2:	eb00 4015 	add.w	r0, r0, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006ae6:	e7ee      	b.n	8006ac6 <HAL_PCDEx_SetTxFiFo+0x1c>

08006ae8 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8006ae8:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8006aea:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8006aec:	6259      	str	r1, [r3, #36]	; 0x24
}
 8006aee:	4770      	bx	lr

08006af0 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006af0:	4770      	bx	lr

08006af2 <USB_CoreInit>:
{
 8006af2:	b084      	sub	sp, #16
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	ad05      	add	r5, sp, #20
 8006af8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afe:	2b01      	cmp	r3, #1
{
 8006b00:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b02:	d125      	bne.n	8006b50 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b0a:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b0c:	68c3      	ldr	r3, [r0, #12]
 8006b0e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b16:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b18:	68c3      	ldr	r3, [r0, #12]
 8006b1a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006b1e:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8006b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b22:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b24:	bf02      	ittt	eq
 8006b26:	68c3      	ldreq	r3, [r0, #12]
 8006b28:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8006b2c:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8006b2e:	f7fd f8dd 	bl	8003cec <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8006b32:	9b08      	ldr	r3, [sp, #32]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d107      	bne.n	8006b48 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b38:	68a3      	ldr	r3, [r4, #8]
 8006b3a:	f043 0306 	orr.w	r3, r3, #6
 8006b3e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b40:	68a3      	ldr	r3, [r4, #8]
 8006b42:	f043 0320 	orr.w	r3, r3, #32
 8006b46:	60a3      	str	r3, [r4, #8]
}
 8006b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b4c:	b004      	add	sp, #16
 8006b4e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b50:	68c3      	ldr	r3, [r0, #12]
 8006b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b56:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8006b58:	f7fd f8c8 	bl	8003cec <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8006b5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b5e:	b923      	cbnz	r3, 8006b6a <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b66:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b68:	e7e3      	b.n	8006b32 <USB_CoreInit+0x40>
 8006b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b70:	e7f9      	b.n	8006b66 <USB_CoreInit+0x74>

08006b72 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b72:	6883      	ldr	r3, [r0, #8]
 8006b74:	f043 0301 	orr.w	r3, r3, #1
 8006b78:	6083      	str	r3, [r0, #8]
}
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	4770      	bx	lr

08006b7e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b7e:	6883      	ldr	r3, [r0, #8]
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	6083      	str	r3, [r0, #8]
}
 8006b86:	2000      	movs	r0, #0
 8006b88:	4770      	bx	lr

08006b8a <USB_SetCurrentMode>:
{
 8006b8a:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b8c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006b8e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 8006b94:	4605      	mov	r5, r0
 8006b96:	460c      	mov	r4, r1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b98:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006b9a:	d114      	bne.n	8006bc6 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b9c:	68c3      	ldr	r3, [r0, #12]
 8006b9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ba2:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8006ba4:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	f7fe fe1a 	bl	80057e0 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8006bac:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006bae:	07d9      	lsls	r1, r3, #31
      ms++;
 8006bb0:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006bb4:	d402      	bmi.n	8006bbc <USB_SetCurrentMode+0x32>
 8006bb6:	2c32      	cmp	r4, #50	; 0x32
 8006bb8:	d1f5      	bne.n	8006ba6 <USB_SetCurrentMode+0x1c>
      ms++;
 8006bba:	2432      	movs	r4, #50	; 0x32
  if (ms == 50U)
 8006bbc:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 8006bc0:	4258      	negs	r0, r3
 8006bc2:	4158      	adcs	r0, r3
}
 8006bc4:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8006bc6:	b971      	cbnz	r1, 8006be6 <USB_SetCurrentMode+0x5c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bc8:	68c3      	ldr	r3, [r0, #12]
 8006bca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bce:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	f7fe fe05 	bl	80057e0 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8006bd6:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bd8:	07da      	lsls	r2, r3, #31
      ms++;
 8006bda:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bde:	d5ed      	bpl.n	8006bbc <USB_SetCurrentMode+0x32>
 8006be0:	2c32      	cmp	r4, #50	; 0x32
 8006be2:	d1f5      	bne.n	8006bd0 <USB_SetCurrentMode+0x46>
 8006be4:	e7e9      	b.n	8006bba <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8006be6:	2001      	movs	r0, #1
 8006be8:	e7ec      	b.n	8006bc4 <USB_SetCurrentMode+0x3a>

08006bea <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8006bea:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006bee:	4319      	orrs	r1, r3
 8006bf0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	4770      	bx	lr

08006bf8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006bf8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006bfc:	f013 0006 	ands.w	r0, r3, #6
 8006c00:	d004      	beq.n	8006c0c <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8006c02:	f013 0f02 	tst.w	r3, #2
 8006c06:	bf14      	ite	ne
 8006c08:	2002      	movne	r0, #2
 8006c0a:	200f      	moveq	r0, #15
}
 8006c0c:	4770      	bx	lr

08006c0e <USB_ActivateEndpoint>:
{
 8006c0e:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8006c10:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c12:	2201      	movs	r2, #1
 8006c14:	f004 050f 	and.w	r5, r4, #15
 8006c18:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
 8006c1a:	784d      	ldrb	r5, [r1, #1]
 8006c1c:	2d01      	cmp	r5, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c1e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c22:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
 8006c26:	d119      	bne.n	8006c5c <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c28:	69dd      	ldr	r5, [r3, #28]
 8006c2a:	432a      	orrs	r2, r5
 8006c2c:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c2e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006c32:	041a      	lsls	r2, r3, #16
 8006c34:	d410      	bmi.n	8006c58 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c36:	68ca      	ldr	r2, [r1, #12]
 8006c38:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8006c3c:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c40:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c42:	432b      	orrs	r3, r5
 8006c44:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8006c48:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8006c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c54:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006c58:	2000      	movs	r0, #0
 8006c5a:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c5c:	69dc      	ldr	r4, [r3, #28]
 8006c5e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8006c62:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c64:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006c68:	041b      	lsls	r3, r3, #16
 8006c6a:	d4f5      	bmi.n	8006c58 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c6c:	68cb      	ldr	r3, [r1, #12]
 8006c6e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8006c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c76:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8006c78:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c7a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8006c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c86:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006c8a:	e7e5      	b.n	8006c58 <USB_ActivateEndpoint+0x4a>

08006c8c <USB_EPStopXfer>:
{
 8006c8c:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t count = 0U;
 8006c8e:	2300      	movs	r3, #0
  if (ep->is_in == 1U)
 8006c90:	784a      	ldrb	r2, [r1, #1]
  __IO uint32_t count = 0U;
 8006c92:	9301      	str	r3, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c94:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006c96:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c98:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8006c9c:	d124      	bne.n	8006ce8 <USB_EPStopXfer+0x5c>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c9e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8006ca2:	581a      	ldr	r2, [r3, r0]
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	db02      	blt.n	8006cae <USB_EPStopXfer+0x22>
  HAL_StatusTypeDef ret = HAL_OK;
 8006ca8:	2000      	movs	r0, #0
}
 8006caa:	b002      	add	sp, #8
 8006cac:	bd10      	pop	{r4, pc}
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006cae:	581a      	ldr	r2, [r3, r0]
 8006cb0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006cb4:	501a      	str	r2, [r3, r0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006cb6:	780b      	ldrb	r3, [r1, #0]
 8006cb8:	2420      	movs	r4, #32
 8006cba:	fb14 0303 	smlabb	r3, r4, r3, r0
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006cc4:	601a      	str	r2, [r3, #0]
        if (count > 10000U)
 8006cc6:	f242 7210 	movw	r2, #10000	; 0x2710
        count++;
 8006cca:	9b01      	ldr	r3, [sp, #4]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8006cd0:	9b01      	ldr	r3, [sp, #4]
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d901      	bls.n	8006cda <USB_EPStopXfer+0x4e>
          ret = HAL_ERROR;
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	e7e7      	b.n	8006caa <USB_EPStopXfer+0x1e>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006cda:	780b      	ldrb	r3, [r1, #0]
 8006cdc:	fb14 0303 	smlabb	r3, r4, r3, r0
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dbf1      	blt.n	8006cca <USB_EPStopXfer+0x3e>
 8006ce6:	e7df      	b.n	8006ca8 <USB_EPStopXfer+0x1c>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ce8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8006cec:	581a      	ldr	r2, [r3, r0]
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	dada      	bge.n	8006ca8 <USB_EPStopXfer+0x1c>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006cf2:	581a      	ldr	r2, [r3, r0]
 8006cf4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006cf8:	501a      	str	r2, [r3, r0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006cfa:	780b      	ldrb	r3, [r1, #0]
 8006cfc:	2420      	movs	r4, #32
 8006cfe:	fb14 0303 	smlabb	r3, r4, r3, r0
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d08:	601a      	str	r2, [r3, #0]
        if (count > 10000U)
 8006d0a:	f242 7210 	movw	r2, #10000	; 0x2710
        count++;
 8006d0e:	9b01      	ldr	r3, [sp, #4]
 8006d10:	3301      	adds	r3, #1
 8006d12:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8006d14:	9b01      	ldr	r3, [sp, #4]
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d8dd      	bhi.n	8006cd6 <USB_EPStopXfer+0x4a>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d1a:	780b      	ldrb	r3, [r1, #0]
 8006d1c:	fb14 0303 	smlabb	r3, r4, r3, r0
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dbf3      	blt.n	8006d0e <USB_EPStopXfer+0x82>
 8006d26:	e7bf      	b.n	8006ca8 <USB_EPStopXfer+0x1c>

08006d28 <USB_WritePacket>:
{
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8006d2e:	b944      	cbnz	r4, 8006d42 <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d30:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d32:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d34:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d36:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8006d3a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8006d3e:	428b      	cmp	r3, r1
 8006d40:	d101      	bne.n	8006d46 <USB_WritePacket+0x1e>
}
 8006d42:	2000      	movs	r0, #0
 8006d44:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d46:	f851 2b04 	ldr.w	r2, [r1], #4
 8006d4a:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8006d4c:	e7f7      	b.n	8006d3e <USB_WritePacket+0x16>

08006d4e <USB_ReadPacket>:
{
 8006d4e:	4603      	mov	r3, r0
 8006d50:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8006d52:	2000      	movs	r0, #0
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d54:	0894      	lsrs	r4, r2, #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d56:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
  uint16_t remaining_bytes = len % 4U;
 8006d5a:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8006d5e:	42a0      	cmp	r0, r4
 8006d60:	d310      	bcc.n	8006d84 <USB_ReadPacket+0x36>
 8006d62:	eb01 0084 	add.w	r0, r1, r4, lsl #2
  if (remaining_bytes != 0U)
 8006d66:	b162      	cbz	r2, 8006d82 <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d6c:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 8006d6e:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d70:	00d9      	lsls	r1, r3, #3
 8006d72:	fa24 f101 	lsr.w	r1, r4, r1
 8006d76:	54c1      	strb	r1, [r0, r3]
      i++;
 8006d78:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 8006d7a:	b299      	uxth	r1, r3
 8006d7c:	428a      	cmp	r2, r1
 8006d7e:	d1f7      	bne.n	8006d70 <USB_ReadPacket+0x22>
      pDest++;
 8006d80:	4410      	add	r0, r2
}
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d84:	682e      	ldr	r6, [r5, #0]
 8006d86:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
  for (i = 0U; i < count32b; i++)
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	e7e7      	b.n	8006d5e <USB_ReadPacket+0x10>

08006d8e <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8006d8e:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006d90:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006d92:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d94:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8006d98:	d112      	bne.n	8006dc0 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d9a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	db06      	blt.n	8006db0 <USB_EPSetStall+0x22>
 8006da2:	b12b      	cbz	r3, 8006db0 <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006da4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006da8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dac:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006db0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006db8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dc0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8006dc4:	2a00      	cmp	r2, #0
 8006dc6:	db06      	blt.n	8006dd6 <USB_EPSetStall+0x48>
 8006dc8:	b12b      	cbz	r3, 8006dd6 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006dca:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006dce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dd2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006dd6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006dda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dde:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006de2:	e7eb      	b.n	8006dbc <USB_EPSetStall+0x2e>

08006de4 <USB_EPClearStall>:
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006de4:	780b      	ldrb	r3, [r1, #0]
 8006de6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8006dea:	784b      	ldrb	r3, [r1, #1]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d111      	bne.n	8006e14 <USB_EPClearStall+0x30>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006df0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006df4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006df8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dfc:	790b      	ldrb	r3, [r1, #4]
 8006dfe:	3b02      	subs	r3, #2
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d805      	bhi.n	8006e10 <USB_EPClearStall+0x2c>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e04:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e0c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006e10:	2000      	movs	r0, #0
 8006e12:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e14:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006e18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e1c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e20:	790b      	ldrb	r3, [r1, #4]
 8006e22:	3b02      	subs	r3, #2
 8006e24:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e26:	bf9e      	ittt	ls
 8006e28:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8006e2c:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8006e30:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8006e34:	e7ec      	b.n	8006e10 <USB_EPClearStall+0x2c>

08006e36 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e36:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006e3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e3e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e42:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006e46:	0109      	lsls	r1, r1, #4
 8006e48:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8006e4c:	4319      	orrs	r1, r3
 8006e4e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8006e52:	2000      	movs	r0, #0
 8006e54:	4770      	bx	lr

08006e56 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e56:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e62:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006e66:	f023 0302 	bic.w	r3, r3, #2
 8006e6a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8006e6e:	2000      	movs	r0, #0
 8006e70:	4770      	bx	lr

08006e72 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e72:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8006e76:	f023 0303 	bic.w	r3, r3, #3
 8006e7a:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e7e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006e82:	f043 0302 	orr.w	r3, r3, #2
 8006e86:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	4770      	bx	lr

08006e8e <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006e8e:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006e90:	6980      	ldr	r0, [r0, #24]
}
 8006e92:	4010      	ands	r0, r2
 8006e94:	4770      	bx	lr

08006e96 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006e96:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006e9a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e9e:	69c0      	ldr	r0, [r0, #28]
 8006ea0:	4018      	ands	r0, r3
}
 8006ea2:	0c00      	lsrs	r0, r0, #16
 8006ea4:	4770      	bx	lr

08006ea6 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006ea6:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006eaa:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006eae:	69c0      	ldr	r0, [r0, #28]
 8006eb0:	4018      	ands	r0, r3
}
 8006eb2:	b280      	uxth	r0, r0
 8006eb4:	4770      	bx	lr

08006eb6 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006eb6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006eba:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ebe:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ec2:	6940      	ldr	r0, [r0, #20]
}
 8006ec4:	4010      	ands	r0, r2
 8006ec6:	4770      	bx	lr

08006ec8 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8006ec8:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ecc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ed0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ed4:	f001 010f 	and.w	r1, r1, #15
 8006ed8:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006eda:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ede:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ee0:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	4313      	orrs	r3, r2
}
 8006ee6:	4018      	ands	r0, r3
 8006ee8:	4770      	bx	lr

08006eea <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8006eea:	6940      	ldr	r0, [r0, #20]
}
 8006eec:	f000 0001 	and.w	r0, r0, #1
 8006ef0:	4770      	bx	lr

08006ef2 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ef2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006ef6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006efa:	f023 0307 	bic.w	r3, r3, #7
 8006efe:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f02:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f0a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8006f0e:	2000      	movs	r0, #0
 8006f10:	4770      	bx	lr

08006f12 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 8006f12:	4770      	bx	lr

08006f14 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8006f14:	b140      	cbz	r0, 8006f28 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8006f16:	68c3      	ldr	r3, [r0, #12]
 8006f18:	7858      	ldrb	r0, [r3, #1]
 8006f1a:	f010 0001 	ands.w	r0, r0, #1
 8006f1e:	bf1e      	ittt	ne
 8006f20:	7818      	ldrbne	r0, [r3, #0]
 8006f22:	fab0 f080 	clzne	r0, r0
 8006f26:	0940      	lsrne	r0, r0, #5
}
 8006f28:	4770      	bx	lr

08006f2a <arch_system_halt>:
	__asm__ volatile(
 8006f2a:	f04f 0210 	mov.w	r2, #16
 8006f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f32:	f382 8812 	msr	BASEPRI_MAX, r2
 8006f36:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8006f3a:	e7fe      	b.n	8006f3a <arch_system_halt+0x10>

08006f3c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8006f3c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8006f3e:	f7ff fff4 	bl	8006f2a <arch_system_halt>

08006f42 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8006f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f44:	4605      	mov	r5, r0
 8006f46:	460e      	mov	r6, r1
 8006f48:	f04f 0310 	mov.w	r3, #16
 8006f4c:	f3ef 8711 	mrs	r7, BASEPRI
 8006f50:	f383 8812 	msr	BASEPRI_MAX, r3
 8006f54:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8006f58:	f7fe f918 	bl	800518c <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4628      	mov	r0, r5
 8006f62:	f7ff ffeb 	bl	8006f3c <k_sys_fatal_error_handler>
	__asm__ volatile(
 8006f66:	f387 8811 	msr	BASEPRI, r7
 8006f6a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8006f6e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8006f70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f74:	f7fb b95c 	b.w	8002230 <z_impl_k_thread_abort>

08006f78 <z_early_memset>:
	(void) memset(dst, c, n);
 8006f78:	f7fe bde0 	b.w	8005b3c <memset>

08006f7c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 8006f7c:	f7fe bdd3 	b.w	8005b26 <memcpy>

08006f80 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f80:	f3ef 8005 	mrs	r0, IPSR
}
 8006f84:	3800      	subs	r0, #0
 8006f86:	bf18      	it	ne
 8006f88:	2001      	movne	r0, #1
 8006f8a:	4770      	bx	lr

08006f8c <z_impl_k_thread_name_set>:
}
 8006f8c:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8006f90:	4770      	bx	lr

08006f92 <z_impl_k_thread_start>:
	z_sched_start(thread);
 8006f92:	f7fd bfd5 	b.w	8004f40 <z_sched_start>

08006f96 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8006f96:	b508      	push	{r3, lr}
	__asm__ volatile(
 8006f98:	f04f 0210 	mov.w	r2, #16
 8006f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa0:	f382 8812 	msr	BASEPRI_MAX, r2
 8006fa4:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8006fa8:	f7fa feec 	bl	8001d84 <arch_cpu_idle>
 8006fac:	e7f4      	b.n	8006f98 <idle+0x2>

08006fae <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 8006fae:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8006fb2:	428b      	cmp	r3, r1
 8006fb4:	d001      	beq.n	8006fba <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 8006fb6:	f7fd bf6b 	b.w	8004e90 <z_set_prio>
}
 8006fba:	2000      	movs	r0, #0
 8006fbc:	4770      	bx	lr

08006fbe <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8006fbe:	b13a      	cbz	r2, 8006fd0 <z_impl_k_sem_init+0x12>
 8006fc0:	428a      	cmp	r2, r1
 8006fc2:	d305      	bcc.n	8006fd0 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8006fc4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8006fc8:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 8006fcc:	2000      	movs	r0, #0
 8006fce:	4770      	bx	lr
		return -EINVAL;
 8006fd0:	f06f 0015 	mvn.w	r0, #21
}
 8006fd4:	4770      	bx	lr

08006fd6 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
 8006fd6:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
 8006fd8:	2301      	movs	r3, #1
 8006fda:	408b      	lsls	r3, r1
 8006fdc:	ea22 0303 	bic.w	r3, r2, r3
 8006fe0:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
 8006fe2:	fa22 f001 	lsr.w	r0, r2, r1
}
 8006fe6:	f000 0001 	and.w	r0, r0, #1
 8006fea:	4770      	bx	lr

08006fec <notify_queue_locked.isra.0>:
	if (queue != NULL) {
 8006fec:	b120      	cbz	r0, 8006ff8 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8006fee:	2200      	movs	r2, #0
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	3088      	adds	r0, #136	; 0x88
 8006ff4:	f000 b8cd 	b.w	8007192 <z_sched_wake>
}
 8006ff8:	4770      	bx	lr

08006ffa <k_work_init>:
{
 8006ffa:	b538      	push	{r3, r4, r5, lr}
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8007000:	2210      	movs	r2, #16
 8007002:	2100      	movs	r1, #0
 8007004:	f7fe fd9a 	bl	8005b3c <memset>
 8007008:	6065      	str	r5, [r4, #4]
}
 800700a:	bd38      	pop	{r3, r4, r5, pc}

0800700c <z_work_submit_to_queue>:
{
 800700c:	b513      	push	{r0, r1, r4, lr}
 800700e:	9001      	str	r0, [sp, #4]
 8007010:	4608      	mov	r0, r1
 8007012:	f04f 0310 	mov.w	r3, #16
 8007016:	f3ef 8411 	mrs	r4, BASEPRI
 800701a:	f383 8812 	msr	BASEPRI_MAX, r3
 800701e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 8007022:	a901      	add	r1, sp, #4
 8007024:	f7fd fd4c 	bl	8004ac0 <submit_to_queue_locked>
	__asm__ volatile(
 8007028:	f384 8811 	msr	BASEPRI, r4
 800702c:	f3bf 8f6f 	isb	sy
}
 8007030:	b002      	add	sp, #8
 8007032:	bd10      	pop	{r4, pc}

08007034 <k_work_submit_to_queue>:
{
 8007034:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
 8007036:	f7ff ffe9 	bl	800700c <z_work_submit_to_queue>
	if (ret > 0) {
 800703a:	1e04      	subs	r4, r0, #0
 800703c:	dd09      	ble.n	8007052 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
 800703e:	f04f 0310 	mov.w	r3, #16
 8007042:	f3ef 8011 	mrs	r0, BASEPRI
 8007046:	f383 8812 	msr	BASEPRI_MAX, r3
 800704a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800704e:	f000 f88a 	bl	8007166 <z_reschedule_irqlock>
}
 8007052:	4620      	mov	r0, r4
 8007054:	bd10      	pop	{r4, pc}

08007056 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 8007056:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800705a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800705c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800705e:	2300      	movs	r3, #0
	node->prev = NULL;
 8007060:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 8007064:	4770      	bx	lr

08007066 <unpend_thread_no_timeout>:
{
 8007066:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 8007068:	f7ff fff5 	bl	8007056 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800706c:	7b43      	ldrb	r3, [r0, #13]
 800706e:	f023 0302 	bic.w	r3, r3, #2
 8007072:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 8007074:	2300      	movs	r3, #0
 8007076:	6083      	str	r3, [r0, #8]
}
 8007078:	bd08      	pop	{r3, pc}

0800707a <z_thread_timeout>:
{
 800707a:	b510      	push	{r4, lr}
 800707c:	4601      	mov	r1, r0
 800707e:	f04f 0310 	mov.w	r3, #16
 8007082:	f3ef 8411 	mrs	r4, BASEPRI
 8007086:	f383 8812 	msr	BASEPRI_MAX, r3
 800708a:	f3bf 8f6f 	isb	sy
		if (!killed) {
 800708e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 8007092:	f013 0f28 	tst.w	r3, #40	; 0x28
 8007096:	d10d      	bne.n	80070b4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 8007098:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 800709c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 800709e:	b10b      	cbz	r3, 80070a4 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 80070a0:	f7ff ffe1 	bl	8007066 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80070a4:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 80070a8:	f023 0314 	bic.w	r3, r3, #20
 80070ac:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 80070b0:	f7fd fe04 	bl	8004cbc <ready_thread>
	__asm__ volatile(
 80070b4:	f384 8811 	msr	BASEPRI, r4
 80070b8:	f3bf 8f6f 	isb	sy
}
 80070bc:	bd10      	pop	{r4, pc}

080070be <add_to_waitq_locked>:
{
 80070be:	b538      	push	{r3, r4, r5, lr}
 80070c0:	4604      	mov	r4, r0
 80070c2:	460d      	mov	r5, r1
	unready_thread(thread);
 80070c4:	f7fd fe2e 	bl	8004d24 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80070c8:	7b63      	ldrb	r3, [r4, #13]
 80070ca:	f043 0302 	orr.w	r3, r3, #2
 80070ce:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 80070d0:	b1e5      	cbz	r5, 800710c <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 80070d2:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 80070d4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80070d6:	429d      	cmp	r5, r3
 80070d8:	d109      	bne.n	80070ee <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 80070da:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 80070dc:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 80070e0:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80070e2:	606c      	str	r4, [r5, #4]
}
 80070e4:	e012      	b.n	800710c <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 80070e6:	686a      	ldr	r2, [r5, #4]
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d0f6      	beq.n	80070da <add_to_waitq_locked+0x1c>
 80070ec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0f3      	beq.n	80070da <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 80070f2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 80070f6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 80070fa:	428a      	cmp	r2, r1
 80070fc:	d0f3      	beq.n	80070e6 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80070fe:	4291      	cmp	r1, r2
 8007100:	ddf1      	ble.n	80070e6 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 8007102:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8007104:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 8007108:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800710a:	605c      	str	r4, [r3, #4]
}
 800710c:	bd38      	pop	{r3, r4, r5, pc}

0800710e <z_ready_thread>:
{
 800710e:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007110:	f04f 0310 	mov.w	r3, #16
 8007114:	f3ef 8411 	mrs	r4, BASEPRI
 8007118:	f383 8812 	msr	BASEPRI_MAX, r3
 800711c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 8007120:	f7fd fdcc 	bl	8004cbc <ready_thread>
	__asm__ volatile(
 8007124:	f384 8811 	msr	BASEPRI, r4
 8007128:	f3bf 8f6f 	isb	sy
}
 800712c:	bd10      	pop	{r4, pc}

0800712e <z_unpend_first_thread>:
{
 800712e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8007130:	f04f 0310 	mov.w	r3, #16
 8007134:	f3ef 8511 	mrs	r5, BASEPRI
 8007138:	f383 8812 	msr	BASEPRI_MAX, r3
 800713c:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8007140:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007142:	42a0      	cmp	r0, r4
 8007144:	d00d      	beq.n	8007162 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 8007146:	b134      	cbz	r4, 8007156 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 8007148:	4620      	mov	r0, r4
 800714a:	f7ff ff8c 	bl	8007066 <unpend_thread_no_timeout>
 800714e:	f104 0018 	add.w	r0, r4, #24
 8007152:	f000 f841 	bl	80071d8 <z_abort_timeout>
	__asm__ volatile(
 8007156:	f385 8811 	msr	BASEPRI, r5
 800715a:	f3bf 8f6f 	isb	sy
}
 800715e:	4620      	mov	r0, r4
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	2400      	movs	r4, #0
 8007164:	e7f7      	b.n	8007156 <z_unpend_first_thread+0x28>

08007166 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8007166:	4603      	mov	r3, r0
 8007168:	b920      	cbnz	r0, 8007174 <z_reschedule_irqlock+0xe>
 800716a:	f3ef 8205 	mrs	r2, IPSR
 800716e:	b90a      	cbnz	r2, 8007174 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 8007170:	f7fa be78 	b.w	8001e64 <arch_swap>
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
}
 800717c:	4770      	bx	lr

0800717e <z_reschedule_unlocked>:
	__asm__ volatile(
 800717e:	f04f 0310 	mov.w	r3, #16
 8007182:	f3ef 8011 	mrs	r0, BASEPRI
 8007186:	f383 8812 	msr	BASEPRI_MAX, r3
 800718a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800718e:	f7ff bfea 	b.w	8007166 <z_reschedule_irqlock>

08007192 <z_sched_wake>:
{
 8007192:	b538      	push	{r3, r4, r5, lr}
 8007194:	f04f 0310 	mov.w	r3, #16
 8007198:	f3ef 8511 	mrs	r5, BASEPRI
 800719c:	f383 8812 	msr	BASEPRI_MAX, r3
 80071a0:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80071a4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80071a6:	42a0      	cmp	r0, r4
 80071a8:	d012      	beq.n	80071d0 <z_sched_wake+0x3e>
		if (thread != NULL) {
 80071aa:	b19c      	cbz	r4, 80071d4 <z_sched_wake+0x42>
 80071ac:	67a1      	str	r1, [r4, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 80071ae:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7ff ff58 	bl	8007066 <unpend_thread_no_timeout>
 80071b6:	f104 0018 	add.w	r0, r4, #24
 80071ba:	f000 f80d 	bl	80071d8 <z_abort_timeout>
			ready_thread(thread);
 80071be:	4620      	mov	r0, r4
 80071c0:	f7fd fd7c 	bl	8004cbc <ready_thread>
			ret = true;
 80071c4:	2001      	movs	r0, #1
	__asm__ volatile(
 80071c6:	f385 8811 	msr	BASEPRI, r5
 80071ca:	f3bf 8f6f 	isb	sy
}
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 80071d0:	2000      	movs	r0, #0
 80071d2:	e7f8      	b.n	80071c6 <z_sched_wake+0x34>
 80071d4:	4620      	mov	r0, r4
 80071d6:	e7f6      	b.n	80071c6 <z_sched_wake+0x34>

080071d8 <z_abort_timeout>:
{
 80071d8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80071da:	f04f 0210 	mov.w	r2, #16
 80071de:	f3ef 8411 	mrs	r4, BASEPRI
 80071e2:	f382 8812 	msr	BASEPRI_MAX, r2
 80071e6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80071ea:	6803      	ldr	r3, [r0, #0]
 80071ec:	b13b      	cbz	r3, 80071fe <z_abort_timeout+0x26>
			remove_timeout(to);
 80071ee:	f7fe f891 	bl	8005314 <remove_timeout>
			ret = 0;
 80071f2:	2000      	movs	r0, #0
	__asm__ volatile(
 80071f4:	f384 8811 	msr	BASEPRI, r4
 80071f8:	f3bf 8f6f 	isb	sy
}
 80071fc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80071fe:	f06f 0015 	mvn.w	r0, #21
 8007202:	e7f7      	b.n	80071f4 <z_abort_timeout+0x1c>

08007204 <z_set_timeout_expiry>:
{
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	4604      	mov	r4, r0
 8007208:	460d      	mov	r5, r1
	__asm__ volatile(
 800720a:	f04f 0310 	mov.w	r3, #16
 800720e:	f3ef 8611 	mrs	r6, BASEPRI
 8007212:	f383 8812 	msr	BASEPRI_MAX, r3
 8007216:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 800721a:	f7fe f853 	bl	80052c4 <next_timeout>
			      || (ticks <= next_to);
 800721e:	2801      	cmp	r0, #1
 8007220:	dd07      	ble.n	8007232 <z_set_timeout_expiry+0x2e>
 8007222:	42a0      	cmp	r0, r4
 8007224:	db05      	blt.n	8007232 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 8007226:	42a0      	cmp	r0, r4
 8007228:	4629      	mov	r1, r5
 800722a:	bfa8      	it	ge
 800722c:	4620      	movge	r0, r4
 800722e:	f7fc f903 	bl	8003438 <sys_clock_set_timeout>
	__asm__ volatile(
 8007232:	f386 8811 	msr	BASEPRI, r6
 8007236:	f3bf 8f6f 	isb	sy
}
 800723a:	bd70      	pop	{r4, r5, r6, pc}

0800723c <sys_clock_tick_get_32>:
{
 800723c:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800723e:	f7fe f95d 	bl	80054fc <sys_clock_tick_get>
}
 8007242:	bd08      	pop	{r3, pc}
